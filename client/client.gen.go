// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for PipelineApprovalRequestStatus.
const (
	Approved  PipelineApprovalRequestStatus = "approved"
	Cancelled PipelineApprovalRequestStatus = "cancelled"
	Denied    PipelineApprovalRequestStatus = "denied"
	Waiting   PipelineApprovalRequestStatus = "waiting"
)

// Defines values for ValueSetVersionResultOf.
const (
	AppValueCreate            ValueSetVersionResultOf = "app_value_create"
	AppValueDelete            ValueSetVersionResultOf = "app_value_delete"
	AppValueSetVersionPurge   ValueSetVersionResultOf = "app_value_set_version_purge"
	AppValueSetVersionRestore ValueSetVersionResultOf = "app_value_set_version_restore"
	AppValueUpdate            ValueSetVersionResultOf = "app_value_update"
	AppValuesDelete           ValueSetVersionResultOf = "app_values_delete"
	EnvValueCreate            ValueSetVersionResultOf = "env_value_create"
	EnvValueDelete            ValueSetVersionResultOf = "env_value_delete"
	EnvValueSetVersionPurge   ValueSetVersionResultOf = "env_value_set_version_purge"
	EnvValueSetVersionRestore ValueSetVersionResultOf = "env_value_set_version_restore"
	EnvValueUpdate            ValueSetVersionResultOf = "env_value_update"
	EnvValuesDelete           ValueSetVersionResultOf = "env_values_delete"
)

// Defines values for ValueSource.
const (
	App ValueSource = "app"
	Env ValueSource = "env"
)

// Defines values for WorkloadProfileVersionSpecDefinitionPropertyType.
const (
	WorkloadProfileVersionSpecDefinitionPropertyTypeCollection WorkloadProfileVersionSpecDefinitionPropertyType = "collection"
	WorkloadProfileVersionSpecDefinitionPropertyTypeFeature    WorkloadProfileVersionSpecDefinitionPropertyType = "feature"
	WorkloadProfileVersionSpecDefinitionPropertyTypeSchema     WorkloadProfileVersionSpecDefinitionPropertyType = "schema"
)

// Defines values for WorkloadProfileVersionSpecDefinitionRuntimePropertyType.
const (
	WorkloadProfileVersionSpecDefinitionRuntimePropertyTypeCollection WorkloadProfileVersionSpecDefinitionRuntimePropertyType = "collection"
	WorkloadProfileVersionSpecDefinitionRuntimePropertyTypeFeature    WorkloadProfileVersionSpecDefinitionRuntimePropertyType = "feature"
)

// AWSAuthRequest Credentials to authenticate AWS Secret Manager.
type AWSAuthRequest struct {
	AccessKeyId     *string `json:"access_key_id,omitempty"`
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}

// AWSSMRequest AWS Secret Manager specification.
type AWSSMRequest struct {
	// Auth Credentials to authenticate AWS Secret Manager.
	Auth     *AWSAuthRequest `json:"auth,omitempty"`
	Endpoint *string         `json:"endpoint,omitempty"`
	Region   *string         `json:"region,omitempty"`
}

// AWSSMResponse AWS Secret Manager specification.
type AWSSMResponse struct {
	Endpoint *string `json:"endpoint,omitempty"`
	Region   *string `json:"region,omitempty"`
}

// AccountCredsRequest AccountCreds represents an account credentials (either, username- or token-based).
type AccountCredsRequest struct {
	// Expires Account credentials expiration timestamp.
	Expires *string `json:"expires"`

	// Password Account password or token secret.
	Password string `json:"password"`

	// Username Security account login or token.
	Username string `json:"username"`
}

// AccountTypeResponse Resource Account Types define cloud providers or protocols to which a resource account can belong.
type AccountTypeResponse struct {
	// Name Display Name.
	Name string `json:"name"`

	// Type Unique account type identifier (system-wide, across all organizations).
	Type string `json:"type"`
}

// ActiveResourceResponse Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.
//
// Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
type ActiveResourceResponse struct {
	// AppId The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// Class The Resource Class of the resource
	Class string `json:"class"`

	// CriteriaId The Matching Criteria ID.
	CriteriaId *string `json:"criteria_id,omitempty"`

	// DefId The Resource Definition that this resource was provisioned from.
	DefId string `json:"def_id"`

	// DeployId The deployment that the resource was last provisioned in.
	DeployId string `json:"deploy_id"`

	// DriverType The driver to be used to create the resource.
	DriverType *string `json:"driver_type,omitempty"`

	// EnvId The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// EnvType The Environment Type of the Environment specified by env_id.
	EnvType string `json:"env_type"`

	// GuResId Globally unique resource id
	GuResId string `json:"gu_res_id"`

	// OrgId the ID of the Organization the Active Resource is associated with.
	OrgId string `json:"org_id"`

	// ResId The ID of the resource
	ResId string `json:"res_id"`

	// Resource The data that the resource passes into the deployment ('values' only).
	Resource map[string]interface{} `json:"resource"`

	// Status Current resource status: 'pending', 'active', or 'deleting'.
	Status string `json:"status"`

	// Type The Resource Type of the resource
	Type string `json:"type"`

	// UpdatedAt The time the resource was last provisioned as part of a deployment.
	UpdatedAt string `json:"updated_at"`
}

// AddArtefactVersionPayloadRequest AddArtefactVersionPayload describes the payload for a new ArtefactVersion request.
type AddArtefactVersionPayloadRequest struct {
	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// Digest (Optional) The Artefact Version digest.
	Digest *string `json:"digest,omitempty"`

	// Name The Artefact name.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// Type The Artefact Version type.
	Type string `json:"type"`

	// Version (Optional) The Artefact Version.
	Version *string `json:"version,omitempty"`
}

// ApplicationCreationRequest defines model for ApplicationCreationRequest.
type ApplicationCreationRequest struct {
	Env *EnvironmentBaseRequest `json:"env,omitempty"`

	// Id The ID which refers to a specific application.
	Id string `json:"id"`

	// Name The Human-friendly name for the Application.
	Name string `json:"name"`
}

// ApplicationResponse An Application is a collection of Workloads that work together. When deployed, all Workloads in an Application are deployed to the same namespace.
//
// Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
type ApplicationResponse struct {
	// CreatedAt The timestamp in UTC indicates when the Application was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who created the Application.
	CreatedBy string `json:"created_by"`

	// Envs The Environments associated with the Application.
	Envs []EnvironmentBaseResponse `json:"envs"`

	// Id The ID which refers to a specific application.
	Id string `json:"id"`

	// Name The Human-friendly name for the Application.
	Name string `json:"name"`

	// OrgId The Organization id of this Application
	OrgId string `json:"org_id"`
}

// ArtefactResponse Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.
type ArtefactResponse struct {
	// CreatedAt The time when the Artefact was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Id The UUID of the Artefact.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Type The type of the Artefact.
	Type string `json:"type"`

	// UpdatedAt The time when the Artefact was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who updated the Artefact for the last time.
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// ArtefactVersionResponse An Artefact Version represents a particular version of an Artefact that can be added to an Application.
type ArtefactVersionResponse struct {
	// Archived If the Artefact Version is archived.
	Archived bool `json:"archived"`

	// ArtefactId The UUID of the Artefact.
	ArtefactId string `json:"artefact_id"`

	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit string `json:"commit"`

	// CreatedAt The time when the Artefact Version was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact Version to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Digest (Optional) The Artefact Version digest.
	Digest string `json:"digest"`

	// Id The UUID of the Artefact Version.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref string `json:"ref"`

	// UpdatedAt The time when the Artefact Version was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who performed the last updated on the Artefact Version.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Version (Optional) The version of the Artefact Version.
	Version string `json:"version"`
}

// AutomationRuleRequest An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleRequest struct {
	// Active Whether the rule will be processed or not.
	Active *bool `json:"active,omitempty"`

	// ArtefactsFilter A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter *[]string `json:"artefacts_filter,omitempty"`

	// ExcludeArtefactsFilter Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter *bool `json:"exclude_artefacts_filter,omitempty"`

	// ExcludeImagesFilter DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter *bool `json:"exclude_images_filter,omitempty"`

	// ImagesFilter DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter *[]string `json:"images_filter,omitempty"`

	// Match DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match *string `json:"match,omitempty"`

	// MatchRef A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef *string `json:"match_ref,omitempty"`

	// Type Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// UpdateTo DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo *string `json:"update_to,omitempty"`
}

// AutomationRuleResponse An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleResponse struct {
	// Active Whether the rule will be processed or not.
	Active bool `json:"active"`

	// ArtefactsFilter A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter []string `json:"artefacts_filter"`

	// CreatedAt The timestamp in UTC of when the Automation Rule was created.
	CreatedAt string `json:"created_at"`

	// ExcludeArtefactsFilter Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter bool `json:"exclude_artefacts_filter"`

	// ExcludeImagesFilter DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter bool `json:"exclude_images_filter"`

	// Id The unique ID for this rule.
	Id string `json:"id"`

	// ImagesFilter DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter []string `json:"images_filter"`

	// Match DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match string `json:"match"`

	// MatchRef A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef string `json:"match_ref"`

	// Type Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// UpdateTo DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo string `json:"update_to"`

	// UpdatedAt The timestamp in UTC of when the Automation Rule was updated.
	UpdatedAt string `json:"updated_at"`
}

// AzureAuthRequest Credentials to authenticate Azure Key Vault.
type AzureAuthRequest struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
}

// AzureKVRequest Azure Key Vault specification.
type AzureKVRequest struct {
	// Auth Credentials to authenticate Azure Key Vault.
	Auth     *AzureAuthRequest `json:"auth,omitempty"`
	TenantId *string           `json:"tenant_id,omitempty"`
	Url      *string           `json:"url,omitempty"`
}

// AzureKVResponse Azure Key Vault specification.
type AzureKVResponse struct {
	TenantId *string `json:"tenant_id,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// ClusterSecretRequest ClusterSecret represents Kubernetes secret reference.
type ClusterSecretRequest struct {
	// Namespace Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Secret Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecretResponse ClusterSecret represents Kubernetes secret reference.
type ClusterSecretResponse struct {
	// Namespace Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Secret Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecretsMapRequest ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapRequest map[string]ClusterSecretRequest

// ClusterSecretsMapResponse ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapResponse map[string]ClusterSecretResponse

// ControllerRequest Controller represents deployment, stateful set etc
type ControllerRequest struct {
	Kind     *string            `json:"kind,omitempty"`
	Message  *string            `json:"message,omitempty"`
	Pods     *[]PodStateRequest `json:"pods,omitempty"`
	Replicas *int               `json:"replicas,omitempty"`
	Revision *int               `json:"revision,omitempty"`
	Status   *string            `json:"status,omitempty"`
}

// ControllerResponse Controller represents deployment, stateful set etc
type ControllerResponse struct {
	Kind     string             `json:"kind"`
	Message  string             `json:"message"`
	Pods     []PodStateResponse `json:"pods"`
	Replicas int                `json:"replicas"`
	Revision int                `json:"revision"`
	Status   string             `json:"status"`
}

// CreateDriverRequestRequest CreateDriverRequest describes the new resource driver registration request.
type CreateDriverRequestRequest struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// Id The ID for this driver. Is used as `driver_type`.
	Id *string `json:"id,omitempty"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see 'target'.
	Target string `json:"target"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// CreateResourceAccountRequestRequest CreateResourceAccountRequest describes the request to create a new security account.
type CreateResourceAccountRequestRequest struct {
	// Credentials Credentials associated with the account.
	Credentials *map[string]interface{} `json:"credentials,omitempty"`

	// Id Unique identifier for the account (in scope of the organization it belongs to).
	Id *string `json:"id,omitempty"`

	// Name Display name.
	Name *string `json:"name,omitempty"`

	// Type The type of the account
	Type *string `json:"type,omitempty"`
}

// CreateResourceDefinitionRequestRequest CreateResourceDefinitionRequest describes a new ResourceDefinition request.
type CreateResourceDefinitionRequestRequest struct {
	// Criteria (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaRequest `json:"criteria,omitempty"`

	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// DriverType The driver to be used to create the resource.
	DriverType string `json:"driver_type"`

	// Id The Resource Definition ID.
	Id string `json:"id"`

	// Name The display name.
	Name string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`

	// Type The Resource Type.
	Type string `json:"type"`
}

// CreateSecretStorePayloadRequest Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec. It must contain exactly one of the following elements to define Secret Store specification: `awssm` (AWS Secret Manager), `azurekv` (Azure Key Vault), `gcpsm` (GCP Secret Manager), `vault` (HashiCorp Vault).
type CreateSecretStorePayloadRequest struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMRequest `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv *AzureKVRequest `json:"azurekv,omitempty"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMRequest `json:"gcpsm,omitempty"`

	// Id The Secret Store ID.
	Id string `json:"id"`

	// Primary Defines whether the Secret Store is the primary secret management system for the organization.
	Primary bool `json:"primary"`

	// Vault Vault specification.
	Vault *VaultRequest `json:"vault,omitempty"`
}

// DeltaMetadataRequest defines model for DeltaMetadataRequest.
type DeltaMetadataRequest struct {
	Archived       *bool      `json:"archived,omitempty"`
	Contributers   *[]string  `json:"contributers"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	CreatedBy      *string    `json:"created_by,omitempty"`
	EnvId          *string    `json:"env_id,omitempty"`
	LastModifiedAt *time.Time `json:"last_modified_at,omitempty"`
	Name           *string    `json:"name,omitempty"`
	Shared         *bool      `json:"shared,omitempty"`
}

// DeltaMetadataResponse defines model for DeltaMetadataResponse.
type DeltaMetadataResponse struct {
	Archived       bool      `json:"archived"`
	Contributers   *[]string `json:"contributers,omitempty"`
	CreatedAt      time.Time `json:"created_at"`
	CreatedBy      string    `json:"created_by"`
	EnvId          *string   `json:"env_id,omitempty"`
	LastModifiedAt time.Time `json:"last_modified_at"`
	Name           *string   `json:"name,omitempty"`
	Shared         *bool     `json:"shared,omitempty"`
}

// DeltaRequest A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Delta.>,
//	  "metadata": {
//	    <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//	  }
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type DeltaRequest struct {
	// Id Ignored, but can be provided.
	Id       *string               `json:"id,omitempty"`
	Metadata *DeltaMetadataRequest `json:"metadata,omitempty"`

	// Modules ModuleDeltas groups the different operations together.
	Modules *ModuleDeltasRequest   `json:"modules,omitempty"`
	Shared  *[]UpdateActionRequest `json:"shared"`
}

// DeltaResponse A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Delta.>,
//	  "metadata": {
//	    <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//	  }
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type DeltaResponse struct {
	// Id A unique ID for the Delta
	Id       string                `json:"id"`
	Metadata DeltaMetadataResponse `json:"metadata"`

	// Modules ModuleDeltas groups the different operations together.
	Modules ModuleDeltasResponse   `json:"modules"`
	Shared  []UpdateActionResponse `json:"shared"`
}

// DeployConditionRequest A deploy condition for the workload
//
// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
//
// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
type DeployConditionRequest struct {
	Success *string `json:"success,omitempty"`
	Timeout *int    `json:"timeout,omitempty"`
	When    *string `json:"when,omitempty"`
}

// DeployConditionResponse A deploy condition for the workload
//
// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
//
// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
type DeployConditionResponse struct {
	Success string `json:"success"`
	Timeout int    `json:"timeout"`
	When    string `json:"when"`
}

// DeploymentErrorResponse Error happening during deployment.
type DeploymentErrorResponse struct {
	Code      string `json:"code"`
	ErrorType string `json:"error_type"`
	Message   string `json:"message"`
	ObjectId  string `json:"object_id"`
	Scope     string `json:"scope"`
	Summary   string `json:"summary"`
}

// DeploymentRequest Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentRequest struct {
	// Comment An optional comment to help communicate the purpose of the Deployment.
	Comment *string `json:"comment,omitempty"`

	// DeltaId ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId *string `json:"delta_id,omitempty"`

	// SetId ID of the Deployment Set describing the state of the Environment after Deployment.
	SetId *string `json:"set_id,omitempty"`

	// ValueSetVersionId ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// DeploymentResponse Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentResponse struct {
	// Comment An optional comment to help communicate the purpose of the Deployment.
	Comment string `json:"comment"`

	// CreatedAt The Timestamp of when the Deployment was initiated.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who initiated the Deployment.
	CreatedBy string `json:"created_by"`

	// DeltaId ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId *string `json:"delta_id,omitempty"`

	// EnvId The Environment where the Deployment occurred.
	EnvId        string `json:"env_id"`
	ExportFile   string `json:"export_file"`
	ExportStatus string `json:"export_status"`

	// FromId The ID of the Deployment that this Deployment was based on.
	FromId string `json:"from_id"`

	// Id The ID of the Deployment.
	Id string `json:"id"`

	// SetId ID of the Deployment Set describing the state of the Environment after Deployment.
	SetId string `json:"set_id"`

	// Status The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.
	Status string `json:"status"`

	// StatusChangedAt The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.
	StatusChangedAt string `json:"status_changed_at"`

	// ValueSetVersionId ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// DriverDefinitionResponse DriverDefinition describes the resource driver.
//
// Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
type DriverDefinitionResponse struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// Id The ID for this driver. Is used as `driver_type`.
	Id string `json:"id"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// OrgId The Organization this driver exists under. Useful as public drivers are accessible to other orgs.
	OrgId string `json:"org_id"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see `target`.
	Target *string `json:"target,omitempty"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// EnvironmentBaseRequest defines model for EnvironmentBaseRequest.
type EnvironmentBaseRequest struct {
	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentBaseResponse defines model for EnvironmentBaseResponse.
type EnvironmentBaseResponse struct {
	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentDefinitionRequest defines model for EnvironmentDefinitionRequest.
type EnvironmentDefinitionRequest struct {
	// FromDeployId Defines the existing Deployment the new Environment will be based on.
	FromDeployId string `json:"from_deploy_id"`

	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentResponse Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.
type EnvironmentResponse struct {
	// CreatedAt The timestamp in UTC of when the Environment was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who created the Environment
	CreatedBy string `json:"created_by"`

	// FromDeploy Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	FromDeploy *DeploymentResponse `json:"from_deploy,omitempty"`

	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// LastDeploy Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	LastDeploy *DeploymentResponse `json:"last_deploy,omitempty"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentRuntimeInfoResponse EnvironmentRuntimeInfo
type EnvironmentRuntimeInfoResponse struct {
	Error  *string `json:"error,omitempty"`
	Id     string  `json:"id"`
	Paused bool    `json:"paused"`
	Status *string `json:"status,omitempty"`
}

// EnvironmentTypeRequest Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeRequest struct {
	// Description A Human-readable description of the Environment Type
	Description *string `json:"description,omitempty"`

	// Id The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// EnvironmentTypeResponse Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeResponse struct {
	// Description A Human-readable description of the Environment Type
	Description string `json:"description"`

	// Id The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// ErrorInfoResponse ErrorInfo is returned by a handler in case of an error.
type ErrorInfoResponse struct {
	// Error An error details
	Error string `json:"error"`
}

// ErrorResponse A standard error response
type ErrorResponse struct {
	// Details An optional payload of metadata associated with the error.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A short code representing the class of error. This code can be used for tracking and observability or to
	// find appropriate troubleshooting documentation.
	Error string `json:"error"`

	// Message A human-readable explanation of the error.
	Message string `json:"message"`
}

// EventBaseRequest Properties which identify an event .
type EventBaseRequest struct {
	// Scope Event scope
	Scope *string `json:"scope,omitempty"`

	// Type Event type
	Type *string `json:"type,omitempty"`
}

// EventBaseResponse Properties which identify an event .
type EventBaseResponse struct {
	// Scope Event scope
	Scope string `json:"scope"`

	// Type Event type
	Type string `json:"type"`
}

// EventResponse Events available for triggering automated jobs.
type EventResponse struct {
	// Properties List of event properties which can be used as variables for this event
	Properties []string `json:"properties"`

	// Scope Event scope
	Scope string `json:"scope"`

	// Type Event type
	Type string `json:"type"`
}

// GCPAuthRequest Credentials to authenticate GCP Secret Manager.
type GCPAuthRequest struct {
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}

// GCPSMRequest GCP Secret Manager specification.
type GCPSMRequest struct {
	// Auth Credentials to authenticate GCP Secret Manager.
	Auth      *GCPAuthRequest `json:"auth,omitempty"`
	ProjectId *string         `json:"project_id,omitempty"`
}

// GCPSMResponse GCP Secret Manager specification.
type GCPSMResponse struct {
	ProjectId *string `json:"project_id,omitempty"`
}

// HumanitecErrorResponse HumanitecError represents a standard Humanitec Error
type HumanitecErrorResponse struct {
	// Details (Optional) Additional information is enclosed here.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A short code to help with error identification.
	Error string `json:"error"`

	// Message A Human readable message about the error.
	Message    string `json:"message"`
	StatusCode *int   `json:"status_code,omitempty"`
}

// HumanitecPublicKey HumanitecPublicKey stores a Public Key Humanitec shared with an organization.
type HumanitecPublicKey struct {
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	ExpiredAt time.Time `json:"expired_at"`
	Id        string    `json:"id"`
	PubKey    string    `json:"pub_key"`
	UpdatedAt time.Time `json:"updated_at"`
}

// HumanitecResponse Humanitec built-in Secret Store specification.
type HumanitecResponse = map[string]interface{}

// ImageBuildRequest DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildRequest struct {
	// Branch The branch name of the branch the build was built on
	Branch *string `json:"branch,omitempty"`

	// Commit The commit ID that this build was built from.
	Commit *string `json:"commit,omitempty"`

	// Image The fully qualified Image URL including registry, repository and tag.
	Image *string `json:"image,omitempty"`

	// Tags The tag that the build was built from.
	Tags *[]string `json:"tags,omitempty"`
}

// ImageBuildResponse DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildResponse struct {
	// AddedAt The time when the build was added to Humanitec.
	AddedAt *string `json:"added_at,omitempty"`

	// Branch The branch name of the branch the build was built on
	Branch string `json:"branch"`

	// Commit The commit ID that this build was built from.
	Commit string `json:"commit"`

	// Image The fully qualified Image URL including registry, repository and tag.
	Image string `json:"image"`

	// Tags The tag that the build was built from.
	Tags []string `json:"tags"`
}

// ImageResponse DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Container Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.
type ImageResponse struct {
	// AddedAt The time the first build of this Image was added to the organization
	AddedAt string `json:"added_at"`

	// Builds A list of Image Builds ordered by addition date.
	Builds []ImageBuildResponse `json:"builds"`

	// Id The ID used to group different builds of the same Image together.
	Id string `json:"id"`

	// Source The Image Source that this Image is added via
	Source string `json:"source"`
}

// JSONFieldRequest defines model for JSONFieldRequest.
type JSONFieldRequest map[string]interface{}

// JSONFieldResponse defines model for JSONFieldResponse.
type JSONFieldResponse map[string]interface{}

// JSONPatchResponse defines model for JSONPatchResponse.
type JSONPatchResponse struct {
	Op    string       `json:"op"`
	Path  string       `json:"path"`
	Value *interface{} `json:"value,omitempty"`
}

// JSONPatchesResponse defines model for JSONPatchesResponse.
type JSONPatchesResponse = []JSONPatchResponse

// LogoResponse defines model for LogoResponse.
type LogoResponse struct {
	DarkUrl  *string `json:"dark_url"`
	LightUrl *string `json:"light_url"`
}

// MatchingCriteriaRequest Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
//
// Matching criteria are made up in order of specificity with least specific first:
//
// - Environment Type (`env_type`)
//
// - Application (`app_id`)
//
// - Environment (`env_id`)
//
// - Resource (`res_id`)
//
// When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
//
// **NOTE:**
//
// Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
type MatchingCriteriaRequest struct {
	// AppId (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// Class (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
	Class *string `json:"class,omitempty"`

	// EnvId (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// Id Matching Criteria ID
	Id *string `json:"id,omitempty"`

	// ResId (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// MatchingCriteriaResponse Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
//
// Matching criteria are made up in order of specificity with least specific first:
//
// - Environment Type (`env_type`)
//
// - Application (`app_id`)
//
// - Environment (`env_id`)
//
// - Resource (`res_id`)
//
// When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
//
// **NOTE:**
//
// Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
type MatchingCriteriaResponse struct {
	// AppId (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// Class (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
	Class string `json:"class"`

	// EnvId (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// Id Matching Criteria ID
	Id string `json:"id"`

	// ResId (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// MatchingCriteriaRuleRequest MatchingCriteriaRule describes Matching Criteria rules.
type MatchingCriteriaRuleRequest struct {
	// AppId (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// Class (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
	Class *string `json:"class,omitempty"`

	// EnvId (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// ResId (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// ModuleDeltasRequest ModuleDeltas groups the different operations together.
type ModuleDeltasRequest struct {
	Add    *map[string]ModuleRequest         `json:"add"`
	Remove *[]string                         `json:"remove"`
	Update *map[string][]UpdateActionRequest `json:"update"`
}

// ModuleDeltasResponse ModuleDeltas groups the different operations together.
type ModuleDeltasResponse struct {
	Add    map[string]ModuleResponse         `json:"add"`
	Remove []string                          `json:"remove"`
	Update map[string][]UpdateActionResponse `json:"update"`
}

// ModuleRequest Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module
type ModuleRequest struct {
	// Deploy A deploy condition for the workload
	//
	// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
	//
	// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
	Deploy               *DeployConditionRequest      `json:"deploy,omitempty"`
	Externals            *map[string]interface{}      `json:"externals"`
	Profile              *string                      `json:"profile,omitempty"`
	Spec                 *map[string]interface{}      `json:"spec"`
	AdditionalProperties map[string]ControllerRequest `json:"-"`
}

// ModuleResponse Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module
type ModuleResponse struct {
	// Deploy A deploy condition for the workload
	//
	// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
	//
	// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
	Deploy               *DeployConditionResponse      `json:"deploy,omitempty"`
	Externals            map[string]interface{}        `json:"externals"`
	Profile              string                        `json:"profile"`
	Spec                 map[string]interface{}        `json:"spec"`
	AdditionalProperties map[string]ControllerResponse `json:"-"`
}

// NewServiceUserRequest NewServiceUser holds the definition of a new service user.
type NewServiceUserRequest struct {
	// Email The email address that should get notifications about this service user. (Optional)
	Email *string `json:"email,omitempty"`

	// Name The name that should be shown for this service user.
	Name string `json:"name"`

	// Role The role that the service user should have on the organization it is created in
	Role string `json:"role"`
}

// NodeBodyResponse NodeBody represents a node of a Resource Dependency Graph.
type NodeBodyResponse struct {
	Class          string                 `json:"class"`
	CriteriaId     string                 `json:"criteria_id"`
	DefId          string                 `json:"def_id"`
	DependsOn      []string               `json:"depends_on"`
	Driver         map[string]interface{} `json:"driver"`
	DriverType     string                 `json:"driver_type"`
	Guresid        string                 `json:"guresid"`
	Id             string                 `json:"id"`
	Resource       map[string]interface{} `json:"resource"`
	ResourceSchema map[string]interface{} `json:"resource_schema"`
	Target         *string                `json:"target,omitempty"`
	Type           string                 `json:"type"`
}

// OrganizationResponse An Organization is the top level object in Humanitec. All other objects belong to an Organization.
type OrganizationResponse struct {
	// CreatedAt Timestamp when the Organization was created.
	CreatedAt *string `json:"created_at"`

	// CreatedBy User ID that created the Organization.
	CreatedBy string `json:"created_by"`

	// Id Unique ID for the Organization.
	Id   string        `json:"id"`
	Logo *LogoResponse `json:"logo,omitempty"`

	// Name Human friendly name for the Organization.
	Name string `json:"name"`
}

// PatchResourceDefinitionRequestRequest PatchResourceDefinitionRequest describes a ResourceDefinition change request.
type PatchResourceDefinitionRequestRequest struct {
	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// Name (Optional) Resource display name
	Name *string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource or if they have the same dependent resources.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`
}

// Pipeline An object containing the details of a Pipeline.
type Pipeline struct {
	// AppId The id of the Application containing this Pipeline.
	AppId string `json:"app_id"`

	// CreatedAt The date and time when the Pipeline was created.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Pipeline.
	Etag string `json:"etag"`

	// Id The id of the Pipeline.
	Id string `json:"id"`

	// Metadata The map of key value pipeline additional information
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Name The name of the Pipeline.
	Name string `json:"name"`

	// OrgId The id of the Organization containing this Pipeline.
	OrgId string `json:"org_id"`

	// Status The current status of the Pipeline.
	Status string `json:"status"`

	// TriggerTypes The list of trigger types in the current schema.
	TriggerTypes []string `json:"trigger_types"`

	// Version The unique id of the current Pipeline Version.
	Version string `json:"version"`
}

// PipelineApprovalRequest An approval object
type PipelineApprovalRequest struct {
	// AppId The id of the Application.
	AppId string `json:"app_id"`

	// ApprovedAt The date and time when the request was approved or denied.
	ApprovedAt *time.Time `json:"approved_at,omitempty"`

	// ApprovedBy The user who approved or denied the request.
	ApprovedBy *string `json:"approved_by,omitempty"`

	// CreatedAt The date and time when the approval request was created.
	CreatedAt time.Time `json:"created_at"`

	// EnvId The environment for which the approver needs to have deploy permission to approve the job.
	EnvId string `json:"env_id"`

	// Id The id of the approval object.
	Id string `json:"id"`

	// JobId The id of the Run's Job.
	JobId string `json:"job_id"`

	// Message A human-readable message indicating the reason for approval.
	Message string `json:"message"`

	// OrgId The id of the Organization.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// RunId The id of the Pipeline's Run.
	RunId string `json:"run_id"`

	// Status The current status of the approval request.
	Status PipelineApprovalRequestStatus `json:"status"`
}

// PipelineApprovalRequestStatus The current status of the approval request.
type PipelineApprovalRequestStatus string

// PipelineJob defines model for PipelineJob.
type PipelineJob struct {
	// AppId The id of the Application containing this Job.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Job was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Job entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Job was first created within the Run.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Job.
	Etag string `json:"etag"`

	// Id The id of the Job within the Run.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Job.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunId The id of the Run containing this Job.
	RunId string `json:"run_id"`

	// Status The current status of this Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// Steps The collection of Steps that completed along with the current Step being executed.
	Steps []PipelineStep `json:"steps"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// WaitingFor An event on which job is waiting
	WaitingFor *string `json:"waiting_for,omitempty"`
}

// PipelineJobPartial Partial details of a Job within the Run. The full details, including steps, can be retrieved using the GetPipelineJob operation.
type PipelineJobPartial struct {
	// AppId The id of the Application containing this Job.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Job was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Job entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Job was first created within the Run.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Job.
	Etag string `json:"etag"`

	// Id The id of the Job within the Run.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Job.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunId The id of the Run containing this Job.
	RunId string `json:"run_id"`

	// Status The current status of this Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// WaitingFor An event on which job is waiting
	WaitingFor *string `json:"waiting_for,omitempty"`
}

// PipelineRun Details of a Run within the Pipeline.
type PipelineRun struct {
	// AppId The id of the Application containing this Run.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Run was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Run entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// ConcurrencyGroup The optional concurrency group for this run within the application
	ConcurrencyGroup *string `json:"concurrency_group,omitempty"`

	// CreatedAt The date and time when this Run was first created.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Run.
	Etag string `json:"etag"`

	// ExecutingAt The date and time when this Run entered executing status.
	ExecutingAt *time.Time `json:"executing_at,omitempty"`

	// Id The unique id of the Run.
	Id string `json:"id"`

	// Inputs The inputs that were provided for this Run.
	Inputs map[string]interface{} `json:"inputs"`

	// OrgId The id of the Organization containing this Run.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline associated with the Run.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunAs The user id that the pipeline run is executing as when it calls Humanitec APIs.
	RunAs string `json:"run_as"`

	// Status The current status of this Run.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Run.
	TimeoutSeconds int `json:"timeout_seconds"`

	// WaitingFor Aggregated events on which run's jobs are waiting for
	WaitingFor map[string]string `json:"waiting_for"`
}

// PipelineRunCreateBody The parameters for creating a new Run for the Pipeline.
type PipelineRunCreateBody struct {
	// Inputs The inputs provided for this Run.
	Inputs map[string]interface{} `json:"inputs"`
}

// PipelineStep A Step within a Job.
type PipelineStep struct {
	// CompletedAt The date and time when this Step entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Step was first created within the Job.
	CreatedAt time.Time `json:"created_at"`

	// Index The index of the Step within the Pipeline Schema.
	Index int `json:"index"`

	// Name The name of the step or a generated default.
	Name string `json:"name"`

	// Status The current status of this Step within the Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// Uses The action used by this step.
	Uses string `json:"uses"`
}

// PipelineStepLog An item from the logs of a Step.
type PipelineStepLog struct {
	// At The date and time when this message was emitted or captured.
	At time.Time `json:"at"`

	// Level The log level of the message.
	Level string `json:"level"`

	// Message The content of the message.
	Message string `json:"message"`
}

// PipelineVersion An object containing the details of a Pipeline.
type PipelineVersion struct {
	// AppId The id of the Application containing this Run.
	AppId string `json:"app_id"`

	// CreatedAt The date and time when the specific pipeline version was created.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User id of the pipeline version.
	CreatedBy string `json:"created_by"`

	// Id The unique id of the current Pipeline Version.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Run.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline associated with the Run.
	PipelineId string `json:"pipeline_id"`
}

// PlainDeltaResponse Similar to the delta response, except the id and metadata properties.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type PlainDeltaResponse struct {
	// Modules ModuleDeltas groups the different operations together.
	Modules ModuleDeltasResponse   `json:"modules"`
	Shared  []UpdateActionResponse `json:"shared"`
}

// PodStateRequest PodState represents single pod status
type PodStateRequest struct {
	ContainerStatuses *[]map[string]interface{} `json:"containerStatuses,omitempty"`
	Phase             *string                   `json:"phase,omitempty"`
	PodName           *string                   `json:"podName,omitempty"`
	Revision          *int                      `json:"revision,omitempty"`
	Status            *string                   `json:"status,omitempty"`
}

// PodStateResponse PodState represents single pod status
type PodStateResponse struct {
	ContainerStatuses []map[string]interface{} `json:"containerStatuses"`
	Phase             string                   `json:"phase"`
	PodName           string                   `json:"podName"`
	Revision          int                      `json:"revision"`
	Status            string                   `json:"status"`
}

// ProvisionDependenciesRequest ProvisionDependencies defines resources which are needed to be co-provisioned with the current resource.
type ProvisionDependenciesRequest struct {
	// IsDependent If the co-provisioned resource is dependendent on the current one.
	IsDependent *bool `json:"is_dependent,omitempty"`

	// MatchDependents If the resources dependant on the main resource, are also dependant on the co-provisioned one.
	MatchDependents *bool `json:"match_dependents,omitempty"`
}

// ProvisionDependenciesResponse ProvisionDependencies defines resources which are needed to be co-provisioned with the current resource.
type ProvisionDependenciesResponse struct {
	// IsDependent If the co-provisioned resource is dependendent on the current one.
	IsDependent bool `json:"is_dependent"`

	// MatchDependents If the resources dependant on the main resource, are also dependant on the co-provisioned one.
	MatchDependents *bool `json:"match_dependents,omitempty"`
}

// PublicKey PublicKey stores a Public Key an organization shares with Humanitec.
type PublicKey struct {
	CreatedAt time.Time `json:"created_at"`
	CreatedBy string    `json:"created_by"`
	ExpiredAt time.Time `json:"expired_at"`

	// Fingerprint Key is the sha256 public key fingerprint, it's computed and stored when a new key is uploaded.
	Fingerprint string `json:"fingerprint"`
	Id          string `json:"id"`
	Key         string `json:"key"`
}

// RegistryCredsResponse RegistryCreds represents current registry credentials (either, username- or token-based).
type RegistryCredsResponse struct {
	// Expires Account credentials expiration timestamp.
	Expires *string `json:"expires"`

	// Password Account password or token secret.
	Password string `json:"password"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets ClusterSecretsMapResponse `json:"secrets"`

	// Username Security account login or token.
	Username string `json:"username"`
}

// RegistryRequest Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryRequest struct {
	// Creds AccountCreds represents an account credentials (either, username- or token-based).
	Creds *AccountCredsRequest `json:"creds,omitempty"`

	// EnableCi Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi *bool `json:"enable_ci,omitempty"`

	// Id Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapRequest `json:"secrets,omitempty"`

	// Type Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// RegistryResponse Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryResponse struct {
	// CreatedAt The timestamp of when this record was created.
	CreatedAt *string `json:"created_at"`

	// CreatedBy The user who created this record.
	CreatedBy *string `json:"created_by,omitempty"`

	// EnableCi Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi bool `json:"enable_ci"`

	// Id Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapResponse `json:"secrets,omitempty"`

	// Type Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// ResourceAccountResponse ResourceAccount represents the account being used to access a resource.
//
// Resource Accounts hold credentials that are required to provision and manage resources.
type ResourceAccountResponse struct {
	// CreatedAt The timestamp of when the account was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The ID of the user who created the account.
	CreatedBy string `json:"created_by"`

	// Id Unique identifier for the account (in scope of the organization it belongs to).
	Id string `json:"id"`

	// IsUsed Indicates if this account is being used (referenced) by any resource definition.
	IsUsed bool `json:"is_used"`

	// Name Display name.
	Name string `json:"name"`

	// Type The type of the account
	Type string `json:"type"`
}

// ResourceDefinitionChangeResponse ResourceDefinitionChange describes the effects of a Resource Definition or Matching Criteria update/deletion.
type ResourceDefinitionChangeResponse struct {
	// AppId The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// EnvId The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// FromDef The Resource Definition that this resource was provisioned from.
	FromDef string `json:"from_def"`

	// ResId The ID of the resource
	ResId string `json:"res_id"`

	// ToDef The Resource Definition that resource *will be* provisioned from if the change is applied.
	ToDef string `json:"to_def"`
}

// ResourceDefinitionResponse A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.
//
// The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
type ResourceDefinitionResponse struct {
	// CreatedAt The timestamp of when this record has been created.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user who created this record.
	CreatedBy *string `json:"created_by,omitempty"`

	// Criteria (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaResponse `json:"criteria,omitempty"`

	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsResponse `json:"driver_inputs,omitempty"`

	// DriverType The driver to be used to create the resource.
	DriverType *string `json:"driver_type,omitempty"`

	// Id The Resource Definition ID.
	Id string `json:"id"`

	// IsDefault Indicates this definition is a built-in one (provided by Humanitec).
	IsDefault *bool `json:"is_default,omitempty"`

	// IsDeleted Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// Name The display name.
	Name string `json:"name"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.
	Provision *map[string]ProvisionDependenciesResponse `json:"provision,omitempty"`

	// Type The Resource Type.
	Type string `json:"type"`
}

// ResourceProvisionRequestRequest ResourceProvisionRequest is the payload passed to the resource provisioner, specifying the resources to be provisioned.
type ResourceProvisionRequestRequest struct {
	// Class (Optional) A resource class
	Class *string `json:"class,omitempty"`
	Id    string  `json:"id"`

	// Resource (Optional) The input parameters for the resource passed from the deployment set.
	Resource *map[string]interface{} `json:"resource,omitempty"`
	Type     string                  `json:"type"`
}

// ResourceTypeResponse Resources Types define the technology that Applications can have dependencies on.
//
// Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
type ResourceTypeResponse struct {
	// Category Category name (used to group similar resources on the UI).
	Category string `json:"category"`

	// InputsSchema A JSON Schema specifying the type-specific parameters for the driver (input).
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// Name Display name.
	Name string `json:"name"`

	// OutputsSchema A JSON Schema specifying the type-specific data passed to the deployment (output).
	OutputsSchema map[string]interface{} `json:"outputs_schema"`

	// Type Unique resource type identifier (system-wide, across all organizations).
	Type string `json:"type"`

	// Use Kind of dependency between resource of this type and a workload. It should be one of: `direct`, `indirect`, `implicit`.
	Use string `json:"use"`
}

// RoleRequest Role defines the role that will be used in request
type RoleRequest struct {
	Role *string `json:"role,omitempty"`
}

// RuntimeInfoResponse RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
type RuntimeInfoResponse struct {
	Modules   map[string]ModuleResponse `json:"modules"`
	Namespace string                    `json:"namespace"`
}

// SecretReference It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
type SecretReference struct {
	// Ref Secret reference in the format of the target store. It can't be defined if `value` is defined.
	Ref *string `json:"ref,omitempty"`

	// Store Secret Store id. This can't be `humanitec` (our internal Secret Store). It's mandatory if `ref` is defined and can't be used if `value` is defined.
	Store *string `json:"store,omitempty"`

	// Value Value to store in the secret store. It can't be defined if `ref` is defined.
	Value *string `json:"value,omitempty"`

	// Version Optional, only valid if `ref` is defined. It's the version of the secret as defined in the target store.
	Version *string `json:"version,omitempty"`
}

// SecretStoreResponse Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec.
type SecretStoreResponse struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMResponse `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv   *AzureKVResponse `json:"azurekv,omitempty"`
	CreatedAt string           `json:"created_at"`
	CreatedBy string           `json:"created_by"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMResponse `json:"gcpsm,omitempty"`

	// Humanitec Humanitec built-in Secret Store specification.
	Humanitec *HumanitecResponse `json:"humanitec,omitempty"`
	Id        string             `json:"id"`
	Primary   bool               `json:"primary"`
	UpdatedAt string             `json:"updated_at"`
	UpdatedBy string             `json:"updated_by"`

	// Vault Vault specification.
	Vault *VaultResponse `json:"vault,omitempty"`
}

// SetResponse A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.
//
// Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.
//
// Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Set>,
//	  "modules" : {
//	    <ID of Module> : {
//	      "profile": <Defines how the optional "spec" property is interpreted>
//	      "spec": {
//	        <Properties that depend on the "profile" property.>
//	      }
//	      "externals": {
//	        <External Resource Name> : {
//	          "type": <Resource Type>,
//	          "params": {
//	            <Properties which parametrize the resource depending on the Resource Type.>
//	          }
//	        }
//	      }
//	    }
//	  }
//	}
//
// ```
//
// For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
type SetResponse struct {
	// Id The ID which is a hash of the content of the Deployment Set.
	Id string `json:"id"`

	// Modules The Modules that make up the Set
	Modules map[string]ModuleResponse `json:"modules"`

	// Shared Resources that are shared across the set
	Shared map[string]interface{} `json:"shared"`

	// Version The version of the Deployment Set Schema to use. (Currently, only 0 is supported, and if omitted, version 0 is assumed.)
	Version int `json:"version"`
}

// TokenDefinitionRequest Defines the token to be created.
type TokenDefinitionRequest struct {
	// Description A description of the token. (Optional)
	Description *string `json:"description,omitempty"`

	// ExpiresAt The time the token expires. If not set, the token will not expire. (Optional)
	ExpiresAt *string `json:"expires_at,omitempty"`

	// Id Identifier of the token. Must be unique for the user.
	Id string `json:"id"`

	// Type The type of the token. Can only be "static".
	Type string `json:"type"`
}

// TokenInfoResponse Holds metadata about a token. `expires_at` is excluded if token does not expire.
type TokenInfoResponse struct {
	CreatedAt   string  `json:"created_at"`
	CreatedBy   string  `json:"created_by"`
	Description string  `json:"description"`
	ExpiresAt   *string `json:"expires_at,omitempty"`
	Id          string  `json:"id"`
	Type        string  `json:"type"`
}

// TokenResponse Token holds the token and its type.
type TokenResponse struct {
	Token string  `json:"token"`
	Type  *string `json:"type,omitempty"`
}

// UpdateActionRequest A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionRequest struct {
	From  *string      `json:"from,omitempty"`
	Op    *string      `json:"op,omitempty"`
	Path  *string      `json:"path,omitempty"`
	Value *interface{} `json:"value"`
}

// UpdateActionResponse A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionResponse struct {
	From  *string      `json:"from,omitempty"`
	Op    string       `json:"op"`
	Path  string       `json:"path"`
	Value *interface{} `json:"value,omitempty"`
}

// UpdateArtefactVersionPayloadRequest UpdateArtefactVersionPayload contains the `archived` field that should be set in the Artefact Version to update.
type UpdateArtefactVersionPayloadRequest struct {
	// Archived The Value of the archived value.
	Archived *bool `json:"archived"`
}

// UpdateDriverRequestRequest UpdateDriverRequest describes the update driver details request.
type UpdateDriverRequestRequest struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see 'target'.
	Target string `json:"target"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// UpdateResourceAccountRequestRequest UpdateResourceAccountRequest describes the request to update the security account details.
type UpdateResourceAccountRequestRequest struct {
	// Credentials Credentials associated with the account.
	Credentials *map[string]interface{} `json:"credentials,omitempty"`

	// Name Display name.
	Name *string `json:"name,omitempty"`
}

// UpdateResourceDefinitionRequestRequest UpdateResourceDefinitionRequest describes a ResourceDefinition change request.
type UpdateResourceDefinitionRequestRequest struct {
	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// Name The display name.
	Name string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource or if they have the same dependent resources.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`
}

// UpdateSecretStorePayloadRequest Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec.
type UpdateSecretStorePayloadRequest struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMRequest `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv *AzureKVRequest `json:"azurekv,omitempty"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMRequest `json:"gcpsm,omitempty"`

	// Primary Defines whether the Secret Store is the primary secret management system for the organization.
	Primary *bool `json:"primary"`

	// Vault Vault specification.
	Vault *VaultRequest `json:"vault,omitempty"`
}

// UserInviteRequestRequest UserInviteRequest describes a new user invitation.
type UserInviteRequestRequest struct {
	// Email The email address of the user from the profile.
	Email string `json:"email"`

	// Role The role that this user would hold.
	Role string `json:"role"`
}

// UserInviteResponse UserInvite stores the invitation details.
type UserInviteResponse struct {
	// CreatedAt The timestamp this invitation was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The ID of the user who created this invitation.
	CreatedBy string `json:"created_by"`

	// Email The email address of the user from the profile.
	Email *string `json:"email,omitempty"`

	// ExpiresAt The timestamp this invitation would expire.
	ExpiresAt string `json:"expires_at"`

	// UserId The User ID for this user.
	UserId string `json:"user_id"`
}

// UserProfileExtendedRequest UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedRequest struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id *string `json:"id,omitempty"`

	// Name The name the user goes by
	Name       *string                 `json:"name,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
	Roles      *map[string]string      `json:"roles,omitempty"`

	// Type The type of the account. Could be user, service or system
	Type *string `json:"type,omitempty"`
}

// UserProfileExtendedResponse UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Name The name the user goes by
	Name       string                 `json:"name"`
	Properties map[string]interface{} `json:"properties"`
	Roles      map[string]string      `json:"roles"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`
}

// UserProfileResponse UserProfile holds the profile information of a user
type UserProfileResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Name The name the user goes by
	Name string `json:"name"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`
}

// UserRoleRequest UserRole holds the mapping of role to user for a particular object.
type UserRoleRequest struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id *string `json:"id,omitempty"`

	// Invite The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// Name The name the user goes by
	Name *string `json:"name,omitempty"`

	// Role The role that this user holds
	Role *string `json:"role,omitempty"`

	// Type The type of the account. Could be user, service or system
	Type *string `json:"type,omitempty"`

	// User The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// UserRoleResponse UserRole holds the mapping of role to user for a particular object.
type UserRoleResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Invite The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// Name The name the user goes by
	Name string `json:"name"`

	// Role The role that this user holds
	Role string `json:"role"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`

	// User The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// ValueCreatePayloadRequest defines model for ValueCreatePayloadRequest.
type ValueCreatePayloadRequest struct {
	Description *string `json:"description"`
	IsSecret    *bool   `json:"is_secret,omitempty"`
	Key         string  `json:"key"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValueEditPayloadRequest defines model for ValueEditPayloadRequest.
type ValueEditPayloadRequest struct {
	Description *string `json:"description"`
	IsSecret    *bool   `json:"is_secret,omitempty"`
	Key         *string `json:"key,omitempty"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValuePatchPayloadRequest defines model for ValuePatchPayloadRequest.
type ValuePatchPayloadRequest struct {
	Description *string `json:"description"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValueResponse Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
//
// Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
//
// For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
type ValueResponse struct {
	CreatedAt time.Time `json:"created_at"`

	// Description A Human friendly description of what the Shared Value is.
	Description string `json:"description"`

	// IsSecret Specified that the Shared Value contains a secret.
	IsSecret bool `json:"is_secret"`

	// Key The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.
	Key string `json:"key"`

	// SecretKey Location of the secret value in the secret store.
	SecretKey     *string `json:"secret_key"`
	SecretStoreId *string `json:"secret_store_id"`

	// SecretVersion Version of the current secret value as returned by the secret store.
	SecretVersion *string `json:"secret_version"`

	// Source Source of the value, "app" for app level, "env" for app env level.
	Source    ValueSource `json:"source"`
	UpdatedAt time.Time   `json:"updated_at"`

	// Value The value that will be stored. (Will be always empty for secrets.)
	Value string `json:"value"`
}

// ValueSetActionPayloadRequest defines model for ValueSetActionPayloadRequest.
type ValueSetActionPayloadRequest struct {
	Comment *string `json:"comment,omitempty"`
}

// ValueSetResponse defines model for ValueSetResponse.
type ValueSetResponse map[string]ValueResponse

// ValueSetVersionResponse A Value Set Version can be used as a track record of Shared Values changes, to restore a previous version of a Shared Value or Value Set, or to purge a Shared Value if it shouldn't be accessible anymore.
type ValueSetVersionResponse struct {
	Change                  JSONPatchesResponse      `json:"change"`
	Comment                 string                   `json:"comment"`
	CreatedAt               time.Time                `json:"created_at"`
	CreatedBy               string                   `json:"created_by"`
	Id                      string                   `json:"id"`
	ResultOf                *ValueSetVersionResultOf `json:"result_of"`
	SourceValueSetVersionId *string                  `json:"source_value_set_version_id"`
	UpdatedAt               time.Time                `json:"updated_at"`
	Values                  ValueSetResponse         `json:"values"`
}

// ValueSetVersionResultOf defines model for ValueSetVersionResultOf.
type ValueSetVersionResultOf string

// ValueSource Source of the value, "app" for app level, "env" for app env level.
type ValueSource string

// ValuesSecretsRefsRequest ValuesSecretsRefs stores data that should be passed around split by sensitivity.
type ValuesSecretsRefsRequest struct {
	// SecretRefs Secrets section of the data set. They can hold sensitive information that will be stored in the primary organization secret store and replaced with the secret store paths when sent outside, or secret references stored in a defined secret store. Can't be used together with `secrets`.
	//
	// They can hold a nested structure but leaf objects need to be of type SecretReference, where:
	//
	// - `store` is a Secret Store id. It can't be `humanitec`. It's mandatory if `ref` is defined and can't be used in request payloads if `value` is defined.
	//
	// - `ref` is the secret key in the format of the target store. It can't be used in request payloads if `value` is defined.
	//
	// - `version` is the version of the secret as defined in the target store. It can be defined only if `ref` is defined.
	//
	// - `value` is the value to store in the organizations primary secret store. It can't be used in request payloads if `ref` is defined.
	SecretRefs *map[string]interface{} `json:"secret_refs,omitempty"`

	// Secrets Secrets section of the data set. Sensitive information is stored in the primary organization secret store and replaced with the secret store paths when sent outside. Can't be used together with `secret_refs`.
	Secrets *map[string]interface{} `json:"secrets,omitempty"`

	// Values Values section of the data set. Passed around as-is.
	Values *map[string]interface{} `json:"values,omitempty"`
}

// ValuesSecretsRefsResponse ValuesSecretsRefs stores data that should be passed around split by sensitivity.
type ValuesSecretsRefsResponse struct {
	// SecretRefs Secrets section of the data set. They can hold sensitive information that will be stored in the primary organization secret store and replaced with the secret store paths when sent outside, or secret references stored in a defined secret store. Can't be used together with `secrets`.
	//
	// They can hold a nested structure but leaf objects need to be of type SecretReference, where:
	//
	// - `store` is a Secret Store id. It can't be `humanitec`. It's mandatory if `ref` is defined and can't be used in request payloads if `value` is defined.
	//
	// - `ref` is the secret key in the format of the target store. It can't be used in request payloads if `value` is defined.
	//
	// - `version` is the version of the secret as defined in the target store. It can be defined only if `ref` is defined.
	//
	// - `value` is the value to store in the organizations primary secret store. It can't be used in request payloads if `ref` is defined.
	SecretRefs *map[string]interface{} `json:"secret_refs,omitempty"`

	// Secrets Secrets section of the data set. Sensitive information is stored in the primary organization secret store and replaced with the secret store paths when sent outside. Can't be used together with `secret_refs`.
	Secrets *map[string]interface{} `json:"secrets,omitempty"`

	// Values Values section of the data set. Passed around as-is.
	Values *map[string]interface{} `json:"values,omitempty"`
}

// VaultAuthRequest Credentials to authenticate Vault.
type VaultAuthRequest struct {
	Role  *string `json:"role,omitempty"`
	Token *string `json:"token,omitempty"`
}

// VaultRequest Vault specification.
type VaultRequest struct {
	AgentId *string `json:"agent_id,omitempty"`

	// Auth Credentials to authenticate Vault.
	Auth *VaultAuthRequest `json:"auth,omitempty"`
	Path *string           `json:"path,omitempty"`
	Url  *string           `json:"url,omitempty"`
}

// VaultResponse Vault specification.
type VaultResponse struct {
	AgentId *string `json:"agent_id,omitempty"`
	Path    *string `json:"path,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// WebhookRequest Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookRequest struct {
	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  *JSONFieldRequest `json:"headers,omitempty"`

	// Id Job ID, unique within the Organization
	Id      *string           `json:"id,omitempty"`
	Payload *JSONFieldRequest `json:"payload,omitempty"`

	// Triggers A list of Events by which the Job is triggered
	Triggers *[]EventBaseRequest `json:"triggers,omitempty"`

	// Url The webhook's URL (without protocol, only HTTPS is supported).
	Url *string `json:"url"`
}

// WebhookResponse Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookResponse struct {
	// CreatedAt The timestamp of when this Job was created.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user who created this Job
	CreatedBy *string `json:"created_by,omitempty"`

	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  JSONFieldResponse `json:"headers"`

	// Id Job ID, unique within the Organization
	Id      string            `json:"id"`
	Payload JSONFieldResponse `json:"payload"`

	// Triggers A list of Events by which the Job is triggered
	Triggers []EventBaseResponse `json:"triggers"`

	// Url The webhook's URL (without protocol, only HTTPS is supported).
	Url *string `json:"url"`
}

// WebhookUpdateResponse Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookUpdateResponse struct {
	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  JSONFieldResponse `json:"headers"`
	Payload  JSONFieldResponse `json:"payload"`

	// Triggers A list of Events by which the Job is triggered
	Triggers *[]EventBaseResponse `json:"triggers"`

	// Url The webhook's URL (without protocol, only HTTPS is supported)
	Url *string `json:"url"`
}

// WorkloadProfileChartReference References a workload profile chart.
type WorkloadProfileChartReference struct {
	// Id Workload Profile Chart ID
	Id string `json:"id"`

	// Version Version
	Version string `json:"version"`
}

// WorkloadProfileChartVersionResponse Each Workload Profile Chart has one or more Versions associated with it.
type WorkloadProfileChartVersionResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// Id Workload Profile Chart Version ID
	Id string `json:"id"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// Version Version
	Version string `json:"version"`
}

// WorkloadProfilePatchRequest The proposed properties to update a workload profile.
type WorkloadProfilePatchRequest struct {
	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description *string `json:"description,omitempty"`
}

// WorkloadProfileRequest Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileRequest struct {
	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description *string `json:"description,omitempty"`

	// Id Workload Profile ID
	Id string `json:"id"`
}

// WorkloadProfileResponse Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description string `json:"description"`

	// Id Workload Profile ID
	Id string `json:"id"`

	// Latest The latest version of the profile
	Latest *string `json:"latest,omitempty"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// UpdatedAt Timestamp when the entity was last updated.
	UpdatedAt time.Time `json:"updated_at"`

	// UpdatedBy User who last updated the entity.
	UpdatedBy string `json:"updated_by"`
}

// WorkloadProfileVersionRequest Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.
type WorkloadProfileVersionRequest struct {
	// Features A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
	//
	// {
	//
	// }
	Features *map[string]interface{} `json:"features,omitempty"`

	// Notes Notes
	Notes          *string                               `json:"notes,omitempty"`
	SpecDefinition *WorkloadProfileVersionSpecDefinition `json:"spec_definition,omitempty"`

	// Version Version
	Version string `json:"version"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`
}

// WorkloadProfileVersionResponse Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.
type WorkloadProfileVersionResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// Features A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
	//
	// {
	//
	// }
	Features map[string]interface{} `json:"features"`

	// Notes Notes
	Notes string `json:"notes"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// ProfileId Workload Profile ID
	ProfileId      string                                `json:"profile_id"`
	SpecDefinition *WorkloadProfileVersionSpecDefinition `json:"spec_definition,omitempty"`

	// SpecSchema OpenAPI schema used to validate the spec.
	SpecSchema interface{} `json:"spec_schema"`

	// Version Version
	Version string `json:"version"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`
}

// WorkloadProfileVersionSpecDefinition defines model for WorkloadProfileVersionSpecDefinition.
type WorkloadProfileVersionSpecDefinition struct {
	// Properties Workload spec definition
	Properties        *WorkloadProfileVersionSpecDefinitionProperties        `json:"properties,omitempty"`
	RuntimeProperties *[]WorkloadProfileVersionSpecDefinitionRuntimeProperty `json:"runtime_properties,omitempty"`
}

// WorkloadProfileVersionSpecDefinitionProperties Workload spec definition
type WorkloadProfileVersionSpecDefinitionProperties map[string]WorkloadProfileVersionSpecDefinitionProperty

// WorkloadProfileVersionSpecDefinitionProperty defines model for WorkloadProfileVersionSpecDefinitionProperty.
type WorkloadProfileVersionSpecDefinitionProperty struct {
	FeatureName *string `json:"feature_name,omitempty"`

	// Properties Workload spec definition
	Properties        *WorkloadProfileVersionSpecDefinitionProperties        `json:"properties,omitempty"`
	RuntimeProperties *[]WorkloadProfileVersionSpecDefinitionRuntimeProperty `json:"runtime_properties,omitempty"`
	Schema            *map[string]interface{}                                `json:"schema,omitempty"`
	Title             *string                                                `json:"title,omitempty"`
	Type              WorkloadProfileVersionSpecDefinitionPropertyType       `json:"type"`
	UiHints           *WorkloadProfileVersionSpecDefinitionPropertyUIHints   `json:"ui_hints,omitempty"`
	Version           *string                                                `json:"version,omitempty"`
}

// WorkloadProfileVersionSpecDefinitionPropertyType defines model for WorkloadProfileVersionSpecDefinitionPropertyType.
type WorkloadProfileVersionSpecDefinitionPropertyType string

// WorkloadProfileVersionSpecDefinitionPropertyUIHints defines model for WorkloadProfileVersionSpecDefinitionPropertyUIHints.
type WorkloadProfileVersionSpecDefinitionPropertyUIHints struct {
	Hidden *bool `json:"hidden,omitempty"`
	Order  *int  `json:"order,omitempty"`
}

// WorkloadProfileVersionSpecDefinitionRuntimeProperty defines model for WorkloadProfileVersionSpecDefinitionRuntimeProperty.
type WorkloadProfileVersionSpecDefinitionRuntimeProperty struct {
	FeatureName *string                                                 `json:"feature_name,omitempty"`
	Title       *string                                                 `json:"title,omitempty"`
	Type        WorkloadProfileVersionSpecDefinitionRuntimePropertyType `json:"type"`
	UiHints     *WorkloadProfileVersionSpecDefinitionPropertyUIHints    `json:"ui_hints,omitempty"`
	Version     *string                                                 `json:"version,omitempty"`
}

// WorkloadProfileVersionSpecDefinitionRuntimePropertyType defines model for WorkloadProfileVersionSpecDefinitionRuntimePropertyType.
type WorkloadProfileVersionSpecDefinitionRuntimePropertyType string

// AppIdPathParam defines model for appIdPathParam.
type AppIdPathParam = string

// ApprovalIdPathParam defines model for approvalIdPathParam.
type ApprovalIdPathParam = string

// ByAppIdQueryParam defines model for byAppIdQueryParam.
type ByAppIdQueryParam = []string

// ByApprovalStatusQueryParam defines model for byApprovalStatusQueryParam.
type ByApprovalStatusQueryParam = string

// ByCompletedQueryParam defines model for byCompletedQueryParam.
type ByCompletedQueryParam = bool

// ByCreatedAfterParam defines model for byCreatedAfterParam.
type ByCreatedAfterParam = time.Time

// ByCreatedBeforeParam defines model for byCreatedBeforeParam.
type ByCreatedBeforeParam = time.Time

// ByMetadata defines model for byMetadata.
type ByMetadata map[string]string

// ByPipelineIdQueryParam defines model for byPipelineIdQueryParam.
type ByPipelineIdQueryParam = []string

// ByRunIdQueryParam defines model for byRunIdQueryParam.
type ByRunIdQueryParam = []string

// ByStatusQueryParam defines model for byStatusQueryParam.
type ByStatusQueryParam = []string

// ByTriggerTypeQueryParam defines model for byTriggerTypeQueryParam.
type ByTriggerTypeQueryParam = string

// ByVersionQueryParam defines model for byVersionQueryParam.
type ByVersionQueryParam = string

// DeprecatedQueryParam defines model for deprecatedQueryParam.
type DeprecatedQueryParam = bool

// IdempotencyKey defines model for idempotencyKey.
type IdempotencyKey = string

// IfMatchHeaderParam defines model for ifMatchHeaderParam.
type IfMatchHeaderParam = string

// JobIdPathParam defines model for jobIdPathParam.
type JobIdPathParam = string

// OrgIdPathParam defines model for orgIdPathParam.
type OrgIdPathParam = string

// PageTokenQueryParam defines model for pageTokenQueryParam.
type PageTokenQueryParam = string

// PerPageQueryParam defines model for perPageQueryParam.
type PerPageQueryParam = int

// PipelineIdPathParam defines model for pipelineIdPathParam.
type PipelineIdPathParam = string

// ProfileQidPathParam defines model for profileQidPathParam.
type ProfileQidPathParam = string

// RunIdPathParam defines model for runIdPathParam.
type RunIdPathParam = string

// StepIndexPathParam defines model for stepIndexPathParam.
type StepIndexPathParam = int

// VersionPathParam defines model for versionPathParam.
type VersionPathParam = string

// N400BadRequest HumanitecError represents a standard Humanitec Error
type N400BadRequest = HumanitecErrorResponse

// N403Forbidden A standard error response
type N403Forbidden = ErrorResponse

// N404NotFound HumanitecError represents a standard Humanitec Error
type N404NotFound = HumanitecErrorResponse

// N409Conflict HumanitecError represents a standard Humanitec Error
type N409Conflict = HumanitecErrorResponse

// N412PreconditionFailed A standard error response
type N412PreconditionFailed = ErrorResponse

// N422UnprocessableContent A standard error response
type N422UnprocessableContent = ErrorResponse

// ListPipelineApprovalRequestsParams defines parameters for ListPipelineApprovalRequests.
type ListPipelineApprovalRequestsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Pipeline An optional list of Pipeline IDs.
	Pipeline *ByPipelineIdQueryParam `form:"pipeline,omitempty" json:"pipeline,omitempty"`

	// Run An optional Pipeline Run ID.
	Run *ByRunIdQueryParam `form:"run,omitempty" json:"run,omitempty"`

	// Status Optional filter by status.
	Status *ByApprovalStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`
}

// GetOrgsOrgIdAppsAppIdDeltasParams defines parameters for GetOrgsOrgIdAppsAppIdDeltas.
type GetOrgsOrgIdAppsAppIdDeltasParams struct {
	// Archived If true, return archived Deltas.
	//
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Env Only return Deltas associated with the specified Environment.
	//
	Env *string `form:"env,omitempty" json:"env,omitempty"`
}

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody defines parameters for PatchOrgsOrgIdAppsAppIdDeltasDeltaId.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody = []DeltaRequest

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody = bool

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONBody = string

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody = string

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody = string

// PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONBody = []ResourceProvisionRequestRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody = bool

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody defines parameters for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody map[string]int

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams struct {
	// KeyChanged (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `form:"key_changed,omitempty" json:"key_changed,omitempty"`
}

// ListPipelinesParams defines parameters for ListPipelines.
type ListPipelinesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Trigger An optional filter by trigger type.
	Trigger *ByTriggerTypeQueryParam `form:"trigger,omitempty" json:"trigger,omitempty"`

	// Metadata Optional filter by pipeline metadata
	Metadata *ByMetadata `json:"metadata,omitempty"`
}

// DeletePipelineParams defines parameters for DeletePipeline.
type DeletePipelineParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// GetPipelineParams defines parameters for GetPipeline.
type GetPipelineParams struct {
	// Version An optional Pipeline Version ID.
	Version *ByVersionQueryParam `form:"version,omitempty" json:"version,omitempty"`
}

// UpdatePipelineParams defines parameters for UpdatePipeline.
type UpdatePipelineParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// ListPipelineRunsParams defines parameters for ListPipelineRuns.
type ListPipelineRunsParams struct {
	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// Completed Optional filer by completed or not.
	Completed *ByCompletedQueryParam `form:"completed,omitempty" json:"completed,omitempty"`

	// CreatedAfter Optional filter by creation after date time.
	CreatedAfter *ByCreatedAfterParam `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Optional filter by creation before date time
	CreatedBefore *ByCreatedBeforeParam `form:"created_before,omitempty" json:"created_before,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreatePipelineRunParams defines parameters for CreatePipelineRun.
type CreatePipelineRunParams struct {
	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// DeletePipelineRunParams defines parameters for DeletePipelineRun.
type DeletePipelineRunParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// CancelPipelineRunParams defines parameters for CancelPipelineRun.
type CancelPipelineRunParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// ListPipelineJobsParams defines parameters for ListPipelineJobs.
type ListPipelineJobsParams struct {
	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListPipelineStepLogsParams defines parameters for ListPipelineStepLogs.
type ListPipelineStepLogsParams struct {
	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// RestartPipelineRunParams defines parameters for RestartPipelineRun.
type RestartPipelineRunParams struct {
	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// GetPipelineDefinitionParams defines parameters for GetPipelineDefinition.
type GetPipelineDefinitionParams struct {
	// Version An optional Pipeline Version ID.
	Version *ByVersionQueryParam `form:"version,omitempty" json:"version,omitempty"`
	Accept  *string              `json:"Accept,omitempty"`
}

// ListPipelineVersionsParams defines parameters for ListPipelineVersions.
type ListPipelineVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// GetOrgsOrgIdAppsAppIdRuntimeParams defines parameters for GetOrgsOrgIdAppsAppIdRuntime.
type GetOrgsOrgIdAppsAppIdRuntimeParams struct {
	// Id Filter environments by ID (required). Up to 5 ids can be supplied per request.
	//
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// GetOrgsOrgIdAppsAppIdSetsSetIdParams defines parameters for GetOrgsOrgIdAppsAppIdSetsSetId.
type GetOrgsOrgIdAppsAppIdSetsSetIdParams struct {
	// Diff ID of the Deployment Set to compared against.
	Diff *string `form:"diff,omitempty" json:"diff,omitempty"`
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdValueSetVersionsParams struct {
	// KeyChanged (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `form:"key_changed,omitempty" json:"key_changed,omitempty"`
}

// ListArtefactVersionsInOrgParams defines parameters for ListArtefactVersionsInOrg.
type ListArtefactVersionsInOrgParams struct {
	// Name (Optional) Filter Artefact Versions by name.
	//
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Reference (Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.
	//
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`

	// Archived (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
	//
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateArtefactVersionParams defines parameters for CreateArtefactVersion.
type CreateArtefactVersionParams struct {
	// Vcs (Optional) Which version control system the version comes from. Default value is "git". If this parameter is not supplied or its value is "git", the provided ref, if not empty, is checked to ensure that it has the prefix "refs/".
	//
	Vcs *string `form:"vcs,omitempty" json:"vcs,omitempty"`
}

// ListArtefactsParams defines parameters for ListArtefacts.
type ListArtefactsParams struct {
	// Type (Optional) Filter Artefacts by type.
	//
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Name (Optional) Filter Artefacts by name.
	//
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ListArtefactVersionsParams defines parameters for ListArtefactVersions.
type ListArtefactVersionsParams struct {
	// Archived (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
	//
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Reference (Optional) Filter Artefact Versions by by name including a version or digest.
	//
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`

	// Limit (Optional) Limit the number of versions returned by the endpoint.
	//
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListHumanitecPublicKeysParams defines parameters for ListHumanitecPublicKeys.
type ListHumanitecPublicKeysParams struct {
	// Active If set to true, the response includes only the active key, if set to false only non-active keys, otherwise both active and non-active keys.
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// ListPublicKeysParams defines parameters for ListPublicKeys.
type ListPublicKeysParams struct {
	// Fingerprint The fingerprint of the requested key. If a value is provided, the result will contain a single key, if any.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty"`
}

// CreatePublicKeyJSONBody defines parameters for CreatePublicKey.
type CreatePublicKeyJSONBody = string

// ListPipelineRunsByOrgParams defines parameters for ListPipelineRunsByOrg.
type ListPipelineRunsByOrgParams struct {
	// App An optional list of Application IDs.
	App *ByAppIdQueryParam `form:"app,omitempty" json:"app,omitempty"`

	// Pipeline An optional list of Pipeline IDs.
	Pipeline *ByPipelineIdQueryParam `form:"pipeline,omitempty" json:"pipeline,omitempty"`

	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// Completed Optional filer by completed or not.
	Completed *ByCompletedQueryParam `form:"completed,omitempty" json:"completed,omitempty"`

	// CreatedAfter Optional filter by creation after date time.
	CreatedAfter *ByCreatedAfterParam `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Optional filter by creation before date time
	CreatedBefore *ByCreatedBeforeParam `form:"created_before,omitempty" json:"created_before,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListPipelinesInOrgParams defines parameters for ListPipelinesInOrg.
type ListPipelinesInOrgParams struct {
	// App An optional list of Application IDs.
	App *ByAppIdQueryParam `form:"app,omitempty" json:"app,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Trigger An optional filter by trigger type.
	Trigger *ByTriggerTypeQueryParam `form:"trigger,omitempty" json:"trigger,omitempty"`

	// Metadata Optional filter by pipeline metadata
	Metadata *ByMetadata `json:"metadata,omitempty"`
}

// GetOrgsOrgIdResourcesDefsParams defines parameters for GetOrgsOrgIdResourcesDefs.
type GetOrgsOrgIdResourcesDefsParams struct {
	// App (Optional) Filter Resource Definitions that may match a specific Application.
	//
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Env (Optional) Filter Resource Definitions that may match a specific Environment.
	//
	Env *string `form:"env,omitempty" json:"env,omitempty"`

	// EnvType (Optional) Filter Resource Definitions that may match a specific Environment Type.
	//
	EnvType *string `form:"env_type,omitempty" json:"env_type,omitempty"`

	// Res (Optional) Filter Resource Definitions that may match a specific Resource.
	//
	Res *string `form:"res,omitempty" json:"res,omitempty"`

	// ResType (Optional) Filter Resource Definitions that may match a specific Resource Type.
	//
	ResType *string `form:"res_type,omitempty" json:"res_type,omitempty"`

	// Class (Optional) Filter Resource Definitions that may match a specific Class.
	//
	Class *string `form:"class,omitempty" json:"class,omitempty"`
}

// DeleteOrgsOrgIdResourcesDefsDefIdParams defines parameters for DeleteOrgsOrgIdResourcesDefsDefId.
type DeleteOrgsOrgIdResourcesDefsDefIdParams struct {
	// Force If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
	//
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams defines parameters for DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId.
type DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams struct {
	// Force If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
	//
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// ListWorkloadProfileChartVersionsParams defines parameters for ListWorkloadProfileChartVersions.
type ListWorkloadProfileChartVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreateWorkloadProfileChartVersionMultipartBody defines parameters for CreateWorkloadProfileChartVersion.
type CreateWorkloadProfileChartVersionMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// ListWorkloadProfilesParams defines parameters for ListWorkloadProfiles.
type ListWorkloadProfilesParams struct {
	// Deprecated Whether to include deprecated profiles
	Deprecated *DeprecatedQueryParam `form:"deprecated,omitempty" json:"deprecated,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListWorkloadProfileVersionsParams defines parameters for ListWorkloadProfileVersions.
type ListWorkloadProfileVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// PatchCurrentUserJSONRequestBody defines body for PatchCurrentUser for application/json ContentType.
type PatchCurrentUserJSONRequestBody = UserProfileExtendedRequest

// PostOrgsOrgIdAppsJSONRequestBody defines body for PostOrgsOrgIdApps for application/json ContentType.
type PostOrgsOrgIdAppsJSONRequestBody = ApplicationCreationRequest

// PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdDeltas for application/json ContentType.
type PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody = DeltaRequest

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdDeltasDeltaId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody = PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody

// PutDeltaJSONRequestBody defines body for PutDelta for application/json ContentType.
type PutDeltaJSONRequestBody = DeltaRequest

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody = PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody = PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody = PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody

// PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvs for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody = EnvironmentDefinitionRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody = DeploymentRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody = PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody = PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody = AutomationRuleRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody = AutomationRuleRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody = PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody = ValueCreatePayloadRequest

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody = ValuePatchPayloadRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody = ValueEditPayloadRequest

// CreatePipelineRunJSONRequestBody defines body for CreatePipelineRun for application/json ContentType.
type CreatePipelineRunJSONRequestBody = PipelineRunCreateBody

// PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdSetsSetId for application/json ContentType.
type PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody = DeltaRequest

// PostOrgsOrgIdAppsAppIdUsersJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdUsers for application/json ContentType.
type PostOrgsOrgIdAppsAppIdUsersJSONRequestBody = UserRoleRequest

// PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdUsersUserId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody = RoleRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValuesJSONRequestBody = ValueCreatePayloadRequest

// PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdValuesKey for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody = ValuePatchPayloadRequest

// PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody = ValueEditPayloadRequest

// PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdWebhooks for application/json ContentType.
type PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody = WebhookRequest

// PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdWebhooksJobId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody = WebhookRequest

// CreateArtefactVersionJSONRequestBody defines body for CreateArtefactVersion for application/json ContentType.
type CreateArtefactVersionJSONRequestBody = AddArtefactVersionPayloadRequest

// PatchArtefactVersionJSONRequestBody defines body for PatchArtefactVersion for application/json ContentType.
type PatchArtefactVersionJSONRequestBody = UpdateArtefactVersionPayloadRequest

// PostOrgsOrgIdEnvTypesJSONRequestBody defines body for PostOrgsOrgIdEnvTypes for application/json ContentType.
type PostOrgsOrgIdEnvTypesJSONRequestBody = EnvironmentTypeRequest

// PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody defines body for PostOrgsOrgIdEnvTypesEnvTypeUsers for application/json ContentType.
type PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody = UserRoleRequest

// PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody defines body for PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId for application/json ContentType.
type PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody = RoleRequest

// CreateDeprecatedImageBuildJSONRequestBody defines body for CreateDeprecatedImageBuild for application/json ContentType.
type CreateDeprecatedImageBuildJSONRequestBody = ImageBuildRequest

// PostOrgsOrgIdInvitationsJSONRequestBody defines body for PostOrgsOrgIdInvitations for application/json ContentType.
type PostOrgsOrgIdInvitationsJSONRequestBody = UserInviteRequestRequest

// CreatePublicKeyJSONRequestBody defines body for CreatePublicKey for application/json ContentType.
type CreatePublicKeyJSONRequestBody = CreatePublicKeyJSONBody

// PostOrgsOrgIdRegistriesJSONRequestBody defines body for PostOrgsOrgIdRegistries for application/json ContentType.
type PostOrgsOrgIdRegistriesJSONRequestBody = RegistryRequest

// PatchOrgsOrgIdRegistriesRegIdJSONRequestBody defines body for PatchOrgsOrgIdRegistriesRegId for application/json ContentType.
type PatchOrgsOrgIdRegistriesRegIdJSONRequestBody = RegistryRequest

// PostOrgsOrgIdResourcesAccountsJSONRequestBody defines body for PostOrgsOrgIdResourcesAccounts for application/json ContentType.
type PostOrgsOrgIdResourcesAccountsJSONRequestBody = CreateResourceAccountRequestRequest

// PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody defines body for PatchOrgsOrgIdResourcesAccountsAccId for application/json ContentType.
type PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody = UpdateResourceAccountRequestRequest

// PostOrgsOrgIdResourcesDefsJSONRequestBody defines body for PostOrgsOrgIdResourcesDefs for application/json ContentType.
type PostOrgsOrgIdResourcesDefsJSONRequestBody = CreateResourceDefinitionRequestRequest

// PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody defines body for PatchOrgsOrgIdResourcesDefsDefId for application/json ContentType.
type PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody = PatchResourceDefinitionRequestRequest

// PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody defines body for PutOrgsOrgIdResourcesDefsDefId for application/json ContentType.
type PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody = UpdateResourceDefinitionRequestRequest

// PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody defines body for PostOrgsOrgIdResourcesDefsDefIdCriteria for application/json ContentType.
type PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody = MatchingCriteriaRuleRequest

// PostOrgsOrgIdResourcesDriversJSONRequestBody defines body for PostOrgsOrgIdResourcesDrivers for application/json ContentType.
type PostOrgsOrgIdResourcesDriversJSONRequestBody = CreateDriverRequestRequest

// PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody defines body for PutOrgsOrgIdResourcesDriversDriverId for application/json ContentType.
type PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody = UpdateDriverRequestRequest

// PostOrgsOrgIdSecretstoresJSONRequestBody defines body for PostOrgsOrgIdSecretstores for application/json ContentType.
type PostOrgsOrgIdSecretstoresJSONRequestBody = CreateSecretStorePayloadRequest

// PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody defines body for PatchOrgsOrgIdSecretstoresStoreId for application/json ContentType.
type PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody = UpdateSecretStorePayloadRequest

// PostOrgsOrgIdUsersJSONRequestBody defines body for PostOrgsOrgIdUsers for application/json ContentType.
type PostOrgsOrgIdUsersJSONRequestBody = NewServiceUserRequest

// PatchOrgsOrgIdUsersUserIdJSONRequestBody defines body for PatchOrgsOrgIdUsersUserId for application/json ContentType.
type PatchOrgsOrgIdUsersUserIdJSONRequestBody = RoleRequest

// CreateWorkloadProfileChartVersionMultipartRequestBody defines body for CreateWorkloadProfileChartVersion for multipart/form-data ContentType.
type CreateWorkloadProfileChartVersionMultipartRequestBody CreateWorkloadProfileChartVersionMultipartBody

// CreateWorkloadProfileJSONRequestBody defines body for CreateWorkloadProfile for application/json ContentType.
type CreateWorkloadProfileJSONRequestBody = WorkloadProfileRequest

// PatchWorkloadProfileJSONRequestBody defines body for PatchWorkloadProfile for application/json ContentType.
type PatchWorkloadProfileJSONRequestBody = WorkloadProfilePatchRequest

// CreateWorkloadProfileVersionJSONRequestBody defines body for CreateWorkloadProfileVersion for application/json ContentType.
type CreateWorkloadProfileVersionJSONRequestBody = WorkloadProfileVersionRequest

// PostUsersUserIdTokensJSONRequestBody defines body for PostUsersUserIdTokens for application/json ContentType.
type PostUsersUserIdTokensJSONRequestBody = TokenDefinitionRequest

// Getter for additional properties for ModuleRequest. Returns the specified
// element and whether it was found
func (a ModuleRequest) Get(fieldName string) (value ControllerRequest, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleRequest
func (a *ModuleRequest) Set(fieldName string, value ControllerRequest) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ControllerRequest)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleRequest to handle AdditionalProperties
func (a *ModuleRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deploy"]; found {
		err = json.Unmarshal(raw, &a.Deploy)
		if err != nil {
			return fmt.Errorf("error reading 'deploy': %w", err)
		}
		delete(object, "deploy")
	}

	if raw, found := object["externals"]; found {
		err = json.Unmarshal(raw, &a.Externals)
		if err != nil {
			return fmt.Errorf("error reading 'externals': %w", err)
		}
		delete(object, "externals")
	}

	if raw, found := object["profile"]; found {
		err = json.Unmarshal(raw, &a.Profile)
		if err != nil {
			return fmt.Errorf("error reading 'profile': %w", err)
		}
		delete(object, "profile")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ControllerRequest)
		for fieldName, fieldBuf := range object {
			var fieldVal ControllerRequest
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleRequest to handle AdditionalProperties
func (a ModuleRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Deploy != nil {
		object["deploy"], err = json.Marshal(a.Deploy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deploy': %w", err)
		}
	}

	if a.Externals != nil {
		object["externals"], err = json.Marshal(a.Externals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externals': %w", err)
		}
	}

	if a.Profile != nil {
		object["profile"], err = json.Marshal(a.Profile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'profile': %w", err)
		}
	}

	if a.Spec != nil {
		object["spec"], err = json.Marshal(a.Spec)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spec': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleResponse. Returns the specified
// element and whether it was found
func (a ModuleResponse) Get(fieldName string) (value ControllerResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleResponse
func (a *ModuleResponse) Set(fieldName string, value ControllerResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ControllerResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a *ModuleResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deploy"]; found {
		err = json.Unmarshal(raw, &a.Deploy)
		if err != nil {
			return fmt.Errorf("error reading 'deploy': %w", err)
		}
		delete(object, "deploy")
	}

	if raw, found := object["externals"]; found {
		err = json.Unmarshal(raw, &a.Externals)
		if err != nil {
			return fmt.Errorf("error reading 'externals': %w", err)
		}
		delete(object, "externals")
	}

	if raw, found := object["profile"]; found {
		err = json.Unmarshal(raw, &a.Profile)
		if err != nil {
			return fmt.Errorf("error reading 'profile': %w", err)
		}
		delete(object, "profile")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ControllerResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ControllerResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a ModuleResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Deploy != nil {
		object["deploy"], err = json.Marshal(a.Deploy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deploy': %w", err)
		}
	}

	object["externals"], err = json.Marshal(a.Externals)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externals': %w", err)
	}

	object["profile"], err = json.Marshal(a.Profile)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'profile': %w", err)
	}

	object["spec"], err = json.Marshal(a.Spec)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'spec': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCurrentUser request with any body
	PatchCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCurrentUser(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgs request
	GetOrgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgId request
	GetOrgsOrgId(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdApps request
	GetOrgsOrgIdApps(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdApps request with any body
	PostOrgsOrgIdAppsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdApps(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppId request
	DeleteOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppId request
	GetOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineApprovalRequests request
	ListPipelineApprovalRequests(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdDeltas request
	GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdDeltas request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDelta request
	GetDelta(ctx context.Context, orgId string, appId string, deltaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaId request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDelta request with any body
	PutDeltaWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDelta(ctx context.Context, orgId string, appId string, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvs request
	GetOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvs request with any body
	PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvId request
	GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeployments request
	ListDeployments(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployment request
	GetDeployment(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploymentErrors request
	ListDeploymentErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdResources request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRules request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRules request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValues request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdJobs request
	DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelines request
	ListPipelines(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipeline request with any body
	CreatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline request
	DeletePipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipeline request
	GetPipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipeline request with any body
	UpdatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineRuns request
	ListPipelineRuns(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineRun request with any body
	CreatePipelineRunWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineRun request
	DeletePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineRun request
	GetPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPipelineRun request
	CancelPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineJobs request
	ListPipelineJobs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineJob request
	GetPipelineJob(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineApprovalRequest request
	GetPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApprovePipelineApprovalRequest request
	ApprovePipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DenyPipelineApprovalRequest request
	DenyPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineStepLogs request
	ListPipelineStepLogs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartPipelineRun request
	RestartPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineDefinition request
	GetPipelineDefinition(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineVersions request
	ListPipelineVersions(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdRuntime request
	GetOrgsOrgIdAppsAppIdRuntime(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSets request
	GetSets(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetId request
	GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdSetsSetId request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdUsers request
	GetOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdUsers request with any body
	PostOrgsOrgIdAppsAppIdUsersWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdUsersUserId request
	DeleteOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdUsersUserId request
	GetOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdUsersUserId request with any body
	PatchOrgsOrgIdAppsAppIdUsersUserIdWithBody(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, body PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValues request
	DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValues request
	GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValues request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdValuesKey request with any body
	PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooks request
	GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdWebhooks request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobId request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobId request
	GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdWebhooksJobId request with any body
	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefactVersionsInOrg request
	ListArtefactVersionsInOrg(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArtefactVersion request with any body
	CreateArtefactVersionWithBody(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArtefactVersion(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtefactVersion request
	GetArtefactVersion(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefacts request
	ListArtefacts(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtefact request
	DeleteArtefact(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefactVersions request
	ListArtefactVersions(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtefactVersion request with any body
	PatchArtefactVersionWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtefactVersion(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypes request
	GetOrgsOrgIdEnvTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdEnvTypes request with any body
	PostOrgsOrgIdEnvTypesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdEnvTypes(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeId request
	DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypesEnvTypeId request
	GetOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdEnvTypesEnvTypeUsers request with any body
	PostOrgsOrgIdEnvTypesEnvTypeUsersWithBody(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdEnvTypesEnvTypeUsers(ctx context.Context, orgId string, envType string, body PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId request
	DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypesEnvTypeUsersUserId request
	GetOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId request with any body
	PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBody(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, body PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEvents request
	GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHumanitecPublicKeys request
	ListHumanitecPublicKeys(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeprecatedImages request
	ListDeprecatedImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeprecatedImage request
	GetDeprecatedImage(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeprecatedImageBuilds request
	ListDeprecatedImageBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeprecatedImageBuild request with any body
	CreateDeprecatedImageBuildWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeprecatedImageBuild(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdInvitations request
	GetOrgsOrgIdInvitations(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdInvitations request with any body
	PostOrgsOrgIdInvitationsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdInvitations(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPublicKeys request
	ListPublicKeys(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePublicKey request with any body
	CreatePublicKeyWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePublicKey(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicKey request
	DeletePublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicKey request
	GetPublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineRunsByOrg request
	ListPipelineRunsByOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestPipelineDefinitionSchema request
	GetLatestPipelineDefinitionSchema(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelinesInOrg request
	ListPipelinesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdRegistries request with any body
	PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdRegistriesRegId request
	DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegId request
	GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdRegistriesRegId request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegIdCreds request
	GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccountTypes request
	GetOrgsOrgIdResourcesAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccounts request
	GetOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesAccounts request with any body
	PostOrgsOrgIdResourcesAccountsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesAccountsAccId request
	DeleteOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccountsAccId request
	GetOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdResourcesAccountsAccId request with any body
	PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefs request
	GetOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDefs request with any body
	PostOrgsOrgIdResourcesDefsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDefsDefId request
	DeleteOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefsDefId request
	GetOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdResourcesDefsDefId request with any body
	PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdResourcesDefsDefId request with any body
	PutOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDefsDefIdCriteria request with any body
	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId request
	DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefsDefIdResources request
	GetOrgsOrgIdResourcesDefsDefIdResources(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDrivers request
	GetOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDrivers request with any body
	PostOrgsOrgIdResourcesDriversWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDriversDriverId request
	DeleteOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDriversDriverId request
	GetOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdResourcesDriversDriverId request with any body
	PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesTypes request
	GetOrgsOrgIdResourcesTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecretstores request
	GetOrgsOrgIdSecretstores(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdSecretstores request with any body
	PostOrgsOrgIdSecretstoresWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdSecretstores(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdSecretstoresStoreId request
	DeleteOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecretstoresStoreId request
	GetOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdSecretstoresStoreId request with any body
	PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdUsers request
	GetOrgsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdUsers request with any body
	PostOrgsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdUsers(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdUsersUserId request
	DeleteOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdUsersUserId request
	GetOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdUsersUserId request with any body
	PatchOrgsOrgIdUsersUserIdWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, body PatchOrgsOrgIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfileChartVersions request
	ListWorkloadProfileChartVersions(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkloadProfileChartVersion request with any body
	CreateWorkloadProfileChartVersionWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfiles request
	ListWorkloadProfiles(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkloadProfile request with any body
	CreateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkloadProfile request
	DeleteWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadProfile request
	GetWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchWorkloadProfile request with any body
	PatchWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body PatchWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfileVersions request
	ListWorkloadProfileVersions(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkloadProfileVersion request with any body
	CreateWorkloadProfileVersionWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body CreateWorkloadProfileVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestWorkloadProfileVersion request
	GetLatestWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkloadProfileVersion request
	DeleteWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTokensTokenId request
	DeleteTokensTokenId(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserIdTokens request
	GetUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUserIdTokens request with any body
	PostUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersUserIdTokens(ctx context.Context, userId string, body PostUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserIdTokensTokenId request
	DeleteUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserIdTokensTokenId request
	GetUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrentUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrentUser(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrentUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgId(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdApps(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdApps(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineApprovalRequests(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineApprovalRequestsRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDelta(ctx context.Context, orgId string, appId string, deltaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaRequest(c.Server, orgId, appId, deltaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeltaWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeltaRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDelta(ctx context.Context, orgId string, appId string, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeltaRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeployments(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentsRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployment(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploymentErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentErrorsRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest(c.Server, orgId, appId, envId, pType, resId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(c.Server, orgId, appId, envId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(c.Server, orgId, appId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, envId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, envId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(c.Server, orgId, appId, envId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(c.Server, orgId, appId, envId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdJobsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelines(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelinesRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequestWithBody(c.Server, orgId, appId, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineRuns(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineRunsRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRunWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunRequestWithBody(c.Server, orgId, appId, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunRequest(c.Server, orgId, appId, pipelineId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineJobs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineJobsRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineJob(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineJobRequest(c.Server, orgId, appId, pipelineId, runId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApprovePipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApprovePipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DenyPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDenyPipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineStepLogs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineStepLogsRequest(c.Server, orgId, appId, pipelineId, runId, jobId, stepIndex, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineDefinition(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineDefinitionRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineVersions(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineVersionsRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdRuntime(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdRuntimeRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSets(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSetsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(c.Server, orgId, appId, setId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(c.Server, orgId, appId, setId, sourceSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdUsersRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdUsersWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdUsersRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdUsersUserIdRequest(c.Server, orgId, appId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest(c.Server, orgId, appId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdUsersUserIdWithBody(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequestWithBody(c.Server, orgId, appId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, body PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequest(c.Server, orgId, appId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(c.Server, orgId, appId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(c.Server, orgId, appId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(c.Server, orgId, appId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefactVersionsInOrg(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactVersionsInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtefactVersionWithBody(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtefactVersionRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtefactVersion(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtefactVersionRequest(c.Server, orgId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtefactVersion(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtefactVersionRequest(c.Server, orgId, artefactVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefacts(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtefact(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtefactRequest(c.Server, orgId, artefactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefactVersions(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactVersionsRequest(c.Server, orgId, artefactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtefactVersionWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtefactVersionRequestWithBody(c.Server, orgId, artefactId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtefactVersion(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtefactVersionRequest(c.Server, orgId, artefactId, versionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypes(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypesEnvTypeUsersWithBody(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequestWithBody(c.Server, orgId, envType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypesEnvTypeUsers(ctx context.Context, orgId string, envType string, body PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequest(c.Server, orgId, envType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(c.Server, orgId, envType, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(c.Server, orgId, envType, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBody(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequestWithBody(c.Server, orgId, envType, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, body PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(c.Server, orgId, envType, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEventsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHumanitecPublicKeys(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHumanitecPublicKeysRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeprecatedImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeprecatedImagesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeprecatedImage(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeprecatedImageRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeprecatedImageBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeprecatedImageBuildsRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeprecatedImageBuildWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeprecatedImageBuildRequestWithBody(c.Server, orgId, imageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeprecatedImageBuild(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeprecatedImageBuildRequest(c.Server, orgId, imageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdInvitations(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdInvitationsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdInvitationsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdInvitationsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdInvitations(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdInvitationsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPublicKeys(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPublicKeysRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicKeyWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicKeyRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicKey(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicKeyRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicKeyRequest(c.Server, orgId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicKeyRequest(c.Server, orgId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineRunsByOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineRunsByOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestPipelineDefinitionSchema(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestPipelineDefinitionSchemaRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelinesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelinesInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(c.Server, orgId, regId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdCredsRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesAccountsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesAccountsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesAccountsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesAccountsAccIdRequest(c.Server, orgId, accId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountsAccIdRequest(c.Server, orgId, accId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(c.Server, orgId, accId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesAccountsAccIdRequest(c.Server, orgId, accId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDefsDefIdRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest(c.Server, orgId, defId, criteriaId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefsDefIdResources(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDriversRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDriversWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDriversRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDriversRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(c.Server, orgId, driverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecretstores(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretstoresRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdSecretstoresWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdSecretstoresRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdSecretstores(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdSecretstoresRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(c.Server, orgId, storeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdUsersRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdUsersRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdUsers(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdUsersRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdUsersUserIdRequest(c.Server, orgId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdUsersUserIdRequest(c.Server, orgId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdUsersUserIdWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdUsersUserIdRequestWithBody(c.Server, orgId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdUsersUserId(ctx context.Context, orgId string, userId string, body PatchOrgsOrgIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdUsersUserIdRequest(c.Server, orgId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfileChartVersions(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfileChartVersionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileChartVersionWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileChartVersionRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfiles(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfilesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkloadProfileRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadProfileRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchWorkloadProfileRequestWithBody(c.Server, orgId, profileQid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body PatchWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchWorkloadProfileRequest(c.Server, orgId, profileQid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfileVersions(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfileVersionsRequest(c.Server, orgId, profileQid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileVersionWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileVersionRequestWithBody(c.Server, orgId, profileQid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body CreateWorkloadProfileVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileVersionRequest(c.Server, orgId, profileQid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestWorkloadProfileVersionRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkloadProfileVersionRequest(c.Server, orgId, profileQid, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTokensTokenId(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTokensTokenIdRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserIdTokensRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserIdTokensRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUserIdTokens(ctx context.Context, userId string, body PostUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserIdTokensRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCurrentUserRequest calls the generic PatchCurrentUser builder with application/json body
func NewPatchCurrentUserRequest(server string, body PatchCurrentUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCurrentUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchCurrentUserRequestWithBody generates requests for PatchCurrentUser with any type of body
func NewPatchCurrentUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsRequest generates requests for GetOrgs
func NewGetOrgsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRequest generates requests for GetOrgsOrgId
func NewGetOrgsOrgIdRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsRequest generates requests for GetOrgsOrgIdApps
func NewGetOrgsOrgIdAppsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsRequest calls the generic PostOrgsOrgIdApps builder with application/json body
func NewPostOrgsOrgIdAppsRequest(server string, orgId string, body PostOrgsOrgIdAppsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsRequestWithBody generates requests for PostOrgsOrgIdApps with any type of body
func NewPostOrgsOrgIdAppsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdRequest generates requests for DeleteOrgsOrgIdAppsAppId
func NewDeleteOrgsOrgIdAppsAppIdRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdRequest generates requests for GetOrgsOrgIdAppsAppId
func NewGetOrgsOrgIdAppsAppIdRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineApprovalRequestsRequest generates requests for ListPipelineApprovalRequests
func NewListPipelineApprovalRequestsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/approvals", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pipeline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipeline", runtime.ParamLocationQuery, *params.Pipeline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Run != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "run", runtime.ParamLocationQuery, *params.Run); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdDeltasRequest generates requests for GetOrgsOrgIdAppsAppIdDeltas
func NewGetOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequest calls the generic PostOrgsOrgIdAppsAppIdDeltas builder with application/json body
func NewPostOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdDeltas with any type of body
func NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeltaRequest generates requests for GetDelta
func NewGetDeltaRequest(server string, orgId string, appId string, deltaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest calls the generic PatchOrgsOrgIdAppsAppIdDeltasDeltaId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(server string, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdDeltasDeltaId with any type of body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDeltaRequest calls the generic PutDelta builder with application/json body
func NewPutDeltaRequest(server string, orgId string, appId string, deltaId string, body PutDeltaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDeltaRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutDeltaRequestWithBody generates requests for PutDelta with any type of body
func NewPutDeltaRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/env_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/name", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvs
func NewGetOrgsOrgIdAppsAppIdEnvsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsRequest calls the generic PostOrgsOrgIdAppsAppIdEnvs builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvs with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentsRequest generates requests for ListDeployments
func NewListDeploymentsRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentErrorsRequest generates requests for ListDeploymentErrors
func NewListDeploymentErrorsRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s/errors", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest(server string, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/from_deploy_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdResources
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources/graph", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest(server string, orgId string, appId string, envId string, pType string, resId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resId", runtime.ParamLocationPath, resId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRules
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdRules builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server, orgId, appId, envId, ruleId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server string, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest(server string, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/paused", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest calls the generic PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest(server string, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas with any type of body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/replicas", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(server string, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyChanged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, envId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest calls the generic PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server, orgId, appId, envId, key, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey with any type of body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server string, orgId string, appId string, envId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server, orgId, appId, envId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server string, orgId string, appId string, envId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdJobsRequest generates requests for DeleteOrgsOrgIdAppsAppIdJobs
func NewDeleteOrgsOrgIdAppsAppIdJobsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/jobs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelinesRequest generates requests for ListPipelines
func NewListPipelinesRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trigger != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger", runtime.ParamLocationQuery, *params.Trigger); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineRequestWithBody generates requests for CreatePipeline with any type of body
func NewCreatePipelineRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineRequest generates requests for DeletePipeline
func NewDeletePipelineRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetPipelineRequest generates requests for GetPipeline
func NewGetPipelineRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineRequestWithBody generates requests for UpdatePipeline with any type of body
func NewUpdatePipelineRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListPipelineRunsRequest generates requests for ListPipelineRuns
func NewListPipelineRunsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Completed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineRunRequest calls the generic CreatePipelineRun builder with application/json body
func NewCreatePipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineRunRequestWithBody(server, orgId, appId, pipelineId, params, "application/json", bodyReader)
}

// NewCreatePipelineRunRequestWithBody generates requests for CreatePipelineRun with any type of body
func NewCreatePipelineRunRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IdempotencyKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Idempotency-Key", headerParam0)
	}

	return req, nil
}

// NewDeletePipelineRunRequest generates requests for DeletePipelineRun
func NewDeletePipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetPipelineRunRequest generates requests for GetPipelineRun
func NewGetPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPipelineRunRequest generates requests for CancelPipelineRun
func NewCancelPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/cancel", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListPipelineJobsRequest generates requests for ListPipelineJobs
func NewListPipelineJobsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineJobRequest generates requests for GetPipelineJob
func NewGetPipelineJobRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineApprovalRequestRequest generates requests for GetPipelineApprovalRequest
func NewGetPipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApprovePipelineApprovalRequestRequest generates requests for ApprovePipelineApprovalRequest
func NewApprovePipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s/approve", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDenyPipelineApprovalRequestRequest generates requests for DenyPipelineApprovalRequest
func NewDenyPipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s/deny", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineStepLogsRequest generates requests for ListPipelineStepLogs
func NewListPipelineStepLogsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "stepIndex", runtime.ParamLocationPath, stepIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/steps/%s/logs", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartPipelineRunRequest generates requests for RestartPipelineRun
func NewRestartPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/restart", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.IdempotencyKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Idempotency-Key", headerParam0)
	}

	return req, nil
}

// NewGetPipelineDefinitionRequest generates requests for GetPipelineDefinition
func NewGetPipelineDefinitionRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/schema", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Accept != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)
	}

	return req, nil
}

// NewListPipelineVersionsRequest generates requests for ListPipelineVersions
func NewListPipelineVersionsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdRuntimeRequest generates requests for GetOrgsOrgIdAppsAppIdRuntime
func NewGetOrgsOrgIdAppsAppIdRuntimeRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/runtime", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSetsRequest generates requests for GetSets
func NewGetSetsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId string, appId string, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Diff != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "diff", runtime.ParamLocationQuery, *params.Diff); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest calls the generic PostOrgsOrgIdAppsAppIdSetsSetId builder with application/json body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server, orgId, appId, setId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdSetsSetId with any type of body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server string, orgId string, appId string, setId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(server string, orgId string, appId string, setId string, sourceSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sourceSetId", runtime.ParamLocationPath, sourceSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s/diff/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdUsersRequest generates requests for GetOrgsOrgIdAppsAppIdUsers
func NewGetOrgsOrgIdAppsAppIdUsersRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdUsersRequest calls the generic PostOrgsOrgIdAppsAppIdUsers builder with application/json body
func NewPostOrgsOrgIdAppsAppIdUsersRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdUsers with any type of body
func NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdUsersUserIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdUsersUserId
func NewDeleteOrgsOrgIdAppsAppIdUsersUserIdRequest(server string, orgId string, appId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest generates requests for GetOrgsOrgIdAppsAppIdUsersUserId
func NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest(server string, orgId string, appId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequest calls the generic PatchOrgsOrgIdAppsAppIdUsersUserId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequest(server string, orgId string, appId string, userId string, body PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequestWithBody(server, orgId, appId, userId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdUsersUserId with any type of body
func NewPatchOrgsOrgIdAppsAppIdUsersUserIdRequestWithBody(server string, orgId string, appId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyChanged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdValues
func NewDeleteOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdValues
func NewGetOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest calls the generic PatchOrgsOrgIdAppsAppIdValuesKey builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server, orgId, appId, key, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdValuesKey with any type of body
func NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server string, orgId string, appId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server, orgId, appId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server string, orgId string, appId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooks
func NewGetOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequest calls the generic PostOrgsOrgIdAppsAppIdWebhooks builder with application/json body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdWebhooks with any type of body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdWebhooksJobId
func NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooksJobId
func NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest calls the generic PatchOrgsOrgIdAppsAppIdWebhooksJobId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server, orgId, appId, jobId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdWebhooksJobId with any type of body
func NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server string, orgId string, appId string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListArtefactVersionsInOrgRequest generates requests for ListArtefactVersionsInOrg
func NewListArtefactVersionsInOrgRequest(server string, orgId string, params *ListArtefactVersionsInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArtefactVersionRequest calls the generic CreateArtefactVersion builder with application/json body
func NewCreateArtefactVersionRequest(server string, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArtefactVersionRequestWithBody(server, orgId, params, "application/json", bodyReader)
}

// NewCreateArtefactVersionRequestWithBody generates requests for CreateArtefactVersion with any type of body
func NewCreateArtefactVersionRequestWithBody(server string, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Vcs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcs", runtime.ParamLocationQuery, *params.Vcs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtefactVersionRequest generates requests for GetArtefactVersion
func NewGetArtefactVersionRequest(server string, orgId string, artefactVersionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactVersionId", runtime.ParamLocationPath, artefactVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListArtefactsRequest generates requests for ListArtefacts
func NewListArtefactsRequest(server string, orgId string, params *ListArtefactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtefactRequest generates requests for DeleteArtefact
func NewDeleteArtefactRequest(server string, orgId string, artefactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListArtefactVersionsRequest generates requests for ListArtefactVersions
func NewListArtefactVersionsRequest(server string, orgId string, artefactId string, params *ListArtefactVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtefactVersionRequest calls the generic PatchArtefactVersion builder with application/json body
func NewPatchArtefactVersionRequest(server string, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtefactVersionRequestWithBody(server, orgId, artefactId, versionId, "application/json", bodyReader)
}

// NewPatchArtefactVersionRequestWithBody generates requests for PatchArtefactVersion with any type of body
func NewPatchArtefactVersionRequestWithBody(server string, orgId string, artefactId string, versionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdEnvTypesRequest generates requests for GetOrgsOrgIdEnvTypes
func NewGetOrgsOrgIdEnvTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdEnvTypesRequest calls the generic PostOrgsOrgIdEnvTypes builder with application/json body
func NewPostOrgsOrgIdEnvTypesRequest(server string, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdEnvTypesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdEnvTypesRequestWithBody generates requests for PostOrgsOrgIdEnvTypes with any type of body
func NewPostOrgsOrgIdEnvTypesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest generates requests for DeleteOrgsOrgIdEnvTypesEnvTypeId
func NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest generates requests for GetOrgsOrgIdEnvTypesEnvTypeId
func NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequest calls the generic PostOrgsOrgIdEnvTypesEnvTypeUsers builder with application/json body
func NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequest(server string, orgId string, envType string, body PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequestWithBody(server, orgId, envType, "application/json", bodyReader)
}

// NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequestWithBody generates requests for PostOrgsOrgIdEnvTypesEnvTypeUsers with any type of body
func NewPostOrgsOrgIdEnvTypesEnvTypeUsersRequestWithBody(server string, orgId string, envType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest generates requests for DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId
func NewDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(server string, orgId string, envType string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest generates requests for GetOrgsOrgIdEnvTypesEnvTypeUsersUserId
func NewGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(server string, orgId string, envType string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest calls the generic PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId builder with application/json body
func NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequest(server string, orgId string, envType string, userId string, body PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequestWithBody(server, orgId, envType, userId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequestWithBody generates requests for PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId with any type of body
func NewPatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdRequestWithBody(server string, orgId string, envType string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdEventsRequest generates requests for GetOrgsOrgIdEvents
func NewGetOrgsOrgIdEventsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHumanitecPublicKeysRequest generates requests for ListHumanitecPublicKeys
func NewListHumanitecPublicKeysRequest(server string, orgId string, params *ListHumanitecPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/humanitec-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeprecatedImagesRequest generates requests for ListDeprecatedImages
func NewListDeprecatedImagesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeprecatedImageRequest generates requests for GetDeprecatedImage
func NewGetDeprecatedImageRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeprecatedImageBuildsRequest generates requests for ListDeprecatedImageBuilds
func NewListDeprecatedImageBuildsRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeprecatedImageBuildRequest calls the generic CreateDeprecatedImageBuild builder with application/json body
func NewCreateDeprecatedImageBuildRequest(server string, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeprecatedImageBuildRequestWithBody(server, orgId, imageId, "application/json", bodyReader)
}

// NewCreateDeprecatedImageBuildRequestWithBody generates requests for CreateDeprecatedImageBuild with any type of body
func NewCreateDeprecatedImageBuildRequestWithBody(server string, orgId string, imageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdInvitationsRequest generates requests for GetOrgsOrgIdInvitations
func NewGetOrgsOrgIdInvitationsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdInvitationsRequest calls the generic PostOrgsOrgIdInvitations builder with application/json body
func NewPostOrgsOrgIdInvitationsRequest(server string, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdInvitationsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdInvitationsRequestWithBody generates requests for PostOrgsOrgIdInvitations with any type of body
func NewPostOrgsOrgIdInvitationsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPublicKeysRequest generates requests for ListPublicKeys
func NewListPublicKeysRequest(server string, orgId string, params *ListPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fingerprint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fingerprint", runtime.ParamLocationQuery, *params.Fingerprint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePublicKeyRequest calls the generic CreatePublicKey builder with application/json body
func NewCreatePublicKeyRequest(server string, orgId string, body CreatePublicKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePublicKeyRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreatePublicKeyRequestWithBody generates requests for CreatePublicKey with any type of body
func NewCreatePublicKeyRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePublicKeyRequest generates requests for DeletePublicKey
func NewDeletePublicKeyRequest(server string, orgId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicKeyRequest generates requests for GetPublicKey
func NewGetPublicKeyRequest(server string, orgId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineRunsByOrgRequest generates requests for ListPipelineRunsByOrg
func NewListPipelineRunsByOrgRequest(server string, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipeline-runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pipeline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipeline", runtime.ParamLocationQuery, *params.Pipeline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Completed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestPipelineDefinitionSchemaRequest generates requests for GetLatestPipelineDefinitionSchema
func NewGetLatestPipelineDefinitionSchemaRequest(server string, orgId OrgIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipeline-schemas/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelinesInOrgRequest generates requests for ListPipelinesInOrg
func NewListPipelinesInOrgRequest(server string, orgId OrgIdPathParam, params *ListPipelinesInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trigger != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger", runtime.ParamLocationQuery, *params.Trigger); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRequest generates requests for GetOrgsOrgIdRegistries
func NewGetOrgsOrgIdRegistriesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdRegistriesRequest calls the generic PostOrgsOrgIdRegistries builder with application/json body
func NewPostOrgsOrgIdRegistriesRequest(server string, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdRegistriesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdRegistriesRequestWithBody generates requests for PostOrgsOrgIdRegistries with any type of body
func NewPostOrgsOrgIdRegistriesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdRegistriesRegIdRequest generates requests for DeleteOrgsOrgIdRegistriesRegId
func NewDeleteOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdRequest generates requests for GetOrgsOrgIdRegistriesRegId
func NewGetOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdRegistriesRegIdRequest calls the generic PatchOrgsOrgIdRegistriesRegId builder with application/json body
func NewPatchOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server, orgId, regId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody generates requests for PatchOrgsOrgIdRegistriesRegId with any type of body
func NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server string, orgId string, regId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdCredsRequest generates requests for GetOrgsOrgIdRegistriesRegIdCreds
func NewGetOrgsOrgIdRegistriesRegIdCredsRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s/creds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountTypesRequest generates requests for GetOrgsOrgIdResourcesAccountTypes
func NewGetOrgsOrgIdResourcesAccountTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/account-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountsRequest generates requests for GetOrgsOrgIdResourcesAccounts
func NewGetOrgsOrgIdResourcesAccountsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesAccountsRequest calls the generic PostOrgsOrgIdResourcesAccounts builder with application/json body
func NewPostOrgsOrgIdResourcesAccountsRequest(server string, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesAccountsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesAccountsRequestWithBody generates requests for PostOrgsOrgIdResourcesAccounts with any type of body
func NewPostOrgsOrgIdResourcesAccountsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesAccountsAccIdRequest generates requests for DeleteOrgsOrgIdResourcesAccountsAccId
func NewDeleteOrgsOrgIdResourcesAccountsAccIdRequest(server string, orgId string, accId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountsAccIdRequest generates requests for GetOrgsOrgIdResourcesAccountsAccId
func NewGetOrgsOrgIdResourcesAccountsAccIdRequest(server string, orgId string, accId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdResourcesAccountsAccIdRequest calls the generic PatchOrgsOrgIdResourcesAccountsAccId builder with application/json body
func NewPatchOrgsOrgIdResourcesAccountsAccIdRequest(server string, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(server, orgId, accId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody generates requests for PatchOrgsOrgIdResourcesAccountsAccId with any type of body
func NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(server string, orgId string, accId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsRequest generates requests for GetOrgsOrgIdResourcesDefs
func NewGetOrgsOrgIdResourcesDefsRequest(server string, orgId string, params *GetOrgsOrgIdResourcesDefsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env_type", runtime.ParamLocationQuery, *params.EnvType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Res != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res", runtime.ParamLocationQuery, *params.Res); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res_type", runtime.ParamLocationQuery, *params.ResType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Class != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class", runtime.ParamLocationQuery, *params.Class); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesDefsRequest calls the generic PostOrgsOrgIdResourcesDefs builder with application/json body
func NewPostOrgsOrgIdResourcesDefsRequest(server string, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDefsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDefsRequestWithBody generates requests for PostOrgsOrgIdResourcesDefs with any type of body
func NewPostOrgsOrgIdResourcesDefsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDefsDefIdRequest generates requests for DeleteOrgsOrgIdResourcesDefsDefId
func NewDeleteOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsDefIdRequest generates requests for GetOrgsOrgIdResourcesDefsDefId
func NewGetOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdResourcesDefsDefIdRequest calls the generic PatchOrgsOrgIdResourcesDefsDefId builder with application/json body
func NewPatchOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody generates requests for PatchOrgsOrgIdResourcesDefsDefId with any type of body
func NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdResourcesDefsDefIdRequest calls the generic PutOrgsOrgIdResourcesDefsDefId builder with application/json body
func NewPutOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string, body PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdResourcesDefsDefIdRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdResourcesDefsDefIdRequestWithBody generates requests for PutOrgsOrgIdResourcesDefsDefId with any type of body
func NewPutOrgsOrgIdResourcesDefsDefIdRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest calls the generic PostOrgsOrgIdResourcesDefsDefIdCriteria builder with application/json body
func NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest(server string, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody generates requests for PostOrgsOrgIdResourcesDefsDefIdCriteria with any type of body
func NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest generates requests for DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId
func NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest(server string, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "criteriaId", runtime.ParamLocationPath, criteriaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest generates requests for GetOrgsOrgIdResourcesDefsDefIdResources
func NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/resources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDriversRequest generates requests for GetOrgsOrgIdResourcesDrivers
func NewGetOrgsOrgIdResourcesDriversRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesDriversRequest calls the generic PostOrgsOrgIdResourcesDrivers builder with application/json body
func NewPostOrgsOrgIdResourcesDriversRequest(server string, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDriversRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDriversRequestWithBody generates requests for PostOrgsOrgIdResourcesDrivers with any type of body
func NewPostOrgsOrgIdResourcesDriversRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest generates requests for DeleteOrgsOrgIdResourcesDriversDriverId
func NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDriversDriverIdRequest generates requests for GetOrgsOrgIdResourcesDriversDriverId
func NewGetOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdResourcesDriversDriverIdRequest calls the generic PutOrgsOrgIdResourcesDriversDriverId builder with application/json body
func NewPutOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(server, orgId, driverId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody generates requests for PutOrgsOrgIdResourcesDriversDriverId with any type of body
func NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(server string, orgId string, driverId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdResourcesTypesRequest generates requests for GetOrgsOrgIdResourcesTypes
func NewGetOrgsOrgIdResourcesTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdSecretstoresRequest generates requests for GetOrgsOrgIdSecretstores
func NewGetOrgsOrgIdSecretstoresRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdSecretstoresRequest calls the generic PostOrgsOrgIdSecretstores builder with application/json body
func NewPostOrgsOrgIdSecretstoresRequest(server string, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdSecretstoresRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdSecretstoresRequestWithBody generates requests for PostOrgsOrgIdSecretstores with any type of body
func NewPostOrgsOrgIdSecretstoresRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdSecretstoresStoreIdRequest generates requests for DeleteOrgsOrgIdSecretstoresStoreId
func NewDeleteOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdSecretstoresStoreIdRequest generates requests for GetOrgsOrgIdSecretstoresStoreId
func NewGetOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdSecretstoresStoreIdRequest calls the generic PatchOrgsOrgIdSecretstoresStoreId builder with application/json body
func NewPatchOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(server, orgId, storeId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody generates requests for PatchOrgsOrgIdSecretstoresStoreId with any type of body
func NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(server string, orgId string, storeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdUsersRequest generates requests for GetOrgsOrgIdUsers
func NewGetOrgsOrgIdUsersRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdUsersRequest calls the generic PostOrgsOrgIdUsers builder with application/json body
func NewPostOrgsOrgIdUsersRequest(server string, orgId string, body PostOrgsOrgIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdUsersRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdUsersRequestWithBody generates requests for PostOrgsOrgIdUsers with any type of body
func NewPostOrgsOrgIdUsersRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdUsersUserIdRequest generates requests for DeleteOrgsOrgIdUsersUserId
func NewDeleteOrgsOrgIdUsersUserIdRequest(server string, orgId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdUsersUserIdRequest generates requests for GetOrgsOrgIdUsersUserId
func NewGetOrgsOrgIdUsersUserIdRequest(server string, orgId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdUsersUserIdRequest calls the generic PatchOrgsOrgIdUsersUserId builder with application/json body
func NewPatchOrgsOrgIdUsersUserIdRequest(server string, orgId string, userId string, body PatchOrgsOrgIdUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdUsersUserIdRequestWithBody(server, orgId, userId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdUsersUserIdRequestWithBody generates requests for PatchOrgsOrgIdUsersUserId with any type of body
func NewPatchOrgsOrgIdUsersUserIdRequestWithBody(server string, orgId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfileChartVersionsRequest generates requests for ListWorkloadProfileChartVersions
func NewListWorkloadProfileChartVersionsRequest(server string, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profile-chart-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkloadProfileChartVersionRequestWithBody generates requests for CreateWorkloadProfileChartVersion with any type of body
func NewCreateWorkloadProfileChartVersionRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profile-chart-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfilesRequest generates requests for ListWorkloadProfiles
func NewListWorkloadProfilesRequest(server string, orgId OrgIdPathParam, params *ListWorkloadProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deprecated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deprecated", runtime.ParamLocationQuery, *params.Deprecated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkloadProfileRequest calls the generic CreateWorkloadProfile builder with application/json body
func NewCreateWorkloadProfileRequest(server string, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkloadProfileRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateWorkloadProfileRequestWithBody generates requests for CreateWorkloadProfile with any type of body
func NewCreateWorkloadProfileRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkloadProfileRequest generates requests for DeleteWorkloadProfile
func NewDeleteWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadProfileRequest generates requests for GetWorkloadProfile
func NewGetWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchWorkloadProfileRequest calls the generic PatchWorkloadProfile builder with application/json body
func NewPatchWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body PatchWorkloadProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchWorkloadProfileRequestWithBody(server, orgId, profileQid, "application/json", bodyReader)
}

// NewPatchWorkloadProfileRequestWithBody generates requests for PatchWorkloadProfile with any type of body
func NewPatchWorkloadProfileRequestWithBody(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfileVersionsRequest generates requests for ListWorkloadProfileVersions
func NewListWorkloadProfileVersionsRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkloadProfileVersionRequest calls the generic CreateWorkloadProfileVersion builder with application/json body
func NewCreateWorkloadProfileVersionRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body CreateWorkloadProfileVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkloadProfileVersionRequestWithBody(server, orgId, profileQid, "application/json", bodyReader)
}

// NewCreateWorkloadProfileVersionRequestWithBody generates requests for CreateWorkloadProfileVersion with any type of body
func NewCreateWorkloadProfileVersionRequestWithBody(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLatestWorkloadProfileVersionRequest generates requests for GetLatestWorkloadProfileVersion
func NewGetLatestWorkloadProfileVersionRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions/latest", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkloadProfileVersionRequest generates requests for DeleteWorkloadProfileVersion
func NewDeleteWorkloadProfileVersionRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, version VersionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTokensTokenIdRequest generates requests for DeleteTokensTokenId
func NewDeleteTokensTokenIdRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUserIdTokensRequest generates requests for GetUsersUserIdTokens
func NewGetUsersUserIdTokensRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersUserIdTokensRequest calls the generic PostUsersUserIdTokens builder with application/json body
func NewPostUsersUserIdTokensRequest(server string, userId string, body PostUsersUserIdTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersUserIdTokensRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUsersUserIdTokensRequestWithBody generates requests for PostUsersUserIdTokens with any type of body
func NewPostUsersUserIdTokensRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersUserIdTokensTokenIdRequest generates requests for DeleteUsersUserIdTokensTokenId
func NewDeleteUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUserIdTokensTokenIdRequest generates requests for GetUsersUserIdTokensTokenId
func NewGetUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// PatchCurrentUser request with any body
	PatchCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error)

	PatchCurrentUserWithResponse(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error)

	// GetOrgs request
	GetOrgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error)

	// GetOrgsOrgId request
	GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error)

	// GetOrgsOrgIdApps request
	GetOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsResponse, error)

	// PostOrgsOrgIdApps request with any body
	PostOrgsOrgIdAppsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error)

	PostOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error)

	// DeleteOrgsOrgIdAppsAppId request
	DeleteOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdResponse, error)

	// GetOrgsOrgIdAppsAppId request
	GetOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdResponse, error)

	// ListPipelineApprovalRequests request
	ListPipelineApprovalRequestsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*ListPipelineApprovalRequestsResponse, error)

	// GetOrgsOrgIdAppsAppIdDeltas request
	GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error)

	// PostOrgsOrgIdAppsAppIdDeltas request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	// GetDelta request
	GetDeltaWithResponse(ctx context.Context, orgId string, appId string, deltaId string, reqEditors ...RequestEditorFn) (*GetDeltaResponse, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaId request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	// PutDelta request with any body
	PutDeltaWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error)

	PutDeltaWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvs request
	GetOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvs request with any body
	PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error)

	// ListDeployments request
	ListDeploymentsWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error)

	// GetDeployment request
	GetDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error)

	// ListDeploymentErrors request
	ListDeploymentErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*ListDeploymentErrorsResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdResources request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRules request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRules request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValues request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdJobs request
	DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error)

	// ListPipelines request
	ListPipelinesWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*ListPipelinesResponse, error)

	// CreatePipeline request with any body
	CreatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineResponse, error)

	// DeletePipeline request
	DeletePipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error)

	// GetPipeline request
	GetPipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error)

	// UpdatePipeline request with any body
	UpdatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error)

	// ListPipelineRuns request
	ListPipelineRunsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsResponse, error)

	// CreatePipelineRun request with any body
	CreatePipelineRunWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error)

	CreatePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error)

	// DeletePipelineRun request
	DeletePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*DeletePipelineRunResponse, error)

	// GetPipelineRun request
	GetPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineRunResponse, error)

	// CancelPipelineRun request
	CancelPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*CancelPipelineRunResponse, error)

	// ListPipelineJobs request
	ListPipelineJobsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*ListPipelineJobsResponse, error)

	// GetPipelineJob request
	GetPipelineJobWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineJobResponse, error)

	// GetPipelineApprovalRequest request
	GetPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineApprovalRequestResponse, error)

	// ApprovePipelineApprovalRequest request
	ApprovePipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*ApprovePipelineApprovalRequestResponse, error)

	// DenyPipelineApprovalRequest request
	DenyPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*DenyPipelineApprovalRequestResponse, error)

	// ListPipelineStepLogs request
	ListPipelineStepLogsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*ListPipelineStepLogsResponse, error)

	// RestartPipelineRun request
	RestartPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*RestartPipelineRunResponse, error)

	// GetPipelineDefinition request
	GetPipelineDefinitionWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*GetPipelineDefinitionResponse, error)

	// ListPipelineVersions request
	ListPipelineVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*ListPipelineVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdRuntime request
	GetOrgsOrgIdAppsAppIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error)

	// GetSets request
	GetSetsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetSetsResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// PostOrgsOrgIdAppsAppIdSetsSetId request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error)

	// GetOrgsOrgIdAppsAppIdUsers request
	GetOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersResponse, error)

	// PostOrgsOrgIdAppsAppIdUsers request with any body
	PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error)

	PostOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error)

	// DeleteOrgsOrgIdAppsAppIdUsersUserId request
	DeleteOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse, error)

	// GetOrgsOrgIdAppsAppIdUsersUserId request
	GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error)

	// PatchOrgsOrgIdAppsAppIdUsersUserId request with any body
	PatchOrgsOrgIdAppsAppIdUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdUsersUserIdResponse, error)

	PatchOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, body PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdUsersUserIdResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValues request
	DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdValues request
	GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdValues request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// PatchOrgsOrgIdAppsAppIdValuesKey request with any body
	PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooks request
	GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// PostOrgsOrgIdAppsAppIdWebhooks request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobId request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobId request
	GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// PatchOrgsOrgIdAppsAppIdWebhooksJobId request with any body
	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// ListArtefactVersionsInOrg request
	ListArtefactVersionsInOrgWithResponse(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsInOrgResponse, error)

	// CreateArtefactVersion request with any body
	CreateArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error)

	CreateArtefactVersionWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error)

	// GetArtefactVersion request
	GetArtefactVersionWithResponse(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*GetArtefactVersionResponse, error)

	// ListArtefacts request
	ListArtefactsWithResponse(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*ListArtefactsResponse, error)

	// DeleteArtefact request
	DeleteArtefactWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteArtefactResponse, error)

	// ListArtefactVersions request
	ListArtefactVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsResponse, error)

	// PatchArtefactVersion request with any body
	PatchArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error)

	PatchArtefactVersionWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error)

	// GetOrgsOrgIdEnvTypes request
	GetOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesResponse, error)

	// PostOrgsOrgIdEnvTypes request with any body
	PostOrgsOrgIdEnvTypesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error)

	PostOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeId request
	DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error)

	// GetOrgsOrgIdEnvTypesEnvTypeId request
	GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error)

	// PostOrgsOrgIdEnvTypesEnvTypeUsers request with any body
	PostOrgsOrgIdEnvTypesEnvTypeUsersWithBodyWithResponse(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesEnvTypeUsersResponse, error)

	PostOrgsOrgIdEnvTypesEnvTypeUsersWithResponse(ctx context.Context, orgId string, envType string, body PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesEnvTypeUsersResponse, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId request
	DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error)

	// GetOrgsOrgIdEnvTypesEnvTypeUsersUserId request
	GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error)

	// PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId request with any body
	PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error)

	PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, body PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error)

	// GetOrgsOrgIdEvents request
	GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error)

	// ListHumanitecPublicKeys request
	ListHumanitecPublicKeysWithResponse(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*ListHumanitecPublicKeysResponse, error)

	// ListDeprecatedImages request
	ListDeprecatedImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImagesResponse, error)

	// GetDeprecatedImage request
	GetDeprecatedImageWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetDeprecatedImageResponse, error)

	// ListDeprecatedImageBuilds request
	ListDeprecatedImageBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImageBuildsResponse, error)

	// CreateDeprecatedImageBuild request with any body
	CreateDeprecatedImageBuildWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error)

	CreateDeprecatedImageBuildWithResponse(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error)

	// GetOrgsOrgIdInvitations request
	GetOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdInvitationsResponse, error)

	// PostOrgsOrgIdInvitations request with any body
	PostOrgsOrgIdInvitationsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error)

	PostOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error)

	// ListPublicKeys request
	ListPublicKeysWithResponse(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*ListPublicKeysResponse, error)

	// CreatePublicKey request with any body
	CreatePublicKeyWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error)

	CreatePublicKeyWithResponse(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error)

	// DeletePublicKey request
	DeletePublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*DeletePublicKeyResponse, error)

	// GetPublicKey request
	GetPublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error)

	// ListPipelineRunsByOrg request
	ListPipelineRunsByOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsByOrgResponse, error)

	// GetLatestPipelineDefinitionSchema request
	GetLatestPipelineDefinitionSchemaWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetLatestPipelineDefinitionSchemaResponse, error)

	// ListPipelinesInOrg request
	ListPipelinesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*ListPipelinesInOrgResponse, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error)

	// PostOrgsOrgIdRegistries request with any body
	PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	// DeleteOrgsOrgIdRegistriesRegId request
	DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegId request
	GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error)

	// PatchOrgsOrgIdRegistriesRegId request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegIdCreds request
	GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error)

	// GetOrgsOrgIdResourcesAccountTypes request
	GetOrgsOrgIdResourcesAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountTypesResponse, error)

	// GetOrgsOrgIdResourcesAccounts request
	GetOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsResponse, error)

	// PostOrgsOrgIdResourcesAccounts request with any body
	PostOrgsOrgIdResourcesAccountsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error)

	PostOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error)

	// DeleteOrgsOrgIdResourcesAccountsAccId request
	DeleteOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesAccountsAccIdResponse, error)

	// GetOrgsOrgIdResourcesAccountsAccId request
	GetOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error)

	// PatchOrgsOrgIdResourcesAccountsAccId request with any body
	PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error)

	PatchOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error)

	// GetOrgsOrgIdResourcesDefs request
	GetOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsResponse, error)

	// PostOrgsOrgIdResourcesDefs request with any body
	PostOrgsOrgIdResourcesDefsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error)

	PostOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error)

	// DeleteOrgsOrgIdResourcesDefsDefId request
	DeleteOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error)

	// GetOrgsOrgIdResourcesDefsDefId request
	GetOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error)

	// PatchOrgsOrgIdResourcesDefsDefId request with any body
	PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error)

	PatchOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error)

	// PutOrgsOrgIdResourcesDefsDefId request with any body
	PutOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDefsDefIdResponse, error)

	PutOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDefsDefIdResponse, error)

	// PostOrgsOrgIdResourcesDefsDefIdCriteria request with any body
	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error)

	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error)

	// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId request
	DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error)

	// GetOrgsOrgIdResourcesDefsDefIdResources request
	GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error)

	// GetOrgsOrgIdResourcesDrivers request
	GetOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversResponse, error)

	// PostOrgsOrgIdResourcesDrivers request with any body
	PostOrgsOrgIdResourcesDriversWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error)

	PostOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error)

	// DeleteOrgsOrgIdResourcesDriversDriverId request
	DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// GetOrgsOrgIdResourcesDriversDriverId request
	GetOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// PutOrgsOrgIdResourcesDriversDriverId request with any body
	PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error)

	PutOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// GetOrgsOrgIdResourcesTypes request
	GetOrgsOrgIdResourcesTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesTypesResponse, error)

	// GetOrgsOrgIdSecretstores request
	GetOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresResponse, error)

	// PostOrgsOrgIdSecretstores request with any body
	PostOrgsOrgIdSecretstoresWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error)

	PostOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error)

	// DeleteOrgsOrgIdSecretstoresStoreId request
	DeleteOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error)

	// GetOrgsOrgIdSecretstoresStoreId request
	GetOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error)

	// PatchOrgsOrgIdSecretstoresStoreId request with any body
	PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error)

	PatchOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error)

	// GetOrgsOrgIdUsers request
	GetOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersResponse, error)

	// PostOrgsOrgIdUsers request with any body
	PostOrgsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error)

	PostOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error)

	// DeleteOrgsOrgIdUsersUserId request
	DeleteOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdUsersUserIdResponse, error)

	// GetOrgsOrgIdUsersUserId request
	GetOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersUserIdResponse, error)

	// PatchOrgsOrgIdUsersUserId request with any body
	PatchOrgsOrgIdUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdUsersUserIdResponse, error)

	PatchOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, body PatchOrgsOrgIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdUsersUserIdResponse, error)

	// ListWorkloadProfileChartVersions request
	ListWorkloadProfileChartVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileChartVersionsResponse, error)

	// CreateWorkloadProfileChartVersion request with any body
	CreateWorkloadProfileChartVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileChartVersionResponse, error)

	// ListWorkloadProfiles request
	ListWorkloadProfilesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfilesResponse, error)

	// CreateWorkloadProfile request with any body
	CreateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error)

	CreateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error)

	// DeleteWorkloadProfile request
	DeleteWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileResponse, error)

	// GetWorkloadProfile request
	GetWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetWorkloadProfileResponse, error)

	// PatchWorkloadProfile request with any body
	PatchWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchWorkloadProfileResponse, error)

	PatchWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body PatchWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchWorkloadProfileResponse, error)

	// ListWorkloadProfileVersions request
	ListWorkloadProfileVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileVersionsResponse, error)

	// CreateWorkloadProfileVersion request with any body
	CreateWorkloadProfileVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileVersionResponse, error)

	CreateWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body CreateWorkloadProfileVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileVersionResponse, error)

	// GetLatestWorkloadProfileVersion request
	GetLatestWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetLatestWorkloadProfileVersionResponse, error)

	// DeleteWorkloadProfileVersion request
	DeleteWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileVersionResponse, error)

	// GetTokens request
	GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// DeleteTokensTokenId request
	DeleteTokensTokenIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokensTokenIdResponse, error)

	// GetUsersMe request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// GetUsersUserIdTokens request
	GetUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdTokensResponse, error)

	// PostUsersUserIdTokens request with any body
	PostUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserIdTokensResponse, error)

	PostUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserIdTokensResponse, error)

	// DeleteUsersUserIdTokensTokenId request
	DeleteUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdTokensTokenIdResponse, error)

	// GetUsersUserIdTokensTokenId request
	GetUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdTokensTokenIdResponse, error)
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApplicationResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineApprovalRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineApprovalRequest
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineApprovalRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineApprovalRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeltaResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeploymentResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeploymentErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NodeBodyResponse
	JSON400      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeInfoResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pipeline
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pipeline
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineRun
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineRun
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineRun
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineJobPartial
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineJob
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPipelineJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApprovePipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON400      *HumanitecErrorResponse
	JSON403      *ErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ApprovePipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApprovePipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DenyPipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON400      *HumanitecErrorResponse
	JSON403      *ErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DenyPipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DenyPipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineStepLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineStepLog
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineStepLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineStepLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineRun
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RestartPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPipelineDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineVersion
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdRuntimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentRuntimeInfoResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SetResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlainDeltaResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WebhookResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookUpdateResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactVersionsInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactVersionsInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactVersionsInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtefactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteArtefactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtefactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentTypeResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdEnvTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EnvironmentTypeResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdEnvTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdEnvTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *EnvironmentTypeResponse
	JSON401      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *[]map[string]string
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypesEnvTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentTypeResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypesEnvTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypesEnvTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdEnvTypesEnvTypeUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdEnvTypesEnvTypeUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdEnvTypesEnvTypeUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EventResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHumanitecPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HumanitecPublicKey
}

// Status returns HTTPResponse.Status
func (r ListHumanitecPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHumanitecPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeprecatedImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageResponse
}

// Status returns HTTPResponse.Status
func (r ListDeprecatedImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeprecatedImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeprecatedImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeprecatedImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeprecatedImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeprecatedImageBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageBuildResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeprecatedImageBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeprecatedImageBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeprecatedImageBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeprecatedImageBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeprecatedImageBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserInviteResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublicKey
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicKey
	JSON400      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicKey
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineRunsByOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineRun
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelineRunsByOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineRunsByOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestPipelineDefinitionSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLatestPipelineDefinitionSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestPipelineDefinitionSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelinesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pipeline
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPipelinesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelinesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdCredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryCredsResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccountTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceAccountResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesAccountsAccIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesAccountsAccIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesAccountsAccIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountsAccIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountsAccIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountsAccIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdResourcesAccountsAccIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdResourcesAccountsAccIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdResourcesAccountsAccIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MatchingCriteriaResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsDefIdResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsDefIdResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsDefIdResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDriversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DriverDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDriversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDriversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDriversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDriversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDriversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretstoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SecretStoreResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretstoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretstoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdSecretstoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecretStoreResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdSecretstoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdSecretstoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfileChartVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileChartVersionResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfileChartVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfileChartVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkloadProfileChartVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadProfileChartVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorkloadProfileChartVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkloadProfileChartVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadProfileResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfileVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfileVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfileVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkloadProfileVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadProfileVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorkloadProfileVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkloadProfileVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestWorkloadProfileVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLatestWorkloadProfileVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestWorkloadProfileVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkloadProfileVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWorkloadProfileVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkloadProfileVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// PatchCurrentUserWithBodyWithResponse request with arbitrary body returning *PatchCurrentUserResponse
func (c *ClientWithResponses) PatchCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error) {
	rsp, err := c.PatchCurrentUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrentUserResponse(rsp)
}

func (c *ClientWithResponses) PatchCurrentUserWithResponse(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error) {
	rsp, err := c.PatchCurrentUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrentUserResponse(rsp)
}

// GetOrgsWithResponse request returning *GetOrgsResponse
func (c *ClientWithResponses) GetOrgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error) {
	rsp, err := c.GetOrgs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsResponse(rsp)
}

// GetOrgsOrgIdWithResponse request returning *GetOrgsOrgIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error) {
	rsp, err := c.GetOrgsOrgId(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResponse(rsp)
}

// GetOrgsOrgIdAppsWithResponse request returning *GetOrgsOrgIdAppsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsResponse, error) {
	rsp, err := c.GetOrgsOrgIdApps(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsResponse(rsp)
}

// PostOrgsOrgIdAppsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error) {
	rsp, err := c.PostOrgsOrgIdApps(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppId(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWithResponse request returning *GetOrgsOrgIdAppsAppIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppId(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdResponse(rsp)
}

// ListPipelineApprovalRequestsWithResponse request returning *ListPipelineApprovalRequestsResponse
func (c *ClientWithResponses) ListPipelineApprovalRequestsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*ListPipelineApprovalRequestsResponse, error) {
	rsp, err := c.ListPipelineApprovalRequests(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineApprovalRequestsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdDeltasWithResponse request returning *GetOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// GetDeltaWithResponse request returning *GetDeltaResponse
func (c *ClientWithResponses) GetDeltaWithResponse(ctx context.Context, orgId string, appId string, deltaId string, reqEditors ...RequestEditorFn) (*GetDeltaResponse, error) {
	rsp, err := c.GetDelta(ctx, orgId, appId, deltaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

// PutDeltaWithBodyWithResponse request with arbitrary body returning *PutDeltaResponse
func (c *ClientWithResponses) PutDeltaWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error) {
	rsp, err := c.PutDeltaWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeltaResponse(rsp)
}

func (c *ClientWithResponses) PutDeltaWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error) {
	rsp, err := c.PutDelta(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeltaResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvs(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvs(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp)
}

// ListDeploymentsWithResponse request returning *ListDeploymentsResponse
func (c *ClientWithResponses) ListDeploymentsWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error) {
	rsp, err := c.ListDeployments(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentsResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp)
}

// GetDeploymentWithResponse request returning *GetDeploymentResponse
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error) {
	rsp, err := c.GetDeployment(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResponse(rsp)
}

// ListDeploymentErrorsWithResponse request returning *ListDeploymentErrorsResponse
func (c *ClientWithResponses) ListDeploymentErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*ListDeploymentErrorsResponse, error) {
	rsp, err := c.ListDeploymentErrors(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentErrorsResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraph(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx, orgId, appId, envId, pType, resId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx, orgId, appId, envId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx, orgId, appId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, envId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, envId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, envId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx, orgId, appId, envId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx, orgId, appId, envId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdJobsWithResponse request returning *DeleteOrgsOrgIdAppsAppIdJobsResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdJobs(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp)
}

// ListPipelinesWithResponse request returning *ListPipelinesResponse
func (c *ClientWithResponses) ListPipelinesWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*ListPipelinesResponse, error) {
	rsp, err := c.ListPipelines(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelinesResponse(rsp)
}

// CreatePipelineWithBodyWithResponse request with arbitrary body returning *CreatePipelineResponse
func (c *ClientWithResponses) CreatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineResponse, error) {
	rsp, err := c.CreatePipelineWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineResponse(rsp)
}

// DeletePipelineWithResponse request returning *DeletePipelineResponse
func (c *ClientWithResponses) DeletePipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error) {
	rsp, err := c.DeletePipeline(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineResponse(rsp)
}

// GetPipelineWithResponse request returning *GetPipelineResponse
func (c *ClientWithResponses) GetPipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error) {
	rsp, err := c.GetPipeline(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineResponse(rsp)
}

// UpdatePipelineWithBodyWithResponse request with arbitrary body returning *UpdatePipelineResponse
func (c *ClientWithResponses) UpdatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.UpdatePipelineWithBody(ctx, orgId, appId, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResponse(rsp)
}

// ListPipelineRunsWithResponse request returning *ListPipelineRunsResponse
func (c *ClientWithResponses) ListPipelineRunsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsResponse, error) {
	rsp, err := c.ListPipelineRuns(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineRunsResponse(rsp)
}

// CreatePipelineRunWithBodyWithResponse request with arbitrary body returning *CreatePipelineRunResponse
func (c *ClientWithResponses) CreatePipelineRunWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error) {
	rsp, err := c.CreatePipelineRunWithBody(ctx, orgId, appId, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error) {
	rsp, err := c.CreatePipelineRun(ctx, orgId, appId, pipelineId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunResponse(rsp)
}

// DeletePipelineRunWithResponse request returning *DeletePipelineRunResponse
func (c *ClientWithResponses) DeletePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*DeletePipelineRunResponse, error) {
	rsp, err := c.DeletePipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineRunResponse(rsp)
}

// GetPipelineRunWithResponse request returning *GetPipelineRunResponse
func (c *ClientWithResponses) GetPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineRunResponse, error) {
	rsp, err := c.GetPipelineRun(ctx, orgId, appId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineRunResponse(rsp)
}

// CancelPipelineRunWithResponse request returning *CancelPipelineRunResponse
func (c *ClientWithResponses) CancelPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*CancelPipelineRunResponse, error) {
	rsp, err := c.CancelPipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPipelineRunResponse(rsp)
}

// ListPipelineJobsWithResponse request returning *ListPipelineJobsResponse
func (c *ClientWithResponses) ListPipelineJobsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*ListPipelineJobsResponse, error) {
	rsp, err := c.ListPipelineJobs(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineJobsResponse(rsp)
}

// GetPipelineJobWithResponse request returning *GetPipelineJobResponse
func (c *ClientWithResponses) GetPipelineJobWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineJobResponse, error) {
	rsp, err := c.GetPipelineJob(ctx, orgId, appId, pipelineId, runId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineJobResponse(rsp)
}

// GetPipelineApprovalRequestWithResponse request returning *GetPipelineApprovalRequestResponse
func (c *ClientWithResponses) GetPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineApprovalRequestResponse, error) {
	rsp, err := c.GetPipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineApprovalRequestResponse(rsp)
}

// ApprovePipelineApprovalRequestWithResponse request returning *ApprovePipelineApprovalRequestResponse
func (c *ClientWithResponses) ApprovePipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*ApprovePipelineApprovalRequestResponse, error) {
	rsp, err := c.ApprovePipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApprovePipelineApprovalRequestResponse(rsp)
}

// DenyPipelineApprovalRequestWithResponse request returning *DenyPipelineApprovalRequestResponse
func (c *ClientWithResponses) DenyPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*DenyPipelineApprovalRequestResponse, error) {
	rsp, err := c.DenyPipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDenyPipelineApprovalRequestResponse(rsp)
}

// ListPipelineStepLogsWithResponse request returning *ListPipelineStepLogsResponse
func (c *ClientWithResponses) ListPipelineStepLogsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*ListPipelineStepLogsResponse, error) {
	rsp, err := c.ListPipelineStepLogs(ctx, orgId, appId, pipelineId, runId, jobId, stepIndex, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineStepLogsResponse(rsp)
}

// RestartPipelineRunWithResponse request returning *RestartPipelineRunResponse
func (c *ClientWithResponses) RestartPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*RestartPipelineRunResponse, error) {
	rsp, err := c.RestartPipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartPipelineRunResponse(rsp)
}

// GetPipelineDefinitionWithResponse request returning *GetPipelineDefinitionResponse
func (c *ClientWithResponses) GetPipelineDefinitionWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*GetPipelineDefinitionResponse, error) {
	rsp, err := c.GetPipelineDefinition(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineDefinitionResponse(rsp)
}

// ListPipelineVersionsWithResponse request returning *ListPipelineVersionsResponse
func (c *ClientWithResponses) ListPipelineVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*ListPipelineVersionsResponse, error) {
	rsp, err := c.ListPipelineVersions(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdRuntimeWithResponse request returning *GetOrgsOrgIdAppsAppIdRuntimeResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdRuntime(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdRuntimeResponse(rsp)
}

// GetSetsWithResponse request returning *GetSetsResponse
func (c *ClientWithResponses) GetSetsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetSetsResponse, error) {
	rsp, err := c.GetSets(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSetsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx, orgId, appId, setId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx, orgId, appId, setId, sourceSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdUsersWithResponse request returning *GetOrgsOrgIdAppsAppIdUsersResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdUsers(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdUsersResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdUsersWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdUsers(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdUsersUserIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdUsersUserId(ctx, orgId, appId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse request returning *GetOrgsOrgIdAppsAppIdUsersUserIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdUsersUserId(ctx, orgId, appId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdUsersUserIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdUsersUserIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdUsersUserIdWithBody(ctx, orgId, appId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, body PatchOrgsOrgIdAppsAppIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdUsersUserId(ctx, orgId, appId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersions(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValuesWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx, orgId, appId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx, orgId, appId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx, orgId, appId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// ListArtefactVersionsInOrgWithResponse request returning *ListArtefactVersionsInOrgResponse
func (c *ClientWithResponses) ListArtefactVersionsInOrgWithResponse(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsInOrgResponse, error) {
	rsp, err := c.ListArtefactVersionsInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactVersionsInOrgResponse(rsp)
}

// CreateArtefactVersionWithBodyWithResponse request with arbitrary body returning *CreateArtefactVersionResponse
func (c *ClientWithResponses) CreateArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error) {
	rsp, err := c.CreateArtefactVersionWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtefactVersionResponse(rsp)
}

func (c *ClientWithResponses) CreateArtefactVersionWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error) {
	rsp, err := c.CreateArtefactVersion(ctx, orgId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtefactVersionResponse(rsp)
}

// GetArtefactVersionWithResponse request returning *GetArtefactVersionResponse
func (c *ClientWithResponses) GetArtefactVersionWithResponse(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*GetArtefactVersionResponse, error) {
	rsp, err := c.GetArtefactVersion(ctx, orgId, artefactVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtefactVersionResponse(rsp)
}

// ListArtefactsWithResponse request returning *ListArtefactsResponse
func (c *ClientWithResponses) ListArtefactsWithResponse(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*ListArtefactsResponse, error) {
	rsp, err := c.ListArtefacts(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactsResponse(rsp)
}

// DeleteArtefactWithResponse request returning *DeleteArtefactResponse
func (c *ClientWithResponses) DeleteArtefactWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteArtefactResponse, error) {
	rsp, err := c.DeleteArtefact(ctx, orgId, artefactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtefactResponse(rsp)
}

// ListArtefactVersionsWithResponse request returning *ListArtefactVersionsResponse
func (c *ClientWithResponses) ListArtefactVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsResponse, error) {
	rsp, err := c.ListArtefactVersions(ctx, orgId, artefactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactVersionsResponse(rsp)
}

// PatchArtefactVersionWithBodyWithResponse request with arbitrary body returning *PatchArtefactVersionResponse
func (c *ClientWithResponses) PatchArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error) {
	rsp, err := c.PatchArtefactVersionWithBody(ctx, orgId, artefactId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtefactVersionResponse(rsp)
}

func (c *ClientWithResponses) PatchArtefactVersionWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error) {
	rsp, err := c.PatchArtefactVersion(ctx, orgId, artefactId, versionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtefactVersionResponse(rsp)
}

// GetOrgsOrgIdEnvTypesWithResponse request returning *GetOrgsOrgIdEnvTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypesResponse(rsp)
}

// PostOrgsOrgIdEnvTypesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdEnvTypesResponse
func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypes(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesResponse(rsp)
}

// DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse request returning *DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp)
}

// GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse request returning *GetOrgsOrgIdEnvTypesEnvTypeIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypesEnvTypeId(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp)
}

// PostOrgsOrgIdEnvTypesEnvTypeUsersWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdEnvTypesEnvTypeUsersResponse
func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesEnvTypeUsersWithBodyWithResponse(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesEnvTypeUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypesEnvTypeUsersWithBody(ctx, orgId, envType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesEnvTypeUsersResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesEnvTypeUsersWithResponse(ctx context.Context, orgId string, envType string, body PostOrgsOrgIdEnvTypesEnvTypeUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesEnvTypeUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypesEnvTypeUsers(ctx, orgId, envType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesEnvTypeUsersResponse(rsp)
}

// DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse request returning *DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx, orgId, envType, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse request returning *GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx, orgId, envType, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp)
}

// PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithBody(ctx, orgId, envType, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, body PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdEnvTypesEnvTypeUsersUserId(ctx, orgId, envType, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdEventsWithResponse request returning *GetOrgsOrgIdEventsResponse
func (c *ClientWithResponses) GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error) {
	rsp, err := c.GetOrgsOrgIdEvents(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEventsResponse(rsp)
}

// ListHumanitecPublicKeysWithResponse request returning *ListHumanitecPublicKeysResponse
func (c *ClientWithResponses) ListHumanitecPublicKeysWithResponse(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*ListHumanitecPublicKeysResponse, error) {
	rsp, err := c.ListHumanitecPublicKeys(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHumanitecPublicKeysResponse(rsp)
}

// ListDeprecatedImagesWithResponse request returning *ListDeprecatedImagesResponse
func (c *ClientWithResponses) ListDeprecatedImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImagesResponse, error) {
	rsp, err := c.ListDeprecatedImages(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeprecatedImagesResponse(rsp)
}

// GetDeprecatedImageWithResponse request returning *GetDeprecatedImageResponse
func (c *ClientWithResponses) GetDeprecatedImageWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetDeprecatedImageResponse, error) {
	rsp, err := c.GetDeprecatedImage(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeprecatedImageResponse(rsp)
}

// ListDeprecatedImageBuildsWithResponse request returning *ListDeprecatedImageBuildsResponse
func (c *ClientWithResponses) ListDeprecatedImageBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImageBuildsResponse, error) {
	rsp, err := c.ListDeprecatedImageBuilds(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeprecatedImageBuildsResponse(rsp)
}

// CreateDeprecatedImageBuildWithBodyWithResponse request with arbitrary body returning *CreateDeprecatedImageBuildResponse
func (c *ClientWithResponses) CreateDeprecatedImageBuildWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error) {
	rsp, err := c.CreateDeprecatedImageBuildWithBody(ctx, orgId, imageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeprecatedImageBuildResponse(rsp)
}

func (c *ClientWithResponses) CreateDeprecatedImageBuildWithResponse(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error) {
	rsp, err := c.CreateDeprecatedImageBuild(ctx, orgId, imageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeprecatedImageBuildResponse(rsp)
}

// GetOrgsOrgIdInvitationsWithResponse request returning *GetOrgsOrgIdInvitationsResponse
func (c *ClientWithResponses) GetOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.GetOrgsOrgIdInvitations(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdInvitationsResponse(rsp)
}

// PostOrgsOrgIdInvitationsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdInvitationsResponse
func (c *ClientWithResponses) PostOrgsOrgIdInvitationsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.PostOrgsOrgIdInvitationsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdInvitationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.PostOrgsOrgIdInvitations(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdInvitationsResponse(rsp)
}

// ListPublicKeysWithResponse request returning *ListPublicKeysResponse
func (c *ClientWithResponses) ListPublicKeysWithResponse(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*ListPublicKeysResponse, error) {
	rsp, err := c.ListPublicKeys(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPublicKeysResponse(rsp)
}

// CreatePublicKeyWithBodyWithResponse request with arbitrary body returning *CreatePublicKeyResponse
func (c *ClientWithResponses) CreatePublicKeyWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error) {
	rsp, err := c.CreatePublicKeyWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicKeyResponse(rsp)
}

func (c *ClientWithResponses) CreatePublicKeyWithResponse(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error) {
	rsp, err := c.CreatePublicKey(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicKeyResponse(rsp)
}

// DeletePublicKeyWithResponse request returning *DeletePublicKeyResponse
func (c *ClientWithResponses) DeletePublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*DeletePublicKeyResponse, error) {
	rsp, err := c.DeletePublicKey(ctx, orgId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicKeyResponse(rsp)
}

// GetPublicKeyWithResponse request returning *GetPublicKeyResponse
func (c *ClientWithResponses) GetPublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error) {
	rsp, err := c.GetPublicKey(ctx, orgId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicKeyResponse(rsp)
}

// ListPipelineRunsByOrgWithResponse request returning *ListPipelineRunsByOrgResponse
func (c *ClientWithResponses) ListPipelineRunsByOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsByOrgResponse, error) {
	rsp, err := c.ListPipelineRunsByOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineRunsByOrgResponse(rsp)
}

// GetLatestPipelineDefinitionSchemaWithResponse request returning *GetLatestPipelineDefinitionSchemaResponse
func (c *ClientWithResponses) GetLatestPipelineDefinitionSchemaWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetLatestPipelineDefinitionSchemaResponse, error) {
	rsp, err := c.GetLatestPipelineDefinitionSchema(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestPipelineDefinitionSchemaResponse(rsp)
}

// ListPipelinesInOrgWithResponse request returning *ListPipelinesInOrgResponse
func (c *ClientWithResponses) ListPipelinesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*ListPipelinesInOrgResponse, error) {
	rsp, err := c.ListPipelinesInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelinesInOrgResponse(rsp)
}

// GetOrgsOrgIdRegistriesWithResponse request returning *GetOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistries(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesResponse(rsp)
}

// PostOrgsOrgIdRegistriesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistriesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistries(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

// DeleteOrgsOrgIdRegistriesRegIdWithResponse request returning *DeleteOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdWithResponse request returning *GetOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegIdWithBody(ctx, orgId, regId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegId(ctx, orgId, regId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdCredsWithResponse request returning *GetOrgsOrgIdRegistriesRegIdCredsResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegIdCreds(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountTypesWithResponse request returning *GetOrgsOrgIdResourcesAccountTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccountTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountTypesResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountsWithResponse request returning *GetOrgsOrgIdResourcesAccountsResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccounts(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountsResponse(rsp)
}

// PostOrgsOrgIdResourcesAccountsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesAccountsResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesAccountsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesAccountsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesAccounts(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesAccountsResponse(rsp)
}

// DeleteOrgsOrgIdResourcesAccountsAccIdWithResponse request returning *DeleteOrgsOrgIdResourcesAccountsAccIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesAccountsAccId(ctx, orgId, accId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountsAccIdWithResponse request returning *GetOrgsOrgIdResourcesAccountsAccIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccountsAccId(ctx, orgId, accId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

// PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdResourcesAccountsAccIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx, orgId, accId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesAccountsAccId(ctx, orgId, accId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsWithResponse request returning *GetOrgsOrgIdResourcesDefsResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefs(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsResponse(rsp)
}

// PostOrgsOrgIdResourcesDefsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDefsResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefs(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDefsDefIdWithResponse request returning *DeleteOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsDefIdWithResponse request returning *GetOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// PutOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDefsDefIdWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PutOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse request returning *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx, orgId, defId, criteriaId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse request returning *GetOrgsOrgIdResourcesDefsDefIdResourcesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefsDefIdResources(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse(rsp)
}

// GetOrgsOrgIdResourcesDriversWithResponse request returning *GetOrgsOrgIdResourcesDriversResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDrivers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDriversResponse(rsp)
}

// PostOrgsOrgIdResourcesDriversWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDriversResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDriversWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDriversWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDriversResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDrivers(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDriversResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse request returning *DeleteOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDriversDriverIdWithResponse request returning *GetOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx, orgId, driverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// GetOrgsOrgIdResourcesTypesWithResponse request returning *GetOrgsOrgIdResourcesTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesTypesResponse(rsp)
}

// GetOrgsOrgIdSecretstoresWithResponse request returning *GetOrgsOrgIdSecretstoresResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecretstores(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretstoresResponse(rsp)
}

// PostOrgsOrgIdSecretstoresWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdSecretstoresResponse
func (c *ClientWithResponses) PostOrgsOrgIdSecretstoresWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.PostOrgsOrgIdSecretstoresWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdSecretstoresResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.PostOrgsOrgIdSecretstores(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdSecretstoresResponse(rsp)
}

// DeleteOrgsOrgIdSecretstoresStoreIdWithResponse request returning *DeleteOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// GetOrgsOrgIdSecretstoresStoreIdWithResponse request returning *GetOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx, orgId, storeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// GetOrgsOrgIdUsersWithResponse request returning *GetOrgsOrgIdUsersResponse
func (c *ClientWithResponses) GetOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersResponse, error) {
	rsp, err := c.GetOrgsOrgIdUsers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdUsersResponse(rsp)
}

// PostOrgsOrgIdUsersWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdUsersResponse
func (c *ClientWithResponses) PostOrgsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdUsersWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdUsers(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdUsersResponse(rsp)
}

// DeleteOrgsOrgIdUsersUserIdWithResponse request returning *DeleteOrgsOrgIdUsersUserIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdUsersUserIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdUsersUserId(ctx, orgId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdUsersUserIdWithResponse request returning *GetOrgsOrgIdUsersUserIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersUserIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdUsersUserId(ctx, orgId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdUsersUserIdResponse(rsp)
}

// PatchOrgsOrgIdUsersUserIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdUsersUserIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdUsersUserIdWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdUsersUserIdWithBody(ctx, orgId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdUsersUserIdWithResponse(ctx context.Context, orgId string, userId string, body PatchOrgsOrgIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdUsersUserIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdUsersUserId(ctx, orgId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdUsersUserIdResponse(rsp)
}

// ListWorkloadProfileChartVersionsWithResponse request returning *ListWorkloadProfileChartVersionsResponse
func (c *ClientWithResponses) ListWorkloadProfileChartVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileChartVersionsResponse, error) {
	rsp, err := c.ListWorkloadProfileChartVersions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfileChartVersionsResponse(rsp)
}

// CreateWorkloadProfileChartVersionWithBodyWithResponse request with arbitrary body returning *CreateWorkloadProfileChartVersionResponse
func (c *ClientWithResponses) CreateWorkloadProfileChartVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileChartVersionResponse, error) {
	rsp, err := c.CreateWorkloadProfileChartVersionWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileChartVersionResponse(rsp)
}

// ListWorkloadProfilesWithResponse request returning *ListWorkloadProfilesResponse
func (c *ClientWithResponses) ListWorkloadProfilesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfilesResponse, error) {
	rsp, err := c.ListWorkloadProfiles(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfilesResponse(rsp)
}

// CreateWorkloadProfileWithBodyWithResponse request with arbitrary body returning *CreateWorkloadProfileResponse
func (c *ClientWithResponses) CreateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error) {
	rsp, err := c.CreateWorkloadProfileWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error) {
	rsp, err := c.CreateWorkloadProfile(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileResponse(rsp)
}

// DeleteWorkloadProfileWithResponse request returning *DeleteWorkloadProfileResponse
func (c *ClientWithResponses) DeleteWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileResponse, error) {
	rsp, err := c.DeleteWorkloadProfile(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkloadProfileResponse(rsp)
}

// GetWorkloadProfileWithResponse request returning *GetWorkloadProfileResponse
func (c *ClientWithResponses) GetWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetWorkloadProfileResponse, error) {
	rsp, err := c.GetWorkloadProfile(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadProfileResponse(rsp)
}

// PatchWorkloadProfileWithBodyWithResponse request with arbitrary body returning *PatchWorkloadProfileResponse
func (c *ClientWithResponses) PatchWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchWorkloadProfileResponse, error) {
	rsp, err := c.PatchWorkloadProfileWithBody(ctx, orgId, profileQid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchWorkloadProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body PatchWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchWorkloadProfileResponse, error) {
	rsp, err := c.PatchWorkloadProfile(ctx, orgId, profileQid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchWorkloadProfileResponse(rsp)
}

// ListWorkloadProfileVersionsWithResponse request returning *ListWorkloadProfileVersionsResponse
func (c *ClientWithResponses) ListWorkloadProfileVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileVersionsResponse, error) {
	rsp, err := c.ListWorkloadProfileVersions(ctx, orgId, profileQid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfileVersionsResponse(rsp)
}

// CreateWorkloadProfileVersionWithBodyWithResponse request with arbitrary body returning *CreateWorkloadProfileVersionResponse
func (c *ClientWithResponses) CreateWorkloadProfileVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileVersionResponse, error) {
	rsp, err := c.CreateWorkloadProfileVersionWithBody(ctx, orgId, profileQid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileVersionResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body CreateWorkloadProfileVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileVersionResponse, error) {
	rsp, err := c.CreateWorkloadProfileVersion(ctx, orgId, profileQid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileVersionResponse(rsp)
}

// GetLatestWorkloadProfileVersionWithResponse request returning *GetLatestWorkloadProfileVersionResponse
func (c *ClientWithResponses) GetLatestWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetLatestWorkloadProfileVersionResponse, error) {
	rsp, err := c.GetLatestWorkloadProfileVersion(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestWorkloadProfileVersionResponse(rsp)
}

// DeleteWorkloadProfileVersionWithResponse request returning *DeleteWorkloadProfileVersionResponse
func (c *ClientWithResponses) DeleteWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileVersionResponse, error) {
	rsp, err := c.DeleteWorkloadProfileVersion(ctx, orgId, profileQid, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkloadProfileVersionResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// DeleteTokensTokenIdWithResponse request returning *DeleteTokensTokenIdResponse
func (c *ClientWithResponses) DeleteTokensTokenIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokensTokenIdResponse, error) {
	rsp, err := c.DeleteTokensTokenId(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTokensTokenIdResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// GetUsersUserIdTokensWithResponse request returning *GetUsersUserIdTokensResponse
func (c *ClientWithResponses) GetUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdTokensResponse, error) {
	rsp, err := c.GetUsersUserIdTokens(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserIdTokensResponse(rsp)
}

// PostUsersUserIdTokensWithBodyWithResponse request with arbitrary body returning *PostUsersUserIdTokensResponse
func (c *ClientWithResponses) PostUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserIdTokensResponse, error) {
	rsp, err := c.PostUsersUserIdTokensWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserIdTokensResponse(rsp)
}

func (c *ClientWithResponses) PostUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserIdTokensResponse, error) {
	rsp, err := c.PostUsersUserIdTokens(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserIdTokensResponse(rsp)
}

// DeleteUsersUserIdTokensTokenIdWithResponse request returning *DeleteUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) DeleteUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.DeleteUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserIdTokensTokenIdResponse(rsp)
}

// GetUsersUserIdTokensTokenIdWithResponse request returning *GetUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) GetUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.GetUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserIdTokensTokenIdResponse(rsp)
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCurrentUserResponse parses an HTTP response from a PatchCurrentUserWithResponse call
func ParsePatchCurrentUserResponse(rsp *http.Response) (*PatchCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsResponse parses an HTTP response from a GetOrgsWithResponse call
func ParseGetOrgsResponse(rsp *http.Response) (*GetOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResponse parses an HTTP response from a GetOrgsOrgIdWithResponse call
func ParseGetOrgsOrgIdResponse(rsp *http.Response) (*GetOrgsOrgIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsResponse parses an HTTP response from a GetOrgsOrgIdAppsWithResponse call
func ParseGetOrgsOrgIdAppsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsResponse parses an HTTP response from a PostOrgsOrgIdAppsWithResponse call
func ParsePostOrgsOrgIdAppsResponse(rsp *http.Response) (*PostOrgsOrgIdAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineApprovalRequestsResponse parses an HTTP response from a ListPipelineApprovalRequestsWithResponse call
func ParseListPipelineApprovalRequestsResponse(rsp *http.Response) (*ListPipelineApprovalRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineApprovalRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDeltaResponse parses an HTTP response from a GetDeltaWithResponse call
func ParseGetDeltaResponse(rsp *http.Response) (*GetDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutDeltaResponse parses an HTTP response from a PutDeltaWithResponse call
func ParsePutDeltaResponse(rsp *http.Response) (*PutDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeploymentsResponse parses an HTTP response from a ListDeploymentsWithResponse call
func ParseListDeploymentsResponse(rsp *http.Response) (*ListDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetDeploymentResponse parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResponse(rsp *http.Response) (*GetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeploymentErrorsResponse parses an HTTP response from a ListDeploymentErrorsWithResponse call
func ParseListDeploymentErrorsResponse(rsp *http.Response) (*ListDeploymentErrorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdResourcesGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NodeBodyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdJobsResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdJobsWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPipelinesResponse parses an HTTP response from a ListPipelinesWithResponse call
func ParseListPipelinesResponse(rsp *http.Response) (*ListPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePipelineResponse parses an HTTP response from a CreatePipelineWithResponse call
func ParseCreatePipelineResponse(rsp *http.Response) (*CreatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineResponse parses an HTTP response from a DeletePipelineWithResponse call
func ParseDeletePipelineResponse(rsp *http.Response) (*DeletePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseGetPipelineResponse parses an HTTP response from a GetPipelineWithResponse call
func ParseGetPipelineResponse(rsp *http.Response) (*GetPipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePipelineResponse parses an HTTP response from a UpdatePipelineWithResponse call
func ParseUpdatePipelineResponse(rsp *http.Response) (*UpdatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseListPipelineRunsResponse parses an HTTP response from a ListPipelineRunsWithResponse call
func ParseListPipelineRunsResponse(rsp *http.Response) (*ListPipelineRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePipelineRunResponse parses an HTTP response from a CreatePipelineRunWithResponse call
func ParseCreatePipelineRunResponse(rsp *http.Response) (*CreatePipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeletePipelineRunResponse parses an HTTP response from a DeletePipelineRunWithResponse call
func ParseDeletePipelineRunResponse(rsp *http.Response) (*DeletePipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseGetPipelineRunResponse parses an HTTP response from a GetPipelineRunWithResponse call
func ParseGetPipelineRunResponse(rsp *http.Response) (*GetPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPipelineRunResponse parses an HTTP response from a CancelPipelineRunWithResponse call
func ParseCancelPipelineRunResponse(rsp *http.Response) (*CancelPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseListPipelineJobsResponse parses an HTTP response from a ListPipelineJobsWithResponse call
func ParseListPipelineJobsResponse(rsp *http.Response) (*ListPipelineJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineJobPartial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineJobResponse parses an HTTP response from a GetPipelineJobWithResponse call
func ParseGetPipelineJobResponse(rsp *http.Response) (*GetPipelineJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineApprovalRequestResponse parses an HTTP response from a GetPipelineApprovalRequestWithResponse call
func ParseGetPipelineApprovalRequestResponse(rsp *http.Response) (*GetPipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseApprovePipelineApprovalRequestResponse parses an HTTP response from a ApprovePipelineApprovalRequestWithResponse call
func ParseApprovePipelineApprovalRequestResponse(rsp *http.Response) (*ApprovePipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApprovePipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDenyPipelineApprovalRequestResponse parses an HTTP response from a DenyPipelineApprovalRequestWithResponse call
func ParseDenyPipelineApprovalRequestResponse(rsp *http.Response) (*DenyPipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DenyPipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineStepLogsResponse parses an HTTP response from a ListPipelineStepLogsWithResponse call
func ParseListPipelineStepLogsResponse(rsp *http.Response) (*ListPipelineStepLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineStepLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineStepLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRestartPipelineRunResponse parses an HTTP response from a RestartPipelineRunWithResponse call
func ParseRestartPipelineRunResponse(rsp *http.Response) (*RestartPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPipelineDefinitionResponse parses an HTTP response from a GetPipelineDefinitionWithResponse call
func ParseGetPipelineDefinitionResponse(rsp *http.Response) (*GetPipelineDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x.humanitec-pipelines-v1.0+yaml) unsupported

	}

	return response, nil
}

// ParseListPipelineVersionsResponse parses an HTTP response from a ListPipelineVersionsWithResponse call
func ParseListPipelineVersionsResponse(rsp *http.Response) (*ListPipelineVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdRuntimeResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdRuntimeWithResponse call
func ParseGetOrgsOrgIdAppsAppIdRuntimeResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentRuntimeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSetsResponse parses an HTTP response from a GetSetsWithResponse call
func ParseGetSetsResponse(rsp *http.Response) (*GetSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlainDeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdUsersResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdUsersWithResponse call
func ParseGetOrgsOrgIdAppsAppIdUsersResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdUsersResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdUsersWithResponse call
func ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdUsersUserIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdUsersUserIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdUsersUserIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdUsersUserIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListArtefactVersionsInOrgResponse parses an HTTP response from a ListArtefactVersionsInOrgWithResponse call
func ParseListArtefactVersionsInOrgResponse(rsp *http.Response) (*ListArtefactVersionsInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactVersionsInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateArtefactVersionResponse parses an HTTP response from a CreateArtefactVersionWithResponse call
func ParseCreateArtefactVersionResponse(rsp *http.Response) (*CreateArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetArtefactVersionResponse parses an HTTP response from a GetArtefactVersionWithResponse call
func ParseGetArtefactVersionResponse(rsp *http.Response) (*GetArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListArtefactsResponse parses an HTTP response from a ListArtefactsWithResponse call
func ParseListArtefactsResponse(rsp *http.Response) (*ListArtefactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteArtefactResponse parses an HTTP response from a DeleteArtefactWithResponse call
func ParseDeleteArtefactResponse(rsp *http.Response) (*DeleteArtefactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtefactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListArtefactVersionsResponse parses an HTTP response from a ListArtefactVersionsWithResponse call
func ParseListArtefactVersionsResponse(rsp *http.Response) (*ListArtefactVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchArtefactVersionResponse parses an HTTP response from a PatchArtefactVersionWithResponse call
func ParsePatchArtefactVersionResponse(rsp *http.Response) (*PatchArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypesResponse parses an HTTP response from a GetOrgsOrgIdEnvTypesWithResponse call
func ParseGetOrgsOrgIdEnvTypesResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdEnvTypesResponse parses an HTTP response from a PostOrgsOrgIdEnvTypesWithResponse call
func ParsePostOrgsOrgIdEnvTypesResponse(rsp *http.Response) (*PostOrgsOrgIdEnvTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdEnvTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse parses an HTTP response from a DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse call
func ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse parses an HTTP response from a GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse call
func ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypesEnvTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdEnvTypesEnvTypeUsersResponse parses an HTTP response from a PostOrgsOrgIdEnvTypesEnvTypeUsersWithResponse call
func ParsePostOrgsOrgIdEnvTypesEnvTypeUsersResponse(rsp *http.Response) (*PostOrgsOrgIdEnvTypesEnvTypeUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdEnvTypesEnvTypeUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse parses an HTTP response from a DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse call
func ParseDeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse parses an HTTP response from a GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse call
func ParseGetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse parses an HTTP response from a PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdWithResponse call
func ParsePatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse(rsp *http.Response) (*PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdEnvTypesEnvTypeUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEventsResponse parses an HTTP response from a GetOrgsOrgIdEventsWithResponse call
func ParseGetOrgsOrgIdEventsResponse(rsp *http.Response) (*GetOrgsOrgIdEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListHumanitecPublicKeysResponse parses an HTTP response from a ListHumanitecPublicKeysWithResponse call
func ParseListHumanitecPublicKeysResponse(rsp *http.Response) (*ListHumanitecPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHumanitecPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HumanitecPublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDeprecatedImagesResponse parses an HTTP response from a ListDeprecatedImagesWithResponse call
func ParseListDeprecatedImagesResponse(rsp *http.Response) (*ListDeprecatedImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeprecatedImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeprecatedImageResponse parses an HTTP response from a GetDeprecatedImageWithResponse call
func ParseGetDeprecatedImageResponse(rsp *http.Response) (*GetDeprecatedImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeprecatedImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeprecatedImageBuildsResponse parses an HTTP response from a ListDeprecatedImageBuildsWithResponse call
func ParseListDeprecatedImageBuildsResponse(rsp *http.Response) (*ListDeprecatedImageBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeprecatedImageBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageBuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDeprecatedImageBuildResponse parses an HTTP response from a CreateDeprecatedImageBuildWithResponse call
func ParseCreateDeprecatedImageBuildResponse(rsp *http.Response) (*CreateDeprecatedImageBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeprecatedImageBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdInvitationsResponse parses an HTTP response from a GetOrgsOrgIdInvitationsWithResponse call
func ParseGetOrgsOrgIdInvitationsResponse(rsp *http.Response) (*GetOrgsOrgIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserInviteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdInvitationsResponse parses an HTTP response from a PostOrgsOrgIdInvitationsWithResponse call
func ParsePostOrgsOrgIdInvitationsResponse(rsp *http.Response) (*PostOrgsOrgIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListPublicKeysResponse parses an HTTP response from a ListPublicKeysWithResponse call
func ParseListPublicKeysResponse(rsp *http.Response) (*ListPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreatePublicKeyResponse parses an HTTP response from a CreatePublicKeyWithResponse call
func ParseCreatePublicKeyResponse(rsp *http.Response) (*CreatePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePublicKeyResponse parses an HTTP response from a DeletePublicKeyWithResponse call
func ParseDeletePublicKeyResponse(rsp *http.Response) (*DeletePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPublicKeyResponse parses an HTTP response from a GetPublicKeyWithResponse call
func ParseGetPublicKeyResponse(rsp *http.Response) (*GetPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineRunsByOrgResponse parses an HTTP response from a ListPipelineRunsByOrgWithResponse call
func ParseListPipelineRunsByOrgResponse(rsp *http.Response) (*ListPipelineRunsByOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineRunsByOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLatestPipelineDefinitionSchemaResponse parses an HTTP response from a GetLatestPipelineDefinitionSchemaWithResponse call
func ParseGetLatestPipelineDefinitionSchemaResponse(rsp *http.Response) (*GetLatestPipelineDefinitionSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestPipelineDefinitionSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListPipelinesInOrgResponse parses an HTTP response from a ListPipelinesInOrgWithResponse call
func ParseListPipelinesInOrgResponse(rsp *http.Response) (*ListPipelinesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelinesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesResponse parses an HTTP response from a GetOrgsOrgIdRegistriesWithResponse call
func ParseGetOrgsOrgIdRegistriesResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdRegistriesResponse parses an HTTP response from a PostOrgsOrgIdRegistriesWithResponse call
func ParsePostOrgsOrgIdRegistriesResponse(rsp *http.Response) (*PostOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a DeleteOrgsOrgIdRegistriesRegIdWithResponse call
func ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a PatchOrgsOrgIdRegistriesRegIdWithResponse call
func ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdCredsResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdCredsWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdCredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryCredsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountTypesResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountTypesWithResponse call
func ParseGetOrgsOrgIdResourcesAccountTypesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountsResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountsWithResponse call
func ParseGetOrgsOrgIdResourcesAccountsResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesAccountsResponse parses an HTTP response from a PostOrgsOrgIdResourcesAccountsWithResponse call
func ParsePostOrgsOrgIdResourcesAccountsResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesAccountsAccIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesAccountsAccIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesAccountsAccIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesAccountsAccIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountsAccIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountsAccIdWithResponse call
func ParseGetOrgsOrgIdResourcesAccountsAccIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountsAccIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse parses an HTTP response from a PatchOrgsOrgIdResourcesAccountsAccIdWithResponse call
func ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp *http.Response) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdResourcesAccountsAccIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsWithResponse call
func ParseGetOrgsOrgIdResourcesDefsResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDefsResponse parses an HTTP response from a PostOrgsOrgIdResourcesDefsWithResponse call
func ParsePostOrgsOrgIdResourcesDefsResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParseGetOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a PatchOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a PutOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParsePutOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*PutOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse parses an HTTP response from a PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse call
func ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MatchingCriteriaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse call
func ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsDefIdResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDriversResponse parses an HTTP response from a GetOrgsOrgIdResourcesDriversWithResponse call
func ParseGetOrgsOrgIdResourcesDriversResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDriversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDriversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDriversResponse parses an HTTP response from a PostOrgsOrgIdResourcesDriversWithResponse call
func ParsePostOrgsOrgIdResourcesDriversResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDriversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParseGetOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a PutOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesTypesResponse parses an HTTP response from a GetOrgsOrgIdResourcesTypesWithResponse call
func ParseGetOrgsOrgIdResourcesTypesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretstoresResponse parses an HTTP response from a GetOrgsOrgIdSecretstoresWithResponse call
func ParseGetOrgsOrgIdSecretstoresResponse(rsp *http.Response) (*GetOrgsOrgIdSecretstoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretstoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdSecretstoresResponse parses an HTTP response from a PostOrgsOrgIdSecretstoresWithResponse call
func ParsePostOrgsOrgIdSecretstoresResponse(rsp *http.Response) (*PostOrgsOrgIdSecretstoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdSecretstoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a DeleteOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a GetOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParseGetOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a PatchOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdUsersResponse parses an HTTP response from a GetOrgsOrgIdUsersWithResponse call
func ParseGetOrgsOrgIdUsersResponse(rsp *http.Response) (*GetOrgsOrgIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdUsersResponse parses an HTTP response from a PostOrgsOrgIdUsersWithResponse call
func ParsePostOrgsOrgIdUsersResponse(rsp *http.Response) (*PostOrgsOrgIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdUsersUserIdResponse parses an HTTP response from a DeleteOrgsOrgIdUsersUserIdWithResponse call
func ParseDeleteOrgsOrgIdUsersUserIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdUsersUserIdResponse parses an HTTP response from a GetOrgsOrgIdUsersUserIdWithResponse call
func ParseGetOrgsOrgIdUsersUserIdResponse(rsp *http.Response) (*GetOrgsOrgIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdUsersUserIdResponse parses an HTTP response from a PatchOrgsOrgIdUsersUserIdWithResponse call
func ParsePatchOrgsOrgIdUsersUserIdResponse(rsp *http.Response) (*PatchOrgsOrgIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfileChartVersionsResponse parses an HTTP response from a ListWorkloadProfileChartVersionsWithResponse call
func ParseListWorkloadProfileChartVersionsResponse(rsp *http.Response) (*ListWorkloadProfileChartVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfileChartVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileChartVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkloadProfileChartVersionResponse parses an HTTP response from a CreateWorkloadProfileChartVersionWithResponse call
func ParseCreateWorkloadProfileChartVersionResponse(rsp *http.Response) (*CreateWorkloadProfileChartVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkloadProfileChartVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadProfileChartVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfilesResponse parses an HTTP response from a ListWorkloadProfilesWithResponse call
func ParseListWorkloadProfilesResponse(rsp *http.Response) (*ListWorkloadProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkloadProfileResponse parses an HTTP response from a CreateWorkloadProfileWithResponse call
func ParseCreateWorkloadProfileResponse(rsp *http.Response) (*CreateWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteWorkloadProfileResponse parses an HTTP response from a DeleteWorkloadProfileWithResponse call
func ParseDeleteWorkloadProfileResponse(rsp *http.Response) (*DeleteWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkloadProfileResponse parses an HTTP response from a GetWorkloadProfileWithResponse call
func ParseGetWorkloadProfileResponse(rsp *http.Response) (*GetWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchWorkloadProfileResponse parses an HTTP response from a PatchWorkloadProfileWithResponse call
func ParsePatchWorkloadProfileResponse(rsp *http.Response) (*PatchWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfileVersionsResponse parses an HTTP response from a ListWorkloadProfileVersionsWithResponse call
func ParseListWorkloadProfileVersionsResponse(rsp *http.Response) (*ListWorkloadProfileVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfileVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateWorkloadProfileVersionResponse parses an HTTP response from a CreateWorkloadProfileVersionWithResponse call
func ParseCreateWorkloadProfileVersionResponse(rsp *http.Response) (*CreateWorkloadProfileVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkloadProfileVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetLatestWorkloadProfileVersionResponse parses an HTTP response from a GetLatestWorkloadProfileVersionWithResponse call
func ParseGetLatestWorkloadProfileVersionResponse(rsp *http.Response) (*GetLatestWorkloadProfileVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestWorkloadProfileVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkloadProfileVersionResponse parses an HTTP response from a DeleteWorkloadProfileVersionWithResponse call
func ParseDeleteWorkloadProfileVersionResponse(rsp *http.Response) (*DeleteWorkloadProfileVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkloadProfileVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTokensTokenIdResponse parses an HTTP response from a DeleteTokensTokenIdWithResponse call
func ParseDeleteTokensTokenIdResponse(rsp *http.Response) (*DeleteTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUserIdTokensResponse parses an HTTP response from a GetUsersUserIdTokensWithResponse call
func ParseGetUsersUserIdTokensResponse(rsp *http.Response) (*GetUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersUserIdTokensResponse parses an HTTP response from a PostUsersUserIdTokensWithResponse call
func ParsePostUsersUserIdTokensResponse(rsp *http.Response) (*PostUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUsersUserIdTokensTokenIdResponse parses an HTTP response from a DeleteUsersUserIdTokensTokenIdWithResponse call
func ParseDeleteUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*DeleteUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersUserIdTokensTokenIdResponse parses an HTTP response from a GetUsersUserIdTokensTokenIdWithResponse call
func ParseGetUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*GetUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

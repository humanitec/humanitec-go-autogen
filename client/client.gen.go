// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PipelineApprovalRequestStatus.
const (
	Approved  PipelineApprovalRequestStatus = "approved"
	Cancelled PipelineApprovalRequestStatus = "cancelled"
	Denied    PipelineApprovalRequestStatus = "denied"
	Waiting   PipelineApprovalRequestStatus = "waiting"
)

// Defines values for RuntimeInfoContainerStatusStatus.
const (
	RuntimeInfoContainerStatusStatusFailure RuntimeInfoContainerStatusStatus = "Failure"
	RuntimeInfoContainerStatusStatusPending RuntimeInfoContainerStatusStatus = "Pending"
	RuntimeInfoContainerStatusStatusSuccess RuntimeInfoContainerStatusStatus = "Success"
	RuntimeInfoContainerStatusStatusUnknown RuntimeInfoContainerStatusStatus = "Unknown"
)

// Defines values for RuntimeInfoPodPhase.
const (
	RuntimeInfoPodPhaseFailed    RuntimeInfoPodPhase = "Failed"
	RuntimeInfoPodPhasePending   RuntimeInfoPodPhase = "Pending"
	RuntimeInfoPodPhaseRunning   RuntimeInfoPodPhase = "Running"
	RuntimeInfoPodPhaseSucceeded RuntimeInfoPodPhase = "Succeeded"
	RuntimeInfoPodPhaseUnknown   RuntimeInfoPodPhase = "Unknown"
)

// Defines values for RuntimeInfoPodStatus.
const (
	RuntimeInfoPodStatusFailure RuntimeInfoPodStatus = "Failure"
	RuntimeInfoPodStatusPending RuntimeInfoPodStatus = "Pending"
	RuntimeInfoPodStatusSuccess RuntimeInfoPodStatus = "Success"
	RuntimeInfoPodStatusUnknown RuntimeInfoPodStatus = "Unknown"
)

// Defines values for RuntimeInfoStatus.
const (
	RuntimeInfoStatusFailed             RuntimeInfoStatus = "Failed"
	RuntimeInfoStatusPartiallySucceeded RuntimeInfoStatus = "Partially Succeeded"
	RuntimeInfoStatusRunning            RuntimeInfoStatus = "Running"
	RuntimeInfoStatusStarting           RuntimeInfoStatus = "Starting"
	RuntimeInfoStatusStopped            RuntimeInfoStatus = "Stopped"
	RuntimeInfoStatusSucceeded          RuntimeInfoStatus = "Succeeded"
	RuntimeInfoStatusUnknown            RuntimeInfoStatus = "Unknown"
)

// Defines values for RuntimeInfoStatusClass.
const (
	Failure RuntimeInfoStatusClass = "Failure"
	Stopped RuntimeInfoStatusClass = "Stopped"
	Success RuntimeInfoStatusClass = "Success"
	Unknown RuntimeInfoStatusClass = "Unknown"
	Warning RuntimeInfoStatusClass = "Warning"
)

// Defines values for ValueSetVersionResultOf.
const (
	AppValueCreate            ValueSetVersionResultOf = "app_value_create"
	AppValueDelete            ValueSetVersionResultOf = "app_value_delete"
	AppValueSetVersionPurge   ValueSetVersionResultOf = "app_value_set_version_purge"
	AppValueSetVersionRestore ValueSetVersionResultOf = "app_value_set_version_restore"
	AppValueUpdate            ValueSetVersionResultOf = "app_value_update"
	AppValuesDelete           ValueSetVersionResultOf = "app_values_delete"
	EnvValueCreate            ValueSetVersionResultOf = "env_value_create"
	EnvValueDelete            ValueSetVersionResultOf = "env_value_delete"
	EnvValueSetVersionPurge   ValueSetVersionResultOf = "env_value_set_version_purge"
	EnvValueSetVersionRestore ValueSetVersionResultOf = "env_value_set_version_restore"
	EnvValueUpdate            ValueSetVersionResultOf = "env_value_update"
	EnvValuesDelete           ValueSetVersionResultOf = "env_values_delete"
)

// Defines values for ValueSource.
const (
	App ValueSource = "app"
	Env ValueSource = "env"
)

// Defines values for WorkloadProfileSpecDefinitionPropertyType.
const (
	WorkloadProfileSpecDefinitionPropertyTypeCollection WorkloadProfileSpecDefinitionPropertyType = "collection"
	WorkloadProfileSpecDefinitionPropertyTypeFeature    WorkloadProfileSpecDefinitionPropertyType = "feature"
	WorkloadProfileSpecDefinitionPropertyTypeSchema     WorkloadProfileSpecDefinitionPropertyType = "schema"
)

// Defines values for WorkloadProfileSpecDefinitionRuntimePropertyType.
const (
	WorkloadProfileSpecDefinitionRuntimePropertyTypeCollection WorkloadProfileSpecDefinitionRuntimePropertyType = "collection"
	WorkloadProfileSpecDefinitionRuntimePropertyTypeFeature    WorkloadProfileSpecDefinitionRuntimePropertyType = "feature"
)

// AWSAuthRequest Credentials to authenticate AWS Secret Manager.
type AWSAuthRequest struct {
	AccessKeyId     *string `json:"access_key_id,omitempty"`
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}

// AWSSMRequest AWS Secret Manager specification.
type AWSSMRequest struct {
	// Auth Credentials to authenticate AWS Secret Manager.
	Auth     *AWSAuthRequest `json:"auth,omitempty"`
	Endpoint *string         `json:"endpoint,omitempty"`
	Region   *string         `json:"region,omitempty"`
}

// AWSSMResponse AWS Secret Manager specification.
type AWSSMResponse struct {
	Endpoint *string `json:"endpoint,omitempty"`
	Region   *string `json:"region,omitempty"`
}

// AccountCredsRequest AccountCreds represents an account credentials (either, username- or token-based).
type AccountCredsRequest struct {
	// Expires Account credentials expiration timestamp.
	Expires *string `json:"expires"`

	// Password Account password or token secret.
	Password string `json:"password"`

	// Username Security account login or token.
	Username string `json:"username"`
}

// AccountTypeResponse Resource Account Types define cloud providers or protocols to which a resource account can belong.
type AccountTypeResponse struct {
	// Name Display Name.
	Name string `json:"name"`

	// Type Unique account type identifier (system-wide, across all organizations).
	Type string `json:"type"`
}

// ActiveResourceResponse Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.
//
// Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
type ActiveResourceResponse struct {
	// AppId The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// Class The Resource Class of the resource
	Class string `json:"class"`

	// CriteriaId The Matching Criteria ID.
	CriteriaId *string `json:"criteria_id,omitempty"`

	// DefId The Resource Definition that this resource was provisioned from.
	DefId string `json:"def_id"`

	// DeployId The deployment that the resource was last provisioned in.
	DeployId string `json:"deploy_id"`

	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// DriverType The driver to be used to create the resource.
	DriverType string `json:"driver_type"`

	// EnvId The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// EnvType The Environment Type of the Environment specified by env_id.
	EnvType string `json:"env_type"`

	// GuResId Globally unique resource id
	GuResId string `json:"gu_res_id"`

	// OrgId the ID of the Organization the Active Resource is associated with.
	OrgId string `json:"org_id"`

	// ResId The ID of the resource
	ResId string `json:"res_id"`

	// Resource The resource provisioning outputs ('values' only).
	Resource map[string]interface{} `json:"resource"`

	// SecretRefs Secret references from the resource provisioning output.
	SecretRefs map[string]interface{} `json:"secret_refs"`

	// Status Current resource status: 'pending', 'active', or 'deleting'.
	Status string `json:"status"`

	// Type The Resource Type of the resource
	Type string `json:"type"`

	// UpdatedAt The time the resource was last provisioned as part of a deployment.
	UpdatedAt time.Time `json:"updated_at"`
}

// Agent An object containing the details of an Agent.
type Agent struct {
	// CreatedAt Time of the Agent being registered.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User ID of user that added the Agent.
	CreatedBy string `json:"created_by"`

	// Description A pcks8 RSA public key PEM encoded (as the ones produced by openssl), whose module length is greater or equal than 4096 bits.
	Description *string `json:"description,omitempty"`

	// Id The Agent id.
	Id string `json:"id"`
}

// AgentCreateBody An object containing data needed to register an Agent.
type AgentCreateBody struct {
	// Description An optional description to show future users.
	Description *string `json:"description,omitempty"`

	// Id The Agent id. It can't be empty and should contain only url safe characters.
	Id string `json:"id"`

	// PublicKey A pcks8 RSA public key PEM encoded (as the ones produced by openssl), whose module length is greater or equal than 4096 bits.
	PublicKey string `json:"public_key"`
}

// AgentPatchBody An object containing data to update the description field of an Agent.
type AgentPatchBody struct {
	// Description A description to show future users. It can be empty.
	Description string `json:"description"`
}

// ApplicationCreationRequest defines model for ApplicationCreationRequest.
type ApplicationCreationRequest struct {
	Env *EnvironmentBaseRequest `json:"env,omitempty"`

	// Id The ID which refers to a specific application.
	Id string `json:"id"`

	// Name The Human-friendly name for the Application.
	Name string `json:"name"`
}

// ApplicationResponse An Application is a collection of Workloads that work together. When deployed, all Workloads in an Application are deployed to the same namespace.
//
// Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
type ApplicationResponse struct {
	// CreatedAt The timestamp in UTC indicates when the Application was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who created the Application.
	CreatedBy string `json:"created_by"`

	// Envs The Environments associated with the Application.
	Envs []EnvironmentBaseResponse `json:"envs"`

	// Id The ID which refers to a specific application.
	Id string `json:"id"`

	// Name The Human-friendly name for the Application.
	Name string `json:"name"`

	// OrgId The Organization id of this Application
	OrgId string `json:"org_id"`
}

// ArtefactResponse Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.
type ArtefactResponse struct {
	// CreatedAt The time when the Artefact was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Id The UUID of the Artefact.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Type The type of the Artefact.
	Type string `json:"type"`

	// UpdatedAt The time when the Artefact was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who updated the Artefact for the last time.
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// ArtefactVersion The details of an Artefact Version. The type field dictates the type of Artefact along with any additional fields.
type ArtefactVersion struct {
	// Type The Artefact Version type.
	Type  string `json:"type"`
	union json.RawMessage
}

// ArtefactVersionBase defines model for ArtefactVersionBase.
type ArtefactVersionBase struct {
	// Archived If the Artefact Version is archived.
	Archived bool `json:"archived"`

	// ArtefactId The UUID of the Artefact.
	ArtefactId string `json:"artefact_id"`

	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// CreatedAt The time when the Artefact Version was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact Version to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Id The UUID of the Artefact Version.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// UpdatedAt The time when the Artefact Version was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who performed the last updated on the Artefact Version.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Version (Optional) The version of the Artefact Version.
	Version *string `json:"version,omitempty"`
}

// AuditLogEntry An entry in the audit log
type AuditLogEntry struct {
	// At The date and time when the event was recorded.
	At time.Time `json:"at"`

	// OrgId The id of the Organization this event occurred in.
	OrgId *string `json:"org_id,omitempty"`

	// RequestMethod The HTTP method that was requested. Only POST, PATCH, PUT, and DELETE are audited.
	RequestMethod string `json:"request_method"`

	// RequestPath The URL path that was called.
	RequestPath string `json:"request_path"`

	// ResponseStatus The status code of the response. Only successful responses are audited.
	ResponseStatus int `json:"response_status"`

	// UserId The id of the User who triggered the event.
	UserId string `json:"user_id"`
}

// AutomationRuleRequest An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleRequest struct {
	// Active Whether the rule will be processed or not.
	Active *bool `json:"active,omitempty"`

	// ArtefactsFilter A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter *[]string `json:"artefacts_filter,omitempty"`

	// ExcludeArtefactsFilter Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter *bool `json:"exclude_artefacts_filter,omitempty"`

	// ExcludeImagesFilter DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter *bool `json:"exclude_images_filter,omitempty"`

	// ImagesFilter DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter *[]string `json:"images_filter,omitempty"`

	// Match DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match *string `json:"match,omitempty"`

	// MatchRef A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef *string `json:"match_ref,omitempty"`

	// Type Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// UpdateTo DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo *string `json:"update_to,omitempty"`
}

// AutomationRuleResponse An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleResponse struct {
	// Active Whether the rule will be processed or not.
	Active bool `json:"active"`

	// ArtefactsFilter A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter []string `json:"artefacts_filter"`

	// CreatedAt The timestamp in UTC of when the Automation Rule was created.
	CreatedAt string `json:"created_at"`

	// ExcludeArtefactsFilter Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter bool `json:"exclude_artefacts_filter"`

	// ExcludeImagesFilter DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter bool `json:"exclude_images_filter"`

	// Id The unique ID for this rule.
	Id string `json:"id"`

	// ImagesFilter DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter []string `json:"images_filter"`

	// Match DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match string `json:"match"`

	// MatchRef A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef string `json:"match_ref"`

	// Type Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// UpdateTo DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo string `json:"update_to"`

	// UpdatedAt The timestamp in UTC of when the Automation Rule was updated.
	UpdatedAt string `json:"updated_at"`
}

// AzureAuthRequest Credentials to authenticate Azure Key Vault.
type AzureAuthRequest struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
}

// AzureKVRequest Azure Key Vault specification.
type AzureKVRequest struct {
	// Auth Credentials to authenticate Azure Key Vault.
	Auth     *AzureAuthRequest `json:"auth,omitempty"`
	TenantId *string           `json:"tenant_id,omitempty"`
	Url      *string           `json:"url,omitempty"`
}

// AzureKVResponse Azure Key Vault specification.
type AzureKVResponse struct {
	TenantId *string `json:"tenant_id,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// ClusterSecretRequest ClusterSecret represents Kubernetes secret reference.
type ClusterSecretRequest struct {
	// Namespace Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Secret Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecretResponse ClusterSecret represents Kubernetes secret reference.
type ClusterSecretResponse struct {
	// Namespace Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Secret Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecretsMapRequest ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapRequest map[string]ClusterSecretRequest

// ClusterSecretsMapResponse ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapResponse map[string]ClusterSecretResponse

// ContainerArtefactVersion defines model for ContainerArtefactVersion.
type ContainerArtefactVersion struct {
	// Archived If the Artefact Version is archived.
	Archived bool `json:"archived"`

	// ArtefactId The UUID of the Artefact.
	ArtefactId string `json:"artefact_id"`

	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit string `json:"commit"`

	// CreatedAt The time when the Artefact Version was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact Version to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Digest (Optional) The Artefact Version digest.
	Digest string `json:"digest"`

	// Id The UUID of the Artefact Version.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref string `json:"ref"`

	// UpdatedAt The time when the Artefact Version was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who performed the last updated on the Artefact Version.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Version (Optional) The version of the Artefact Version.
	Version *string `json:"version,omitempty"`
}

// ControllerResponse Controller represents deployment, stateful set etc
type ControllerResponse struct {
	Kind     string             `json:"kind"`
	Message  string             `json:"message"`
	Pods     []PodStateResponse `json:"pods"`
	Replicas int                `json:"replicas"`
	Revision int                `json:"revision"`
	Status   string             `json:"status"`
}

// CreateArtefactVersion The details of a new Artefact Version to register. The type field is required and dictates the type of Artefact to register.
type CreateArtefactVersion struct {
	// Type The Artefact Version type.
	Type  string `json:"type"`
	union json.RawMessage
}

// CreateArtefactVersionBase defines model for CreateArtefactVersionBase.
type CreateArtefactVersionBase struct {
	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// Name The Artefact name.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// Type The Artefact Version type.
	Type string `json:"type"`

	// Version (Optional) The Artefact Version.
	Version *string `json:"version,omitempty"`
}

// CreateContainerArtefactVersion defines model for CreateContainerArtefactVersion.
type CreateContainerArtefactVersion struct {
	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// Digest (Optional) The Artefact Version digest.
	Digest *string `json:"digest,omitempty"`

	// Name The Artefact name.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// Type The Artefact Version type.
	Type string `json:"type"`

	// Version (Optional) The Artefact Version.
	Version *string `json:"version,omitempty"`
}

// CreateDriverRequestRequest CreateDriverRequest describes the new resource driver registration request.
type CreateDriverRequestRequest struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// Id The ID for this driver. Is used as `driver_type`.
	Id string `json:"id"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`
	// Deprecated:
	IsPublic *bool `json:"is_public,omitempty"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see 'target'.
	Target string `json:"target"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// CreateResourceAccountRequestRequest CreateResourceAccountRequest describes the request to create a new security account.
type CreateResourceAccountRequestRequest struct {
	// Credentials Credentials associated with the account.
	Credentials map[string]interface{} `json:"credentials"`

	// Id Unique identifier for the account (in scope of the organization it belongs to).
	Id string `json:"id"`

	// Name Display name.
	Name string `json:"name"`

	// Type The type of the account
	Type string `json:"type"`
}

// CreateResourceDefinitionRequestRequest CreateResourceDefinitionRequest describes a new ResourceDefinition request.
type CreateResourceDefinitionRequestRequest struct {
	// Criteria (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaRuleRequest `json:"criteria,omitempty"`

	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// DriverType The driver to be used to create the resource.
	DriverType string `json:"driver_type"`

	// Id The Resource Definition ID.
	Id string `json:"id"`

	// Name The display name.
	Name string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`

	// Type The Resource Type.
	Type string `json:"type"`
}

// CreateSecretStorePayloadRequest Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec. It must contain exactly one of the following elements to define Secret Store specification: `awssm` (AWS Secret Manager), `azurekv` (Azure Key Vault), `gcpsm` (GCP Secret Manager), `vault` (HashiCorp Vault).
type CreateSecretStorePayloadRequest struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMRequest `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv *AzureKVRequest `json:"azurekv,omitempty"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMRequest `json:"gcpsm,omitempty"`

	// Id The Secret Store ID.
	Id string `json:"id"`

	// Primary Defines whether the Secret Store is the primary secret management system for the organization.
	Primary bool `json:"primary"`

	// Vault Vault specification.
	Vault *VaultRequest `json:"vault,omitempty"`
}

// CreateWorkloadArtefactVersion defines model for CreateWorkloadArtefactVersion.
type CreateWorkloadArtefactVersion struct {
	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// Extensions Humanitec workload extensions for the Workload Artefact Version. These can be used to override the profile, or workload module spec and resource attributes.
	Extensions *CreateWorkloadArtefactVersionExtensions `json:"extensions,omitempty"`

	// Image An optional default image to assign to any containers in the workload that do not have an image set or whose image is '.'
	Image *string `json:"image,omitempty"`

	// Name The Artefact name.
	Name string `json:"name"`

	// Overrides An optional Json object containing the workload overrides. Score v1b1 is expected.
	Overrides *map[string]interface{} `json:"overrides,omitempty"`

	// PropertyOverrides An optional set of path overrides that will be applied to the workload.
	PropertyOverrides *map[string]interface{} `json:"property_overrides,omitempty"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// Spec A Json object containing the workload specification. Score v1b1 is expected.
	Spec map[string]interface{} `json:"spec"`

	// Type The Artefact Version type.
	Type string `json:"type"`

	// Version (Optional) The Artefact Version.
	Version *string `json:"version,omitempty"`
}

// CreateWorkloadArtefactVersionExtensions Humanitec workload extensions for the Workload Artefact Version. These can be used to override the profile, or workload module spec and resource attributes.
type CreateWorkloadArtefactVersionExtensions struct {
	// ApiVersion The api version describing the format of the extensions.
	ApiVersion string `json:"apiVersion"`

	// Profile An optional override for the workload profile
	Profile *string `json:"profile,omitempty"`

	// Spec A map of additional workload spec fields that will be merged.
	Spec *map[string]interface{} `json:"spec,omitempty"`
}

// DeltaMetadataRequest defines model for DeltaMetadataRequest.
type DeltaMetadataRequest struct {
	Archived       *bool          `json:"archived,omitempty"`
	Contributers   *[]string      `json:"contributers"`
	CreatedAt      *time.Time     `json:"created_at,omitempty"`
	CreatedBy      *string        `json:"created_by,omitempty"`
	EnvId          *EnvironmentID `json:"env_id,omitempty"`
	LastModifiedAt *time.Time     `json:"last_modified_at,omitempty"`
	Name           *string        `json:"name,omitempty"`
	Shared         *bool          `json:"shared,omitempty"`
}

// DeltaMetadataResponse defines model for DeltaMetadataResponse.
type DeltaMetadataResponse struct {
	Archived       bool           `json:"archived"`
	Contributers   *[]string      `json:"contributers,omitempty"`
	CreatedAt      time.Time      `json:"created_at"`
	CreatedBy      string         `json:"created_by"`
	EnvId          *EnvironmentID `json:"env_id,omitempty"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	Name           *string        `json:"name,omitempty"`
	Shared         *bool          `json:"shared,omitempty"`
}

// DeltaRequest A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Delta.>,
//	  "metadata": {
//	    <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//	  }
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type DeltaRequest struct {
	// Id Ignored, but can be provided.
	Id       *string               `json:"id,omitempty"`
	Metadata *DeltaMetadataRequest `json:"metadata,omitempty"`

	// Modules ModuleDeltas groups the different operations together.
	Modules *ModuleDeltasRequest   `json:"modules,omitempty"`
	Shared  *[]UpdateActionRequest `json:"shared"`
}

// DeltaResponse A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Delta.>,
//	  "metadata": {
//	    <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//	  }
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type DeltaResponse struct {
	// Id A unique ID for the Delta
	Id       string                `json:"id"`
	Metadata DeltaMetadataResponse `json:"metadata"`

	// Modules ModuleDeltas groups the different operations together.
	Modules ModuleDeltasResponse   `json:"modules"`
	Shared  []UpdateActionResponse `json:"shared"`
}

// DeployConditionRequest A deploy condition for the workload
//
// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
//
// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
type DeployConditionRequest struct {
	Success *string `json:"success,omitempty"`
	Timeout *int    `json:"timeout,omitempty"`
	When    *string `json:"when,omitempty"`
}

// DeployConditionResponse A deploy condition for the workload
//
// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
//
// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
type DeployConditionResponse struct {
	Success string `json:"success"`
	Timeout int    `json:"timeout"`
	When    string `json:"when"`
}

// DeploymentErrorResponse Error happening during deployment.
type DeploymentErrorResponse struct {
	Code      string `json:"code"`
	ErrorType string `json:"error_type"`
	Message   string `json:"message"`
	ObjectId  string `json:"object_id"`
	Scope     string `json:"scope"`
	Summary   string `json:"summary"`
}

// DeploymentPipelineReferenceRequest defines model for DeploymentPipelineReferenceRequest.
type DeploymentPipelineReferenceRequest struct {
	// Id The ID of the Pipeline
	Id *string `json:"id,omitempty"`

	// JobId The ID of the Pipeline Job within the Run.
	JobId *string `json:"job_id,omitempty"`

	// RunId The ID of the Pipeline Run
	RunId *string `json:"run_id,omitempty"`

	// StepIndex The index of the step with in the Job.
	StepIndex *int `json:"step_index,omitempty"`
}

// DeploymentPipelineReferenceResponse defines model for DeploymentPipelineReferenceResponse.
type DeploymentPipelineReferenceResponse struct {
	// Id The ID of the Pipeline
	Id string `json:"id"`

	// JobId The ID of the Pipeline Job within the Run.
	JobId string `json:"job_id"`

	// RunId The ID of the Pipeline Run
	RunId string `json:"run_id"`

	// StepIndex The index of the step with in the Job.
	StepIndex int `json:"step_index"`
}

// DeploymentRequest Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentRequest struct {
	// Comment An optional comment to help communicate the purpose of the Deployment.
	Comment *string `json:"comment,omitempty"`

	// DeltaId ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId  *string                             `json:"delta_id,omitempty"`
	Pipeline *DeploymentPipelineReferenceRequest `json:"pipeline,omitempty"`

	// SetId ID of the Deployment Set describing the state of the Environment after Deployment.
	SetId *string `json:"set_id,omitempty"`

	// ValueSetVersionId ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// DeploymentResponse Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentResponse struct {
	// Comment An optional comment to help communicate the purpose of the Deployment.
	Comment string `json:"comment"`

	// CreatedAt The Timestamp of when the Deployment was initiated.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who initiated the Deployment.
	CreatedBy string `json:"created_by"`

	// DeltaId ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId *string `json:"delta_id,omitempty"`

	// EnvId The Environment where the Deployment occurred.
	EnvId        string `json:"env_id"`
	ExportFile   string `json:"export_file"`
	ExportStatus string `json:"export_status"`

	// FromId The ID of the Deployment that this Deployment was based on.
	FromId string `json:"from_id"`

	// Id The ID of the Deployment.
	Id       string                               `json:"id"`
	Pipeline *DeploymentPipelineReferenceResponse `json:"pipeline,omitempty"`

	// SetId ID of the Deployment Set describing the state of the Environment after Deployment.
	SetId string `json:"set_id"`

	// Status The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.
	Status string `json:"status"`

	// StatusChangedAt The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.
	StatusChangedAt string `json:"status_changed_at"`

	// ValueSetVersionId ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// DriverDefinitionResponse DriverDefinition describes the resource driver.
//
// Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
type DriverDefinitionResponse struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// Id The ID for this driver. Is used as `driver_type`.
	Id string `json:"id"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// OrgId The Organization this driver exists under. Useful as public drivers are accessible to other orgs.
	OrgId string `json:"org_id"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see `target`.
	Target *string `json:"target,omitempty"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// EnvironmentBaseRequest defines model for EnvironmentBaseRequest.
type EnvironmentBaseRequest struct {
	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentBaseResponse defines model for EnvironmentBaseResponse.
type EnvironmentBaseResponse struct {
	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentDefinitionRequest defines model for EnvironmentDefinitionRequest.
type EnvironmentDefinitionRequest struct {
	// FromDeployId Defines the existing Deployment the new Environment will be based on.
	FromDeployId string `json:"from_deploy_id"`

	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentID defines model for EnvironmentID.
type EnvironmentID = string

// EnvironmentResponse Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.
type EnvironmentResponse struct {
	// CreatedAt The timestamp in UTC of when the Environment was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The user who created the Environment
	CreatedBy string `json:"created_by"`

	// FromDeploy Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	FromDeploy *DeploymentResponse `json:"from_deploy,omitempty"`

	// Id The ID the Environment is referenced as.
	Id string `json:"id"`

	// LastDeploy Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	LastDeploy *DeploymentResponse `json:"last_deploy,omitempty"`

	// Name The Human-friendly name for the Environment.
	Name string `json:"name"`

	// Type The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentRuntimeInfoResponse EnvironmentRuntimeInfo
type EnvironmentRuntimeInfoResponse struct {
	Error  *string `json:"error,omitempty"`
	Id     string  `json:"id"`
	Paused bool    `json:"paused"`
	Status *string `json:"status,omitempty"`
}

// EnvironmentTypeRequest Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeRequest struct {
	// Description A Human-readable description of the Environment Type
	Description *string `json:"description,omitempty"`

	// Id The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// EnvironmentTypeResponse Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeResponse struct {
	// Description A Human-readable description of the Environment Type
	Description string `json:"description"`

	// Id The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// ErrorInfoResponse ErrorInfo is returned by a handler in case of an error.
type ErrorInfoResponse struct {
	// Error An error details
	Error string `json:"error"`
}

// ErrorResponse A standard error response
type ErrorResponse struct {
	// Details An optional payload of metadata associated with the error.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A short code representing the class of error. This code can be used for tracking and observability or to
	// find appropriate troubleshooting documentation.
	Error string `json:"error"`

	// Message A human-readable explanation of the error.
	Message string `json:"message"`
}

// EventBaseRequest Properties which identify an event .
type EventBaseRequest struct {
	// Scope Event scope
	Scope *string `json:"scope,omitempty"`

	// Type Event type
	Type *string `json:"type,omitempty"`
}

// EventBaseResponse Properties which identify an event .
type EventBaseResponse struct {
	// Scope Event scope
	Scope string `json:"scope"`

	// Type Event type
	Type string `json:"type"`
}

// EventResponse Events available for triggering automated jobs.
type EventResponse struct {
	// Properties List of event properties which can be used as variables for this event
	Properties []string `json:"properties"`

	// Scope Event scope
	Scope string `json:"scope"`

	// Type Event type
	Type string `json:"type"`
}

// GCPAuthRequest Credentials to authenticate GCP Secret Manager.
type GCPAuthRequest struct {
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}

// GCPSMRequest GCP Secret Manager specification.
type GCPSMRequest struct {
	// Auth Credentials to authenticate GCP Secret Manager.
	Auth      *GCPAuthRequest `json:"auth,omitempty"`
	ProjectId *string         `json:"project_id,omitempty"`
}

// GCPSMResponse GCP Secret Manager specification.
type GCPSMResponse struct {
	ProjectId *string `json:"project_id,omitempty"`
}

// HumanitecErrorResponse HumanitecError represents a standard Humanitec Error
type HumanitecErrorResponse struct {
	// Details (Optional) Additional information is enclosed here.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A short code to help with error identification.
	Error string `json:"error"`

	// Message A Human readable message about the error.
	Message string `json:"message"`
}

// HumanitecPublicKey HumanitecPublicKey stores a Public Key Humanitec shared with an organization.
type HumanitecPublicKey struct {
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	ExpiredAt time.Time `json:"expired_at"`
	Id        string    `json:"id"`
	PubKey    string    `json:"pub_key"`
	UpdatedAt time.Time `json:"updated_at"`
}

// HumanitecResponse Humanitec built-in Secret Store specification.
type HumanitecResponse = map[string]interface{}

// ImageBuildRequest DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildRequest struct {
	// Branch The branch name of the branch the build was built on
	Branch *string `json:"branch,omitempty"`

	// Commit The commit ID that this build was built from.
	Commit *string `json:"commit,omitempty"`

	// Image The fully qualified Image URL including registry, repository and tag.
	Image *string `json:"image,omitempty"`

	// Tags The tag that the build was built from.
	Tags *[]string `json:"tags,omitempty"`
}

// ImageBuildResponse DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildResponse struct {
	// AddedAt The time when the build was added to Humanitec.
	AddedAt *string `json:"added_at,omitempty"`

	// Branch The branch name of the branch the build was built on
	Branch string `json:"branch"`

	// Commit The commit ID that this build was built from.
	Commit string `json:"commit"`

	// Image The fully qualified Image URL including registry, repository and tag.
	Image string `json:"image"`

	// Tags The tag that the build was built from.
	Tags []string `json:"tags"`
}

// ImageResponse DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Container Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.
type ImageResponse struct {
	// AddedAt The time the first build of this Image was added to the organization
	AddedAt string `json:"added_at"`

	// Builds A list of Image Builds ordered by addition date.
	Builds []ImageBuildResponse `json:"builds"`

	// Id The ID used to group different builds of the same Image together.
	Id string `json:"id"`

	// Source The Image Source that this Image is added via
	Source string `json:"source"`
}

// JSONFieldRequest defines model for JSONFieldRequest.
type JSONFieldRequest map[string]interface{}

// JSONFieldResponse defines model for JSONFieldResponse.
type JSONFieldResponse map[string]interface{}

// JSONPatchResponse defines model for JSONPatchResponse.
type JSONPatchResponse struct {
	Op    string       `json:"op"`
	Path  string       `json:"path"`
	Value *interface{} `json:"value,omitempty"`
}

// JSONPatchesResponse defines model for JSONPatchesResponse.
type JSONPatchesResponse = []JSONPatchResponse

// Key An object containing the details of a Key.
type Key struct {
	// CreatedAt Time of the Key being registered.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User ID of user that added the Key.
	CreatedBy string `json:"created_by"`

	// ExpiredAt Time when the Key should be replaced (2 years after its creation).
	ExpiredAt time.Time `json:"expired_at"`

	// Fingerprint The Key fingerprint (sha256 hash of the DER representation of the key).
	Fingerprint string `json:"fingerprint"`

	// PublicKey A pcks8 RSA ublic key PEM encoded.
	PublicKey string `json:"public_key"`
}

// KeyCreateBody defines model for KeyCreateBody.
type KeyCreateBody struct {
	// PublicKey A pcks8 RSA public key PEM encoded (as the ones produced by openssl), whose module length is greater or equal than 4096 bits.
	PublicKey string `json:"public_key"`
}

// LogoResponse defines model for LogoResponse.
type LogoResponse struct {
	DarkUrl  *string `json:"dark_url,omitempty"`
	LightUrl *string `json:"light_url,omitempty"`
}

// MatchingCriteriaResponse Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
//
// Matching criteria are made up in order of specificity with least specific first:
//
// - Environment Type (`env_type`)
//
// - Application (`app_id`)
//
// - Environment (`env_id`)
//
// - Resource (`res_id`)
//
// When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
//
// **NOTE:**
//
// Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
type MatchingCriteriaResponse struct {
	// AppId (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// Class (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
	Class string `json:"class"`

	// EnvId (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// Id Matching Criteria ID
	Id string `json:"id"`

	// ResId (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// MatchingCriteriaRuleRequest MatchingCriteriaRule describes Matching Criteria rules.
type MatchingCriteriaRuleRequest struct {
	// AppId (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// Class (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
	Class *string `json:"class,omitempty"`

	// EnvId (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// ResId (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// ModuleDeltasRequest ModuleDeltas groups the different operations together.
type ModuleDeltasRequest struct {
	Add    *map[string]*ModuleRequest        `json:"add"`
	Remove *[]string                         `json:"remove"`
	Update *map[string][]UpdateActionRequest `json:"update"`
}

// ModuleDeltasResponse ModuleDeltas groups the different operations together.
type ModuleDeltasResponse struct {
	Add    map[string]ModuleResponse         `json:"add"`
	Remove []string                          `json:"remove"`
	Update map[string][]UpdateActionResponse `json:"update"`
}

// ModuleRequest Module single workload data
type ModuleRequest struct {
	// Deploy A deploy condition for the workload
	//
	// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
	//
	// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
	Deploy    *DeployConditionRequest `json:"deploy,omitempty"`
	Externals *map[string]interface{} `json:"externals"`
	Profile   *string                 `json:"profile,omitempty"`
	Spec      *map[string]interface{} `json:"spec"`
}

// ModuleResponse Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module
type ModuleResponse struct {
	// Deploy A deploy condition for the workload
	//
	// Possible values for "when" are: - "before", deployed before other workloads - "deploy", deployed in-parallel with other workloads (default) - "after", deployed after other workloads
	//
	// Possible values for "success" are: - "deploy", workload deployed - "available", workload available - "complete", workload complete (often used with jobs)
	Deploy               *DeployConditionResponse      `json:"deploy,omitempty"`
	Externals            map[string]interface{}        `json:"externals"`
	Profile              string                        `json:"profile"`
	Spec                 map[string]interface{}        `json:"spec"`
	AdditionalProperties map[string]ControllerResponse `json:"-"`
}

// NewServiceUserRequest NewServiceUser holds the definition of a new service user.
type NewServiceUserRequest struct {
	// Email The email address that should get notifications about this service user. (Optional)
	Email *string `json:"email,omitempty"`

	// Name The name that should be shown for this service user.
	Name string `json:"name"`

	// Role The role that the service user should have on the organization it is created in
	Role string `json:"role"`
}

// NodeBodyResponse NodeBody represents a node of a Resource Dependency Graph.
type NodeBodyResponse struct {
	Class          string                 `json:"class"`
	CriteriaId     string                 `json:"criteria_id"`
	DefId          string                 `json:"def_id"`
	DependsOn      []string               `json:"depends_on"`
	Driver         map[string]interface{} `json:"driver"`
	DriverAccount  *string                `json:"driver_account,omitempty"`
	DriverType     string                 `json:"driver_type"`
	Guresid        string                 `json:"guresid"`
	Id             string                 `json:"id"`
	Resource       map[string]interface{} `json:"resource"`
	ResourceSchema map[string]interface{} `json:"resource_schema"`
	Target         *string                `json:"target,omitempty"`
	Type           string                 `json:"type"`
}

// OrganizationResponse An Organization is the top level object in Humanitec. All other objects belong to an Organization.
type OrganizationResponse struct {
	// CreatedAt Timestamp when the Organization was created.
	CreatedAt *time.Time `json:"created_at"`

	// CreatedBy User ID that created the Organization.
	CreatedBy string `json:"created_by"`

	// Id Unique ID for the Organization.
	Id   string       `json:"id"`
	Logo LogoResponse `json:"logo"`

	// Name Human friendly name for the Organization.
	Name string `json:"name"`

	// TrialExpiresAt Timestamp the trial expires at.
	TrialExpiresAt *time.Time `json:"trial_expires_at"`
}

// PatchResourceDefinitionRequestRequest PatchResourceDefinitionRequest describes a ResourceDefinition change request.
type PatchResourceDefinitionRequestRequest struct {
	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// Name (Optional) Resource display name
	Name *string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource or if they have the same dependent resources.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`
}

// Pipeline An object containing the details of a Pipeline.
type Pipeline struct {
	// AppId The id of the Application containing this Pipeline.
	AppId string `json:"app_id"`

	// CreatedAt The date and time when the Pipeline was created.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Pipeline.
	Etag string `json:"etag"`

	// Id The id of the Pipeline.
	Id string `json:"id"`

	// Metadata The map of key value pipeline additional information
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Name The name of the Pipeline.
	Name string `json:"name"`

	// OrgId The id of the Organization containing this Pipeline.
	OrgId string `json:"org_id"`

	// Status The current status of the Pipeline.
	Status string `json:"status"`

	// TriggerTypes The list of trigger types in the current schema.
	TriggerTypes []string `json:"trigger_types"`

	// Version The unique id of the current Pipeline Version.
	Version string `json:"version"`
}

// PipelineApprovalRequest An approval object
type PipelineApprovalRequest struct {
	// AppId The id of the Application.
	AppId string `json:"app_id"`

	// ApprovedAt The date and time when the request was approved or denied.
	ApprovedAt *time.Time `json:"approved_at,omitempty"`

	// ApprovedBy The user who approved or denied the request.
	ApprovedBy *string `json:"approved_by,omitempty"`

	// CreatedAt The date and time when the approval request was created.
	CreatedAt time.Time `json:"created_at"`

	// EnvId The environment for which the approver needs to have deploy permission to approve the job.
	EnvId string `json:"env_id"`

	// Id The id of the approval object.
	Id string `json:"id"`

	// JobId The id of the Run's Job.
	JobId string `json:"job_id"`

	// Message A human-readable message indicating the reason for approval.
	Message string `json:"message"`

	// OrgId The id of the Organization.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// RunId The id of the Pipeline's Run.
	RunId string `json:"run_id"`

	// Status The current status of the approval request.
	Status PipelineApprovalRequestStatus `json:"status"`
}

// PipelineApprovalRequestStatus The current status of the approval request.
type PipelineApprovalRequestStatus string

// PipelineCriteria defines model for PipelineCriteria.
type PipelineCriteria struct {
	// Id The unique id of the criteria within this Pipeline.
	Id string `json:"id"`

	// PipelineId The id of the Pipeline tied to this deployment request criteria.
	PipelineId string `json:"pipeline_id"`

	// PipelineName The current display name of the Pipeline.
	PipelineName string `json:"pipeline_name"`

	// Trigger The trigger to call
	Trigger string `json:"trigger"`
	union   json.RawMessage
}

// PipelineCriteriaCreateBody defines model for PipelineCriteriaCreateBody.
type PipelineCriteriaCreateBody struct {
	// Trigger The trigger to call
	Trigger string `json:"trigger"`
	union   json.RawMessage
}

// PipelineDeploymentRequestCriteria A deployment request matching criteria for a Pipeline.
type PipelineDeploymentRequestCriteria struct {
	// AppId The id of the Application for which this criteria matches. If this Pipeline is defined in an Application, then this value can only be null or the id of the Application.
	AppId *string `json:"app_id,omitempty"`

	// DeploymentType The type of deployment that this criteria will match. Valid values are "deploy" and "redeploy". "redeploy"  applies only to deployment request to redeploy a previous deployment id while "deploy" will apply to all other requests that include a Delta or Deployment Set. If not defined, all deployment types will match.
	DeploymentType *string `json:"deployment_type,omitempty"`

	// EnvId The exact id of the Environment which this criteria will match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType The Environment Type that this criteria will match. If defined, this criteria will only apply to Environments that have this type.
	EnvType *string `json:"env_type,omitempty"`

	// Id The unique id of the criteria within this Pipeline.
	Id string `json:"id"`

	// PipelineId The id of the Pipeline tied to this deployment request criteria.
	PipelineId string `json:"pipeline_id"`

	// PipelineName The current display name of the Pipeline.
	PipelineName string `json:"pipeline_name"`

	// Trigger The trigger to call
	Trigger string `json:"trigger"`
}

// PipelineDeploymentRequestCriteriaCreateBody The details required to create a new deployment request matching criteria for a Pipeline.
type PipelineDeploymentRequestCriteriaCreateBody struct {
	// AppId The id of the Application for which this criteria matches. If this Pipeline is defined in an Application, then this value can only be null or the id of the Application.
	AppId *string `json:"app_id,omitempty"`

	// DeploymentType The type of deployment that this criteria will match. Valid values are "deploy" and "redeploy". "redeploy"  applies only to deployment request to redeploy a previous deployment id while "deploy" will apply to all other requests that include a Delta or Deployment Set. If not defined, all deployment types will match.
	DeploymentType *string `json:"deployment_type,omitempty"`

	// EnvId The exact id of the Environment which this criteria will match.
	EnvId *string `json:"env_id,omitempty"`

	// EnvType The Environment Type that this criteria will match. If defined, this criteria will only apply to Environments that have this type.
	EnvType *string `json:"env_type,omitempty"`
}

// PipelineJob defines model for PipelineJob.
type PipelineJob struct {
	// AppId The id of the Application containing this Job.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Job was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Job entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Job was first created within the Run.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Job.
	Etag string `json:"etag"`

	// Id The id of the Job within the Run.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Job.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunId The id of the Run containing this Job.
	RunId string `json:"run_id"`

	// Status The current status of this Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// Steps The collection of Steps that completed along with the current Step being executed.
	Steps []PipelineStep `json:"steps"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// WaitingFor An event on which job is waiting
	WaitingFor *string `json:"waiting_for,omitempty"`
}

// PipelineJobPartial Partial details of a Job within the Run. The full details, including steps, can be retrieved using the GetPipelineJob operation.
type PipelineJobPartial struct {
	// AppId The id of the Application containing this Job.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Job was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Job entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Job was first created within the Run.
	CreatedAt time.Time `json:"created_at"`

	// Etag The current entity tag value for this Job.
	Etag string `json:"etag"`

	// Id The id of the Job within the Run.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Job.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunId The id of the Run containing this Job.
	RunId string `json:"run_id"`

	// Status The current status of this Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// WaitingFor An event on which job is waiting
	WaitingFor *string `json:"waiting_for,omitempty"`
}

// PipelineRun Details of a Run within the Pipeline.
type PipelineRun struct {
	// AppId The id of the Application containing this Run.
	AppId string `json:"app_id"`

	// CancellationRequestedAt The date and time when cancellation of this Run was requested.
	CancellationRequestedAt *time.Time `json:"cancellation_requested_at,omitempty"`

	// CompletedAt The date and time when this Run entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// ConcurrencyGroup The optional concurrency group for this run within the application
	ConcurrencyGroup *string `json:"concurrency_group,omitempty"`

	// CreatedAt The date and time when this Run was first created.
	CreatedAt time.Time `json:"created_at"`

	// EnvIds Environments linked to this Pipeline Run through input parameters or step executions.
	EnvIds []string `json:"env_ids"`

	// Etag The current entity tag value for this Run.
	Etag string `json:"etag"`

	// ExecutingAt The date and time when this Run entered executing status.
	ExecutingAt *time.Time `json:"executing_at,omitempty"`

	// Id The unique id of the Run.
	Id string `json:"id"`

	// Inputs The inputs that were provided for this Run.
	Inputs map[string]interface{} `json:"inputs"`

	// OrgId The id of the Organization containing this Run.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline associated with the Run.
	PipelineId string `json:"pipeline_id"`

	// PipelineVersion The id of the Pipeline Version associated with the Run.
	PipelineVersion string `json:"pipeline_version"`

	// RunAs The user id that the pipeline run is executing as when it calls Humanitec APIs.
	RunAs string `json:"run_as"`

	// Status The current status of this Run.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Run.
	TimeoutSeconds int `json:"timeout_seconds"`

	// Trigger The trigger type that was triggered this Run to start.
	Trigger string `json:"trigger"`

	// WaitingFor Aggregated events on which run's jobs are waiting for
	WaitingFor map[string]string `json:"waiting_for"`
}

// PipelineRunCreateBody The parameters for creating a new Run for the Pipeline.
type PipelineRunCreateBody struct {
	// Inputs The inputs provided for this Run.
	Inputs map[string]interface{} `json:"inputs"`
}

// PipelineRunCreateByDeploymentRequestCriteriaBody Trigger the pipeline that has a deployment_request trigger and criteria that match this target environment. If "delta_id" or "set_id" is provided, the matching criteria must support deployment type "deploy". If "deployment_id" is provided, the matching criteria must support deployment type "re-deploy".
// When "delta_id" is provided, the inputs to the Pipeline Run will be "env_id", "comment", "delta_id" and "value_set_version_id" if provided. When "deployment_id" is provided, the inputs to the Pipeline Run will be "env_id", "comment", "deployment_id", with "set_id", "value_set_version_id" being retrieved from the deployment itself. When "set_id" is provided, the inputs to the Pipeline Run will be "env_id", "comment", "set_id", and "value_set_version_id" if provided.
type PipelineRunCreateByDeploymentRequestCriteriaBody struct {
	// Comment An optional comment to apply to the Deployment.
	Comment *string `json:"comment,omitempty"`

	// DeltaId A deployment delta to apply to the target environment. This delta must already exist. This field is mutually exclusive with "deployment_id" and "set_id".
	DeltaId *string `json:"delta_id,omitempty"`

	// DeploymentId An existing deployment to redeploy into the target environment. The deployment set and value set will be copied. This field is mutually exclusive with "delta_id" and "set_id".
	DeploymentId *string `json:"deployment_id,omitempty"`

	// EnvId The target environment within the Application to deploy to.
	EnvId *string `json:"env_id,omitempty"`

	// Environment The target environment within the Application to deploy to.
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// SetId A direct deployment set to apply to the target environment. This deployment set must already exist. This field is mutually exclusive with "delta_id" and "set_id".
	SetId *string `json:"set_id,omitempty"`

	// ValueSetVersionId The exact value set version to use when deploying to the target environment. This value set version must exist. This field can only be used when "delta_id" or "set_id" is specified.
	ValueSetVersionId *string `json:"value_set_version_id,omitempty"`
}

// PipelineRunCreateByTriggerCriteriaBody The parameters for creating a new Run based on trigger and inputs.
type PipelineRunCreateByTriggerCriteriaBody struct {
	// Trigger The trigger to call
	Trigger string `json:"trigger"`
	union   json.RawMessage
}

// PipelineStep A Step within a Job.
type PipelineStep struct {
	// CompletedAt The date and time when this Step entered a successful, failed, or cancelled status.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt The date and time when this Step was first created within the Job.
	CreatedAt time.Time `json:"created_at"`

	// Index The index of the Step within the Pipeline Schema.
	Index int `json:"index"`

	// Name The name of the step or a generated default.
	Name string `json:"name"`

	// Status The current status of this Step within the Job.
	Status string `json:"status"`

	// StatusMessage A human-readable message indicating the reason for the status.
	StatusMessage string `json:"status_message"`

	// TimeoutSeconds The timeout for this Job.
	TimeoutSeconds int `json:"timeout_seconds"`

	// Uses The action used by this step.
	Uses string `json:"uses"`
}

// PipelineStepLog An item from the logs of a Step.
type PipelineStepLog struct {
	// At The date and time when this message was emitted or captured.
	At time.Time `json:"at"`

	// Level The log level of the message.
	Level string `json:"level"`

	// Message The content of the message.
	Message string `json:"message"`
}

// PipelineVersion An object containing the details of a Pipeline.
type PipelineVersion struct {
	// AppId The id of the Application containing this Run.
	AppId string `json:"app_id"`

	// CreatedAt The date and time when the specific pipeline version was created.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User id of the pipeline version.
	CreatedBy string `json:"created_by"`

	// Id The unique id of the current Pipeline Version.
	Id string `json:"id"`

	// OrgId The id of the Organization containing this Run.
	OrgId string `json:"org_id"`

	// PipelineId The id of the Pipeline associated with the Run.
	PipelineId string `json:"pipeline_id"`
}

// PlainDeltaResponse Similar to the delta response, except the id and metadata properties.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "modules" : {
//	    "add" : {
//	      <ID of Module to add to the Deployment Set> : {
//	        <An entire Modules object>
//	      }
//	    },
//	    "remove": [
//	      <An array of Module IDs that should be removed from the Deployment Set>
//	    ],
//	   "update": {
//	      <ID of Module already in the Set to be updated> : [
//	        <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//	      ]
//	    }
//	  }
//	}
//
// ```
type PlainDeltaResponse struct {
	// Modules ModuleDeltas groups the different operations together.
	Modules ModuleDeltasResponse   `json:"modules"`
	Shared  []UpdateActionResponse `json:"shared"`
}

// PodStateResponse PodState represents single pod status
type PodStateResponse struct {
	ContainerStatuses []map[string]interface{} `json:"containerStatuses"`
	Phase             string                   `json:"phase"`
	PodName           string                   `json:"podName"`
	Revision          int                      `json:"revision"`
	Status            string                   `json:"status"`
}

// ProvisionDependenciesRequest ProvisionDependencies defines resources which are needed to be co-provisioned with the current resource.
type ProvisionDependenciesRequest struct {
	// IsDependent If the co-provisioned resource is dependendent on the current one.
	IsDependent *bool `json:"is_dependent,omitempty"`

	// MatchDependents If the resources dependant on the main resource, are also dependant on the co-provisioned one.
	MatchDependents *bool `json:"match_dependents,omitempty"`
}

// ProvisionDependenciesResponse ProvisionDependencies defines resources which are needed to be co-provisioned with the current resource.
type ProvisionDependenciesResponse struct {
	// IsDependent If the co-provisioned resource is dependendent on the current one.
	IsDependent bool `json:"is_dependent"`

	// MatchDependents If the resources dependant on the main resource, are also dependant on the co-provisioned one.
	MatchDependents *bool `json:"match_dependents,omitempty"`
}

// PublicKey PublicKey stores a Public Key an organization shares with Humanitec.
type PublicKey struct {
	CreatedAt time.Time `json:"created_at"`
	CreatedBy string    `json:"created_by"`
	ExpiredAt time.Time `json:"expired_at"`

	// Fingerprint It's the hexadecimal representation of the sha256 hash of the DER representation of the key, it's computed and stored when a new key is uploaded.
	Fingerprint string `json:"fingerprint"`
	Id          string `json:"id"`
	Key         string `json:"key"`
}

// RegistryCredsResponse RegistryCreds represents current registry credentials (either, username- or token-based).
type RegistryCredsResponse struct {
	// Expires Account credentials expiration timestamp.
	Expires *string `json:"expires"`

	// Password Account password or token secret.
	Password string `json:"password"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets ClusterSecretsMapResponse `json:"secrets"`

	// Username Security account login or token.
	Username string `json:"username"`
}

// RegistryRequest Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryRequest struct {
	// Creds AccountCreds represents an account credentials (either, username- or token-based).
	Creds *AccountCredsRequest `json:"creds,omitempty"`

	// EnableCi Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi *bool `json:"enable_ci,omitempty"`

	// Id Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapRequest `json:"secrets,omitempty"`

	// Type Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// RegistryResponse Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryResponse struct {
	// CreatedAt The timestamp of when this record was created.
	CreatedAt *string `json:"created_at"`

	// CreatedBy The user who created this record.
	CreatedBy *string `json:"created_by,omitempty"`

	// EnableCi Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi bool `json:"enable_ci"`

	// Id Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// Secrets ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapResponse `json:"secrets,omitempty"`

	// Type Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// ResourceAccountResponse ResourceAccount represents the account being used to access a resource.
//
// Resource Accounts hold credentials that are required to provision and manage resources.
type ResourceAccountResponse struct {
	// CreatedAt The timestamp of when the account was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The ID of the user who created the account.
	CreatedBy string `json:"created_by"`

	// Id Unique identifier for the account (in scope of the organization it belongs to).
	Id string `json:"id"`

	// IsUsed Indicates if this account is being used (referenced) by any resource definition.
	IsUsed bool `json:"is_used"`

	// Name Display name.
	Name string `json:"name"`

	// Type The type of the account
	Type string `json:"type"`
}

// ResourceDefinitionChangeResponse ResourceDefinitionChange describes the effects of a Resource Definition or Matching Criteria update/deletion.
type ResourceDefinitionChangeResponse struct {
	// AppId The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// EnvId The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// FromDef The Resource Definition that this resource was provisioned from.
	FromDef string `json:"from_def"`

	// ResId The ID of the resource
	ResId string `json:"res_id"`

	// ToDef The Resource Definition that resource *will be* provisioned from if the change is applied.
	ToDef string `json:"to_def"`
}

// ResourceDefinitionResponse A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.
//
// The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
type ResourceDefinitionResponse struct {
	// CreatedAt The timestamp of when this record has been created.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy The user who created this record.
	CreatedBy string `json:"created_by"`

	// Criteria (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaResponse `json:"criteria,omitempty"`

	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsResponse `json:"driver_inputs,omitempty"`

	// DriverType The driver to be used to create the resource.
	DriverType string `json:"driver_type"`

	// Id The Resource Definition ID.
	Id string `json:"id"`

	// IsDefault Indicates this definition is a built-in one (provided by Humanitec).
	IsDefault bool `json:"is_default"`

	// IsDeleted Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.
	IsDeleted bool `json:"is_deleted"`

	// Name The display name.
	Name string `json:"name"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.
	Provision *map[string]ProvisionDependenciesResponse `json:"provision,omitempty"`

	// Type The Resource Type.
	Type string `json:"type"`
}

// ResourceProvisionRequestRequest ResourceProvisionRequest is the payload passed to the resource provisioner, specifying the resources to be provisioned.
type ResourceProvisionRequestRequest struct {
	// Class (Optional) A resource class
	Class *string `json:"class,omitempty"`
	Id    string  `json:"id"`

	// Resource (Optional) The input parameters for the resource passed from the deployment set.
	Resource *map[string]interface{} `json:"resource,omitempty"`
	Type     string                  `json:"type"`
}

// ResourceTypeResponse Resources Types define the technology that Applications can have dependencies on.
//
// Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
type ResourceTypeResponse struct {
	// Category Category name (used to group similar resources on the UI).
	Category string `json:"category"`

	// InputsSchema A JSON Schema specifying the type-specific parameters for the driver (input).
	InputsSchema map[string]interface{} `json:"inputs_schema"`

	// Name Display name.
	Name string `json:"name"`

	// OutputsSchema A JSON Schema specifying the type-specific data passed to the deployment (output).
	OutputsSchema map[string]interface{} `json:"outputs_schema"`

	// Type Unique resource type identifier (system-wide, across all organizations).
	Type string `json:"type"`

	// Use Kind of dependency between resource of this type and a workload. It should be one of: `direct`, `indirect`, `implicit`.
	Use string `json:"use"`
}

// RoleRequest Role defines the role that will be used in request
type RoleRequest struct {
	Role *string `json:"role,omitempty"`
}

// RolesResponse defines model for RolesResponse.
type RolesResponse map[string]string

// RuntimeInfoContainerState Details about the container's current condition.
type RuntimeInfoContainerState struct {
	// Running Details about a running container.
	Running *RuntimeInfoContainerStateRunning `json:"running,omitempty"`

	// Terminated Details about a terminated container.
	Terminated *RuntimeInfoContainerStateTerminated `json:"terminated,omitempty"`

	// Waiting Details about a waiting container
	Waiting *RuntimeInfoControllerStateWaiting `json:"waiting,omitempty"`
}

// RuntimeInfoContainerStateRunning Details about a running container.
type RuntimeInfoContainerStateRunning struct {
	// StartedAt Time at which the container was last (re-)started.
	StartedAt *time.Time `json:"started_at,omitempty"`
}

// RuntimeInfoContainerStateTerminated Details about a terminated container.
type RuntimeInfoContainerStateTerminated struct {
	// ContainerId Container's ID in the format '<type>://<container_id>'.
	ContainerId *string `json:"container_id,omitempty"`

	// ExitCode Exit status from the last termination of the container.
	ExitCode *int `json:"exit_code,omitempty"`

	// FinishedAt Time at which the container last terminated.
	FinishedAt *time.Time `json:"finished_at,omitempty"`

	// Message Message regarding the last termination of the container.
	Message *string `json:"message,omitempty"`

	// Reason Reason from the last termination of the container.
	Reason *string `json:"reason,omitempty"`

	// Signal Signal from the last termination of the container.
	Signal *int `json:"signal,omitempty"`

	// StartedAt Time at which previous execution of the container started.
	StartedAt *time.Time `json:"started_at,omitempty"`
}

// RuntimeInfoContainerStatus Container status.
type RuntimeInfoContainerStatus struct {
	// Name Container name.
	Name string `json:"name"`

	// Ready If a container is ready to start accept traffic.
	Ready bool `json:"ready"`

	// RestartCount The number of times the container has been restarted.
	RestartCount *int `json:"restart_count,omitempty"`

	// State Details about the container's current condition.
	State RuntimeInfoContainerState `json:"state"`

	// Status Container status derived from its state and readiness.
	Status RuntimeInfoContainerStatusStatus `json:"status"`
}

// RuntimeInfoContainerStatusStatus Container status derived from its state and readiness.
type RuntimeInfoContainerStatusStatus string

// RuntimeInfoControllerStateWaiting Details about a waiting container
type RuntimeInfoControllerStateWaiting struct {
	// Message Message regarding why the container is not yet running.
	Message *string `json:"message,omitempty"`

	// Reason Reason the container is not yet running.
	Reason *string `json:"reason,omitempty"`
}

// RuntimeInfoModule Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module.
type RuntimeInfoModule struct {
	// Controllers A collection of workload controllers.
	Controllers map[string]RuntimeInfoModuleController `json:"controllers"`

	// Status Workload status.
	Status RuntimeInfoStatus `json:"status"`

	// StatusClass Status class, statuses are aggregated into classes
	StatusClass RuntimeInfoStatusClass `json:"status_class"`
}

// RuntimeInfoModuleController K8s controller.
type RuntimeInfoModuleController struct {
	// Kind Controller kind.
	Kind string `json:"kind"`

	// Message If a controller is not in a successful status, the reason from its condition.
	Message *string `json:"message,omitempty"`

	// Pods List of pods which belong to the controller.
	Pods *[]RuntimeInfoPod `json:"pods,omitempty"`

	// Replicas The most recently observed number of replicas.
	Replicas *int `json:"replicas,omitempty"`

	// Revision Revision of the controller.
	Revision *int `json:"revision,omitempty"`

	// Status Workload status.
	Status RuntimeInfoStatus `json:"status"`
}

// RuntimeInfoPod k8s pod.
type RuntimeInfoPod struct {
	// ContainerStatuses The list has one entry per container in the manifest.
	ContainerStatuses []RuntimeInfoContainerStatus `json:"containerStatuses"`

	// Phase A simple, high-level summary of where the Pod is in its lifecycle.
	Phase RuntimeInfoPodPhase `json:"phase"`

	// PodName Pod name.
	PodName string `json:"podName"`

	// Revision Revision of the pod.
	Revision *int                 `json:"revision,omitempty"`
	Status   RuntimeInfoPodStatus `json:"status"`
}

// RuntimeInfoPodPhase A simple, high-level summary of where the Pod is in its lifecycle.
type RuntimeInfoPodPhase string

// RuntimeInfoPodStatus defines model for RuntimeInfoPod.Status.
type RuntimeInfoPodStatus string

// RuntimeInfoResponseV1 RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
type RuntimeInfoResponseV1 struct {
	Modules   map[string]ModuleResponse `json:"modules"`
	Namespace string                    `json:"namespace"`
}

// RuntimeInfoResponseV2 RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
type RuntimeInfoResponseV2 struct {
	// Modules Modules represent a collection of workloads for the application.
	Modules map[string]RuntimeInfoModule `json:"modules"`

	// Namespace The namespace where the application runs.
	Namespace string `json:"namespace"`
}

// RuntimeInfoStatus Workload status.
type RuntimeInfoStatus string

// RuntimeInfoStatusClass Status class, statuses are aggregated into classes
type RuntimeInfoStatusClass string

// SecretReference It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
type SecretReference struct {
	// Ref Secret reference in the format of the target store. It can't be defined if `value` is defined.
	Ref *string `json:"ref,omitempty"`

	// Store Secret Store id. This can't be `humanitec` (our internal Secret Store). It's mandatory if `ref` is defined and can't be used if `value` is defined.
	Store *string `json:"store,omitempty"`

	// Value Value to store in the secret store. It can't be defined if `ref` is defined.
	Value *string `json:"value,omitempty"`

	// Version Optional, only valid if `ref` is defined. It's the version of the secret as defined in the target store.
	Version *string `json:"version,omitempty"`
}

// SecretStoreResponse Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec.
type SecretStoreResponse struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMResponse `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv   *AzureKVResponse `json:"azurekv,omitempty"`
	CreatedAt string           `json:"created_at"`
	CreatedBy string           `json:"created_by"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMResponse `json:"gcpsm,omitempty"`

	// Humanitec Humanitec built-in Secret Store specification.
	Humanitec *HumanitecResponse `json:"humanitec,omitempty"`
	Id        string             `json:"id"`
	Primary   bool               `json:"primary"`
	UpdatedAt string             `json:"updated_at"`
	UpdatedBy string             `json:"updated_by"`

	// Vault Vault specification.
	Vault *VaultResponse `json:"vault,omitempty"`
}

// SetResponse A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.
//
// Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.
//
// Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.
//
// **Basic Structure**
//
// ```
//
//	{
//	  "id": <ID of the Deployment Set>,
//	  "modules" : {
//	    <ID of Module> : {
//	      "profile": <Defines how the optional "spec" property is interpreted>
//	      "spec": {
//	        <Properties that depend on the "profile" property.>
//	      }
//	      "externals": {
//	        <External Resource Name> : {
//	          "type": <Resource Type>,
//	          "params": {
//	            <Properties which parametrize the resource depending on the Resource Type.>
//	          }
//	        }
//	      }
//	    }
//	  }
//	}
//
// ```
//
// For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
type SetResponse struct {
	// Id The ID which is a hash of the content of the Deployment Set.
	Id string `json:"id"`

	// Modules The Modules that make up the Set
	Modules map[string]ModuleResponse `json:"modules"`

	// Shared Resources that are shared across the set
	Shared map[string]interface{} `json:"shared"`

	// Version The version of the Deployment Set Schema to use. (Currently, only 0 is supported, and if omitted, version 0 is assumed.)
	Version int `json:"version"`
}

// TokenDefinitionRequest Defines the token to be created.
type TokenDefinitionRequest struct {
	// Description A description of the token. (Optional)
	Description *string `json:"description,omitempty"`

	// ExpiresAt The time the token expires. If not set, the token will not expire. (Optional)
	ExpiresAt *string `json:"expires_at,omitempty"`

	// Id Identifier of the token. Must be unique for the user.
	Id string `json:"id"`

	// Type The type of the token. Can only be "static".
	Type string `json:"type"`
}

// TokenInfoResponse Holds metadata about a token. `expires_at` is excluded if token does not expire.
type TokenInfoResponse struct {
	CreatedAt   string  `json:"created_at"`
	CreatedBy   string  `json:"created_by"`
	Description string  `json:"description"`
	ExpiresAt   *string `json:"expires_at,omitempty"`
	Id          string  `json:"id"`
	Type        string  `json:"type"`
}

// TokenResponse Token holds the token and its type.
type TokenResponse struct {
	Token string  `json:"token"`
	Type  *string `json:"type,omitempty"`
}

// UpdateActionRequest A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionRequest struct {
	From  *string      `json:"from,omitempty"`
	Op    *string      `json:"op,omitempty"`
	Path  *string      `json:"path,omitempty"`
	Value *interface{} `json:"value"`
}

// UpdateActionResponse A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionResponse struct {
	From  *string      `json:"from,omitempty"`
	Op    string       `json:"op"`
	Path  string       `json:"path"`
	Value *interface{} `json:"value,omitempty"`
}

// UpdateArtefactVersionPayloadRequest UpdateArtefactVersionPayload contains the `archived` field that should be set in the Artefact Version to update.
type UpdateArtefactVersionPayloadRequest struct {
	// Archived The Value of the archived value.
	Archived *bool `json:"archived"`
}

// UpdateDriverRequestRequest UpdateDriverRequest describes the update driver details request.
type UpdateDriverRequestRequest struct {
	// AccountTypes List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// InputsSchema A JSON Schema specifying the driver-specific input parameters.
	InputsSchema map[string]interface{} `json:"inputs_schema"`
	// Deprecated:
	IsPublic *bool `json:"is_public,omitempty"`

	// Target The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see 'target'.
	Target string `json:"target"`

	// Template If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
	Template *interface{} `json:"template,omitempty"`

	// Type The type of resource produced by this driver
	Type string `json:"type"`
}

// UpdateResourceAccountRequestRequest UpdateResourceAccountRequest describes the request to update the security account details.
type UpdateResourceAccountRequestRequest struct {
	// Credentials Credentials associated with the account.
	Credentials *map[string]interface{} `json:"credentials,omitempty"`

	// Name Display name.
	Name *string `json:"name,omitempty"`
}

// UpdateResourceDefinitionRequestRequest UpdateResourceDefinitionRequest describes a ResourceDefinition change request.
type UpdateResourceDefinitionRequestRequest struct {
	// DriverAccount (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account"`

	// DriverInputs ValuesSecretsRefs stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRefsRequest `json:"driver_inputs,omitempty"`

	// Name The display name.
	Name string `json:"name"`

	// Provision (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource or if they have the same dependent resources.
	Provision *map[string]ProvisionDependenciesRequest `json:"provision,omitempty"`
}

// UpdateSecretStorePayloadRequest Secret Store represents external secret management system used by an organization to store secrets referenced in Humanitec.
type UpdateSecretStorePayloadRequest struct {
	// Awssm AWS Secret Manager specification.
	Awssm *AWSSMRequest `json:"awssm,omitempty"`

	// Azurekv Azure Key Vault specification.
	Azurekv *AzureKVRequest `json:"azurekv,omitempty"`

	// Gcpsm GCP Secret Manager specification.
	Gcpsm *GCPSMRequest `json:"gcpsm,omitempty"`

	// Primary Defines whether the Secret Store is the primary secret management system for the organization.
	Primary *bool `json:"primary"`

	// Vault Vault specification.
	Vault *VaultRequest `json:"vault,omitempty"`
}

// UserInviteRequestRequest UserInviteRequest describes a new user invitation.
type UserInviteRequestRequest struct {
	// Email The email address of the user from the profile.
	Email string `json:"email"`

	// Role The role that this user would hold.
	Role string `json:"role"`
}

// UserInviteResponse UserInvite stores the invitation details.
type UserInviteResponse struct {
	// CreatedAt The timestamp this invitation was created.
	CreatedAt string `json:"created_at"`

	// CreatedBy The ID of the user who created this invitation.
	CreatedBy string `json:"created_by"`

	// Email The email address of the user from the profile.
	Email *string `json:"email,omitempty"`

	// ExpiresAt The timestamp this invitation would expire.
	ExpiresAt string `json:"expires_at"`

	// UserId The User ID for this user.
	UserId string `json:"user_id"`
}

// UserProfileExtendedRequest UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedRequest struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id *string `json:"id,omitempty"`

	// Name The name the user goes by
	Name       *string                 `json:"name,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
	Roles      *map[string]string      `json:"roles,omitempty"`

	// Type The type of the account. Could be user, service or system
	Type *string `json:"type,omitempty"`
}

// UserProfileExtendedResponse UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Name The name the user goes by
	Name       string                 `json:"name"`
	Properties map[string]interface{} `json:"properties"`
	Roles      RolesResponse          `json:"roles"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`
}

// UserProfileResponse UserProfile holds the profile information of a user
type UserProfileResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Name The name the user goes by
	Name string `json:"name"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`
}

// UserRoleRequest UserRole holds the mapping of role to user for a particular object.
type UserRoleRequest struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id *string `json:"id,omitempty"`

	// Invite The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// Name The name the user goes by
	Name *string `json:"name,omitempty"`

	// Role The role that this user holds
	Role *string `json:"role,omitempty"`

	// Type The type of the account. Could be user, service or system
	Type *string `json:"type,omitempty"`

	// User The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// UserRoleResponse UserRole holds the mapping of role to user for a particular object.
type UserRoleResponse struct {
	// CreatedAt The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// Email The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// Id The User ID for this user
	Id string `json:"id"`

	// Invite The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// Name The name the user goes by
	Name string `json:"name"`

	// Role The role that this user holds
	Role string `json:"role"`

	// Type The type of the account. Could be user, service or system
	Type string `json:"type"`

	// User The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// ValueCreatePayloadRequest defines model for ValueCreatePayloadRequest.
type ValueCreatePayloadRequest struct {
	Description *string `json:"description"`
	IsSecret    *bool   `json:"is_secret,omitempty"`
	Key         string  `json:"key"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValueEditPayloadRequest defines model for ValueEditPayloadRequest.
type ValueEditPayloadRequest struct {
	Description *string `json:"description"`
	IsSecret    *bool   `json:"is_secret,omitempty"`
	Key         *string `json:"key,omitempty"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValuePatchPayloadRequest defines model for ValuePatchPayloadRequest.
type ValuePatchPayloadRequest struct {
	Description *string `json:"description"`

	// SecretRef It stores sensitive value in the organization primary store or a reference to a sensitive value stored in a store registered under the organization.
	SecretRef *SecretReference `json:"secret_ref"`
	Value     *string          `json:"value"`
}

// ValueResponse Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
//
// Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
//
// For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
type ValueResponse struct {
	CreatedAt time.Time `json:"created_at"`

	// Description A Human friendly description of what the Shared Value is.
	Description string `json:"description"`

	// IsSecret Specified that the Shared Value contains a secret.
	IsSecret bool `json:"is_secret"`

	// Key The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.
	Key string `json:"key"`

	// SecretKey Location of the secret value in the secret store.
	SecretKey     *string `json:"secret_key"`
	SecretStoreId *string `json:"secret_store_id"`

	// SecretVersion Version of the current secret value as returned by the secret store.
	SecretVersion *string `json:"secret_version"`

	// Source Source of the value, "app" for app level, "env" for app env level.
	Source    ValueSource `json:"source"`
	UpdatedAt time.Time   `json:"updated_at"`

	// Value The value that will be stored. (Will be always empty for secrets.)
	Value string `json:"value"`
}

// ValueSetActionPayloadRequest defines model for ValueSetActionPayloadRequest.
type ValueSetActionPayloadRequest struct {
	Comment *string `json:"comment,omitempty"`
}

// ValueSetResponse defines model for ValueSetResponse.
type ValueSetResponse map[string]ValueResponse

// ValueSetVersionResponse A Value Set Version can be used as a track record of Shared Values changes, to restore a previous version of a Shared Value or Value Set, or to purge a Shared Value if it shouldn't be accessible anymore.
type ValueSetVersionResponse struct {
	Change                  JSONPatchesResponse      `json:"change"`
	Comment                 string                   `json:"comment"`
	CreatedAt               time.Time                `json:"created_at"`
	CreatedBy               string                   `json:"created_by"`
	Id                      string                   `json:"id"`
	ResultOf                *ValueSetVersionResultOf `json:"result_of"`
	SourceValueSetVersionId *string                  `json:"source_value_set_version_id"`
	UpdatedAt               time.Time                `json:"updated_at"`
	Values                  ValueSetResponse         `json:"values"`
}

// ValueSetVersionResultOf defines model for ValueSetVersionResultOf.
type ValueSetVersionResultOf string

// ValueSource Source of the value, "app" for app level, "env" for app env level.
type ValueSource string

// ValuesSecretsRefsRequest ValuesSecretsRefs stores data that should be passed around split by sensitivity.
type ValuesSecretsRefsRequest struct {
	// SecretRefs Secrets section of the data set. They can hold sensitive information that will be stored in the primary organization secret store and replaced with the secret store paths when sent outside, or secret references stored in a defined secret store. Can't be used together with `secrets`.
	//
	// They can hold a nested structure but leaf objects need to be of type SecretReference, where:
	//
	// - `store` is a Secret Store id. It can't be `humanitec`. It's mandatory if `ref` is defined and can't be used in request payloads if `value` is defined.
	//
	// - `ref` is the secret key in the format of the target store. It can't be used in request payloads if `value` is defined.
	//
	// - `version` is the version of the secret as defined in the target store. It can be defined only if `ref` is defined.
	//
	// - `value` is the value to store in the organizations primary secret store. It can't be used in request payloads if `ref` is defined.
	SecretRefs *map[string]interface{} `json:"secret_refs,omitempty"`

	// Secrets Secrets section of the data set. Sensitive information is stored in the primary organization secret store and replaced with the secret store paths when sent outside. Can't be used together with `secret_refs`.
	Secrets *map[string]interface{} `json:"secrets,omitempty"`

	// Values Values section of the data set. Passed around as-is.
	Values *map[string]interface{} `json:"values,omitempty"`
}

// ValuesSecretsRefsResponse ValuesSecretsRefs stores data that should be passed around split by sensitivity.
type ValuesSecretsRefsResponse struct {
	// SecretRefs Secrets section of the data set. They can hold sensitive information that will be stored in the primary organization secret store and replaced with the secret store paths when sent outside, or secret references stored in a defined secret store. Can't be used together with `secrets`.
	//
	// They can hold a nested structure but leaf objects need to be of type SecretReference, where:
	//
	// - `store` is a Secret Store id. It can't be `humanitec`. It's mandatory if `ref` is defined and can't be used in request payloads if `value` is defined.
	//
	// - `ref` is the secret key in the format of the target store. It can't be used in request payloads if `value` is defined.
	//
	// - `version` is the version of the secret as defined in the target store. It can be defined only if `ref` is defined.
	//
	// - `value` is the value to store in the organizations primary secret store. It can't be used in request payloads if `ref` is defined.
	SecretRefs *map[string]interface{} `json:"secret_refs,omitempty"`

	// Secrets Secrets section of the data set. Sensitive information is stored in the primary organization secret store and replaced with the secret store paths when sent outside. Can't be used together with `secret_refs`.
	Secrets *map[string]interface{} `json:"secrets,omitempty"`

	// Values Values section of the data set. Passed around as-is.
	Values *map[string]interface{} `json:"values,omitempty"`
}

// VaultAuthRequest Credentials to authenticate Vault.
type VaultAuthRequest struct {
	Role  *string `json:"role,omitempty"`
	Token *string `json:"token,omitempty"`
}

// VaultRequest Vault specification.
type VaultRequest struct {
	AgentId *string `json:"agent_id,omitempty"`

	// Auth Credentials to authenticate Vault.
	Auth *VaultAuthRequest `json:"auth,omitempty"`
	Path *string           `json:"path,omitempty"`
	Url  *string           `json:"url,omitempty"`
}

// VaultResponse Vault specification.
type VaultResponse struct {
	AgentId *string `json:"agent_id,omitempty"`
	Path    *string `json:"path,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// WebhookRequest Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookRequest struct {
	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  *JSONFieldRequest `json:"headers,omitempty"`

	// Id Job ID, unique within the Organization
	Id      *string           `json:"id,omitempty"`
	Payload *JSONFieldRequest `json:"payload,omitempty"`

	// Triggers A list of Events by which the Job is triggered
	Triggers *[]EventBaseRequest `json:"triggers,omitempty"`

	// Url The webhook's URL (without protocol, only HTTPS is supported).
	Url *string `json:"url"`
}

// WebhookResponse Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookResponse struct {
	// CreatedAt The timestamp of when this Job was created.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user who created this Job
	CreatedBy *string `json:"created_by,omitempty"`

	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  JSONFieldResponse `json:"headers"`

	// Id Job ID, unique within the Organization
	Id      string            `json:"id"`
	Payload JSONFieldResponse `json:"payload"`

	// Triggers A list of Events by which the Job is triggered
	Triggers []EventBaseResponse `json:"triggers"`

	// Url The webhook's URL (without protocol, only HTTPS is supported).
	Url *string `json:"url"`
}

// WebhookUpdateResponse Webhook is a special type of a Job. It performs an HTTPS request to a specified URL with specified headers.
type WebhookUpdateResponse struct {
	// Disabled Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  JSONFieldResponse `json:"headers"`
	Payload  JSONFieldResponse `json:"payload"`

	// Triggers A list of Events by which the Job is triggered
	Triggers *[]EventBaseResponse `json:"triggers"`

	// Url The webhook's URL (without protocol, only HTTPS is supported)
	Url *string `json:"url"`
}

// WorkloadArtefactVersion defines model for WorkloadArtefactVersion.
type WorkloadArtefactVersion struct {
	// Archived If the Artefact Version is archived.
	Archived bool `json:"archived"`

	// ArtefactId The UUID of the Artefact.
	ArtefactId string `json:"artefact_id"`

	// Commit (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// CreatedAt The time when the Artefact Version was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// CreatedBy The user ID of the user who added the Artefact Version to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// Id The UUID of the Artefact Version.
	Id string `json:"id"`

	// Name The name of the Artefact.
	Name string `json:"name"`

	// Ref (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// UpdatedAt The time when the Artefact Version was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// UpdatedBy The user ID of the user who performed the last updated on the Artefact Version.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Version (Optional) The version of the Artefact Version.
	Version *string `json:"version,omitempty"`
}

// WorkloadArtefactVersionDeploymentSet Humanitec definition for a Workload Artefact.
type WorkloadArtefactVersionDeploymentSet struct {
	// Modules The set of workloads to add when deployed, the key is the name of the workload.
	Modules map[string]map[string]interface{} `json:"modules"`

	// Shared The set of shared resources to depend on, the key is the resource identifier.
	Shared map[string]map[string]interface{} `json:"shared"`
}

// WorkloadProfileChartReference References a workload profile chart.
type WorkloadProfileChartReference struct {
	// Id Workload Profile Chart ID
	Id string `json:"id"`

	// Version Version
	Version string `json:"version"`
}

// WorkloadProfileChartVersionResponse Each Workload Profile Chart has one or more Versions associated with it.
type WorkloadProfileChartVersionResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// Id Workload Profile Chart Version ID
	Id string `json:"id"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// Version Version
	Version string `json:"version"`
}

// WorkloadProfileFeatureResponse defines model for WorkloadProfileFeatureResponse.
type WorkloadProfileFeatureResponse struct {
	Id      string                 `json:"id"`
	OrgId   string                 `json:"org_id"`
	Schema  map[string]interface{} `json:"schema"`
	Version string                 `json:"version"`
}

// WorkloadProfileRequest Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileRequest struct {
	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description *string `json:"description,omitempty"`

	// Id Workload Profile ID
	Id string `json:"id"`

	// SpecDefinition Workload spec definition
	SpecDefinition WorkloadProfileSpecDefinition `json:"spec_definition"`

	// Version Version identifier. The version must be unique, but the API doesn't not enforce any ordering. Currently workloads will always use the latest update.
	//
	// If no identifier is provided, the each update will generate a random version identifier.
	Version *string `json:"version,omitempty"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`
}

// WorkloadProfileResponse Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description string `json:"description"`

	// Id Workload Profile ID
	Id string `json:"id"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// SpecDefinition Workload spec definition
	SpecDefinition WorkloadProfileSpecDefinition `json:"spec_definition"`

	// SpecSchema OpenAPI schema used to validate the spec.
	SpecSchema interface{} `json:"spec_schema"`

	// UpdatedAt Timestamp when the entity was last updated.
	UpdatedAt time.Time `json:"updated_at"`

	// UpdatedBy User who last updated the entity.
	UpdatedBy string `json:"updated_by"`

	// Version Version identifier.
	Version string `json:"version"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`
}

// WorkloadProfileSpecDefinition Workload spec definition
type WorkloadProfileSpecDefinition struct {
	// Properties Workload spec definition
	Properties        *WorkloadProfileSpecDefinitionProperties        `json:"properties,omitempty"`
	RuntimeProperties *[]WorkloadProfileSpecDefinitionRuntimeProperty `json:"runtime_properties,omitempty"`
}

// WorkloadProfileSpecDefinitionProperties Workload spec definition
type WorkloadProfileSpecDefinitionProperties map[string]WorkloadProfileSpecDefinitionProperty

// WorkloadProfileSpecDefinitionProperty defines model for WorkloadProfileSpecDefinitionProperty.
type WorkloadProfileSpecDefinitionProperty struct {
	FeatureName *string `json:"feature_name,omitempty"`

	// Properties Workload spec definition
	Properties        *WorkloadProfileSpecDefinitionProperties        `json:"properties,omitempty"`
	RuntimeProperties *[]WorkloadProfileSpecDefinitionRuntimeProperty `json:"runtime_properties,omitempty"`
	Schema            *map[string]interface{}                         `json:"schema,omitempty"`
	Title             *string                                         `json:"title,omitempty"`
	Type              WorkloadProfileSpecDefinitionPropertyType       `json:"type"`
	UiHints           *WorkloadProfileSpecDefinitionPropertyUIHints   `json:"ui_hints,omitempty"`
	Version           *string                                         `json:"version,omitempty"`
}

// WorkloadProfileSpecDefinitionPropertyType defines model for WorkloadProfileSpecDefinitionPropertyType.
type WorkloadProfileSpecDefinitionPropertyType string

// WorkloadProfileSpecDefinitionPropertyUIHints defines model for WorkloadProfileSpecDefinitionPropertyUIHints.
type WorkloadProfileSpecDefinitionPropertyUIHints struct {
	Hidden *bool `json:"hidden,omitempty"`
	Order  *int  `json:"order,omitempty"`
}

// WorkloadProfileSpecDefinitionRuntimeProperty defines model for WorkloadProfileSpecDefinitionRuntimeProperty.
type WorkloadProfileSpecDefinitionRuntimeProperty struct {
	FeatureName *string                                          `json:"feature_name,omitempty"`
	Title       *string                                          `json:"title,omitempty"`
	Type        WorkloadProfileSpecDefinitionRuntimePropertyType `json:"type"`
	UiHints     *WorkloadProfileSpecDefinitionPropertyUIHints    `json:"ui_hints,omitempty"`
	Version     *string                                          `json:"version,omitempty"`
}

// WorkloadProfileSpecDefinitionRuntimePropertyType defines model for WorkloadProfileSpecDefinitionRuntimePropertyType.
type WorkloadProfileSpecDefinitionRuntimePropertyType string

// WorkloadProfileUpdateRequest The proposed properties to update a workload profile.
type WorkloadProfileUpdateRequest struct {
	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description *string `json:"description,omitempty"`

	// SpecDefinition Workload spec definition
	SpecDefinition WorkloadProfileSpecDefinition `json:"spec_definition"`

	// Version Version identifier. The version must be unique, but the API doesn't not enforce any ordering. Currently workloads will always use the latest update.
	//
	// If no identifier is provided, the each update will generate a random version identifier.
	Version *string `json:"version,omitempty"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`
}

// WorkloadProfileVersionResponse A version of a workload profile.
type WorkloadProfileVersionResponse struct {
	// CreatedAt Creation date
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User created the profile
	CreatedBy string `json:"created_by"`

	// DeprecationMessage A not-empty string indicates that the workload profile is deprecated.
	DeprecationMessage *string `json:"deprecation_message,omitempty"`

	// Description Describes the workload profile
	Description string `json:"description"`

	// Id ID
	Id string `json:"id"`

	// OrgId Organization ID
	OrgId string `json:"org_id"`

	// SpecDefinition Workload spec definition
	SpecDefinition WorkloadProfileSpecDefinition `json:"spec_definition"`

	// SpecSchema OpenAPI schema used to validate the spec.
	SpecSchema interface{} `json:"spec_schema"`

	// WorkloadProfileChart References a workload profile chart.
	WorkloadProfileChart WorkloadProfileChartReference `json:"workload_profile_chart"`

	// WorkloadProfileId Workload Profile ID
	WorkloadProfileId string `json:"workload_profile_id"`
}

// AgentIdPathParam defines model for agentIdPathParam.
type AgentIdPathParam = string

// AppIdPathParam defines model for appIdPathParam.
type AppIdPathParam = string

// ApprovalIdPathParam defines model for approvalIdPathParam.
type ApprovalIdPathParam = string

// ByAppIdQueryParam defines model for byAppIdQueryParam.
type ByAppIdQueryParam = []string

// ByApprovalStatusQueryParam defines model for byApprovalStatusQueryParam.
type ByApprovalStatusQueryParam = string

// ByCompletedQueryParam defines model for byCompletedQueryParam.
type ByCompletedQueryParam = bool

// ByCreatedAfterParam defines model for byCreatedAfterParam.
type ByCreatedAfterParam = time.Time

// ByCreatedBeforeParam defines model for byCreatedBeforeParam.
type ByCreatedBeforeParam = time.Time

// ByEnvIdQueryParam defines model for byEnvIdQueryParam.
type ByEnvIdQueryParam = string

// ByMetadata defines model for byMetadata.
type ByMetadata map[string]string

// ByPipelineIdQueryParam defines model for byPipelineIdQueryParam.
type ByPipelineIdQueryParam = []string

// ByRunIdQueryParam defines model for byRunIdQueryParam.
type ByRunIdQueryParam = []string

// ByStatusQueryParam defines model for byStatusQueryParam.
type ByStatusQueryParam = []string

// ByTriggerTypeQueryParam defines model for byTriggerTypeQueryParam.
type ByTriggerTypeQueryParam = string

// ByVersionQueryParam defines model for byVersionQueryParam.
type ByVersionQueryParam = string

// DeprecatedQueryParam defines model for deprecatedQueryParam.
type DeprecatedQueryParam = bool

// EnvIdPathParam defines model for envIdPathParam.
type EnvIdPathParam = string

// FingerprintPathParam defines model for fingerprintPathParam.
type FingerprintPathParam = string

// FingerprintQueryParam defines model for fingerprintQueryParam.
type FingerprintQueryParam = string

// IdempotencyKey defines model for idempotencyKey.
type IdempotencyKey = string

// IfMatchHeaderParam defines model for ifMatchHeaderParam.
type IfMatchHeaderParam = string

// JobIdPathParam defines model for jobIdPathParam.
type JobIdPathParam = string

// OrgIdPathParam defines model for orgIdPathParam.
type OrgIdPathParam = string

// PageTokenQueryParam defines model for pageTokenQueryParam.
type PageTokenQueryParam = string

// PerPageQueryParam defines model for perPageQueryParam.
type PerPageQueryParam = int

// PipelineIdPathParam defines model for pipelineIdPathParam.
type PipelineIdPathParam = string

// ProfileQidPathParam defines model for profileQidPathParam.
type ProfileQidPathParam = string

// RunIdPathParam defines model for runIdPathParam.
type RunIdPathParam = string

// StepIndexPathParam defines model for stepIndexPathParam.
type StepIndexPathParam = int

// N400BadRequest HumanitecError represents a standard Humanitec Error
type N400BadRequest = HumanitecErrorResponse

// N403Forbidden HumanitecError represents a standard Humanitec Error
type N403Forbidden = HumanitecErrorResponse

// N404NotFound HumanitecError represents a standard Humanitec Error
type N404NotFound = HumanitecErrorResponse

// N409Conflict HumanitecError represents a standard Humanitec Error
type N409Conflict = HumanitecErrorResponse

// N412PreconditionFailed A standard error response
type N412PreconditionFailed = ErrorResponse

// N422UnprocessableContent A standard error response
type N422UnprocessableContent = ErrorResponse

// ListAgentsParams defines parameters for ListAgents.
type ListAgentsParams struct {
	// Fingerprint The Key fingerprint (hexadecimal representation of sha256 hash of the DER representation of the key).
	Fingerprint *FingerprintQueryParam `form:"fingerprint,omitempty" json:"fingerprint,omitempty"`
}

// ListPipelineApprovalRequestsParams defines parameters for ListPipelineApprovalRequests.
type ListPipelineApprovalRequestsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Pipeline An optional list of Pipeline IDs.
	Pipeline *ByPipelineIdQueryParam `form:"pipeline,omitempty" json:"pipeline,omitempty"`

	// Run An optional Pipeline Run ID.
	Run *ByRunIdQueryParam `form:"run,omitempty" json:"run,omitempty"`

	// Status Optional filter by status.
	Status *ByApprovalStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`
}

// GetOrgsOrgIdAppsAppIdDeltasParams defines parameters for GetOrgsOrgIdAppsAppIdDeltas.
type GetOrgsOrgIdAppsAppIdDeltasParams struct {
	// Archived If true, return archived Deltas.
	//
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Env Only return Deltas associated with the specified Environment.
	//
	Env *string `form:"env,omitempty" json:"env,omitempty"`
}

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody defines parameters for PatchOrgsOrgIdAppsAppIdDeltasDeltaId.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody = []DeltaRequest

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody = bool

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody = string

// ListDeploymentsParams defines parameters for ListDeployments.
type ListDeploymentsParams struct {
	// PipelineRunId An optional filter by the Pipeline and Pipeline Run ID separated by a comma.
	PipelineRunId *string `form:"pipelineRunId,omitempty" json:"pipelineRunId,omitempty"`
}

// RebaseEnvironmentJSONBody defines parameters for RebaseEnvironment.
type RebaseEnvironmentJSONBody = string

// QueryResourceGraphJSONBody defines parameters for QueryResourceGraph.
type QueryResourceGraphJSONBody = []ResourceProvisionRequestRequest

// UpdatePausedJSONBody defines parameters for UpdatePaused.
type UpdatePausedJSONBody = bool

// PatchReplicasJSONBody defines parameters for PatchReplicas.
type PatchReplicasJSONBody map[string]int

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams struct {
	// KeyChanged (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `form:"key_changed,omitempty" json:"key_changed,omitempty"`
}

// ListPipelineCriteriaInAppParams defines parameters for ListPipelineCriteriaInApp.
type ListPipelineCriteriaInAppParams struct {
	// Pipeline An optional filter by Pipeline ID.
	Pipeline *string `form:"pipeline,omitempty" json:"pipeline,omitempty"`

	// Match Optional key value match filters on the criteria.
	Match *map[string]string `json:"match,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreatePipelineRunByTriggerCriteriaParams defines parameters for CreatePipelineRunByTriggerCriteria.
type CreatePipelineRunByTriggerCriteriaParams struct {
	// DryRun Optionally validate the request but do not persist the actual Pipeline Run.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty"`

	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// ListPipelinesParams defines parameters for ListPipelines.
type ListPipelinesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Trigger An optional filter by trigger type.
	Trigger *ByTriggerTypeQueryParam `form:"trigger,omitempty" json:"trigger,omitempty"`

	// Metadata Optional filter by pipeline metadata
	Metadata *ByMetadata `json:"metadata,omitempty"`
}

// CreatePipelineParams defines parameters for CreatePipeline.
type CreatePipelineParams struct {
	// DryRun Optionally validate the request but do not persist the actual Pipeline.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty"`
}

// DeletePipelineParams defines parameters for DeletePipeline.
type DeletePipelineParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// GetPipelineParams defines parameters for GetPipeline.
type GetPipelineParams struct {
	// Version An optional Pipeline Version ID.
	Version *ByVersionQueryParam `form:"version,omitempty" json:"version,omitempty"`
}

// UpdatePipelineParams defines parameters for UpdatePipeline.
type UpdatePipelineParams struct {
	// DryRun Optionally validate the request but do not persist the update.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty"`

	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// ListPipelineRunsParams defines parameters for ListPipelineRuns.
type ListPipelineRunsParams struct {
	// Env An optional Environment ID
	Env *ByEnvIdQueryParam `form:"env,omitempty" json:"env,omitempty"`

	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// Completed Optional filer by completed or not.
	Completed *ByCompletedQueryParam `form:"completed,omitempty" json:"completed,omitempty"`

	// CreatedAfter Optional filter by creation after date time.
	CreatedAfter *ByCreatedAfterParam `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Optional filter by creation before date time
	CreatedBefore *ByCreatedBeforeParam `form:"created_before,omitempty" json:"created_before,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreatePipelineRunParams defines parameters for CreatePipelineRun.
type CreatePipelineRunParams struct {
	// DryRun Optionally validate the request but do not persist the actual Pipeline Run.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty"`

	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// DeletePipelineRunParams defines parameters for DeletePipelineRun.
type DeletePipelineRunParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// CancelPipelineRunParams defines parameters for CancelPipelineRun.
type CancelPipelineRunParams struct {
	// IfMatch Indicate that the request should only succeed if there is an etag match
	IfMatch *IfMatchHeaderParam `json:"If-Match,omitempty"`
}

// ListPipelineJobsParams defines parameters for ListPipelineJobs.
type ListPipelineJobsParams struct {
	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListPipelineStepLogsParams defines parameters for ListPipelineStepLogs.
type ListPipelineStepLogsParams struct {
	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// RestartPipelineRunParams defines parameters for RestartPipelineRun.
type RestartPipelineRunParams struct {
	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// GetPipelineDefinitionParams defines parameters for GetPipelineDefinition.
type GetPipelineDefinitionParams struct {
	// Version An optional Pipeline Version ID.
	Version *ByVersionQueryParam `form:"version,omitempty" json:"version,omitempty"`
	Accept  *string              `json:"Accept,omitempty"`
}

// ListPipelineVersionsParams defines parameters for ListPipelineVersions.
type ListPipelineVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListRuntimeParams defines parameters for ListRuntime.
type ListRuntimeParams struct {
	// Id Filter environments by ID (required). Up to 5 ids can be supplied per request.
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`
}

// GetOrgsOrgIdAppsAppIdSetsSetIdParams defines parameters for GetOrgsOrgIdAppsAppIdSetsSetId.
type GetOrgsOrgIdAppsAppIdSetsSetIdParams struct {
	// Diff ID of the Deployment Set to compared against.
	Diff *string `form:"diff,omitempty" json:"diff,omitempty"`
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdValueSetVersionsParams struct {
	// KeyChanged (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `form:"key_changed,omitempty" json:"key_changed,omitempty"`
}

// ListArtefactVersionsInOrgParams defines parameters for ListArtefactVersionsInOrg.
type ListArtefactVersionsInOrgParams struct {
	// Name (Optional) Filter Artefact Versions by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Reference (Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`

	// Archived (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Type (Optional) Filter by artefact type.
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// CreateArtefactVersionParams defines parameters for CreateArtefactVersion.
type CreateArtefactVersionParams struct {
	// Vcs (Optional) Which version control system the version comes from. Default value is "git". If this parameter is not supplied or its value is "git", the provided ref, if not empty, is checked to ensure that it has the prefix "refs/".
	Vcs *string `form:"vcs,omitempty" json:"vcs,omitempty"`

	// DryRun Optionally validate the request but do not persist the actual artefact.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty"`
}

// GetWorkloadArtefactVersionDeploymentSetParams defines parameters for GetWorkloadArtefactVersionDeploymentSet.
type GetWorkloadArtefactVersionDeploymentSetParams struct {
	// Accept The accepted content type.
	Accept *string `json:"Accept,omitempty"`
}

// GetWorkloadArtefactVersionSpecParams defines parameters for GetWorkloadArtefactVersionSpec.
type GetWorkloadArtefactVersionSpecParams struct {
	// Accept The accepted content type.
	Accept *string `json:"Accept,omitempty"`
}

// ListArtefactsParams defines parameters for ListArtefacts.
type ListArtefactsParams struct {
	// Type (Optional) Filter Artefacts by type.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Name (Optional) Filter Artefacts by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ListArtefactVersionsParams defines parameters for ListArtefactVersions.
type ListArtefactVersionsParams struct {
	// Archived (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Reference (Optional) Filter Artefact Versions by by name including a version or digest.
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`

	// Limit (Optional) Limit the number of versions returned by the endpoint.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListAuditLogEntriesParams defines parameters for ListAuditLogEntries.
type ListAuditLogEntriesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// From Optional filter for entries created after the given time.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To Optional filter for entries created before the given time.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// ListHumanitecPublicKeysParams defines parameters for ListHumanitecPublicKeys.
type ListHumanitecPublicKeysParams struct {
	// Active If set to true, the response includes only the active key, if set to false only non-active keys, otherwise both active and non-active keys.
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// ListPublicKeysParams defines parameters for ListPublicKeys.
type ListPublicKeysParams struct {
	// Fingerprint The fingerprint (the hexadecimal representation of the sha256 hash of the DER representation of the key) of the requested key. If a value is provided, the result will contain a single key, if any.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty"`
}

// CreatePublicKeyJSONBody defines parameters for CreatePublicKey.
type CreatePublicKeyJSONBody = string

// ListPipelineRunsByOrgParams defines parameters for ListPipelineRunsByOrg.
type ListPipelineRunsByOrgParams struct {
	// App An optional list of Application IDs.
	App *ByAppIdQueryParam `form:"app,omitempty" json:"app,omitempty"`

	// Pipeline An optional list of Pipeline IDs.
	Pipeline *ByPipelineIdQueryParam `form:"pipeline,omitempty" json:"pipeline,omitempty"`

	// Env An optional Environment ID
	Env *ByEnvIdQueryParam `form:"env,omitempty" json:"env,omitempty"`

	// Status Optional filter by status.
	Status *ByStatusQueryParam `form:"status,omitempty" json:"status,omitempty"`

	// Completed Optional filer by completed or not.
	Completed *ByCompletedQueryParam `form:"completed,omitempty" json:"completed,omitempty"`

	// CreatedAfter Optional filter by creation after date time.
	CreatedAfter *ByCreatedAfterParam `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Optional filter by creation before date time
	CreatedBefore *ByCreatedBeforeParam `form:"created_before,omitempty" json:"created_before,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListPipelinesInOrgParams defines parameters for ListPipelinesInOrg.
type ListPipelinesInOrgParams struct {
	// App An optional list of Application IDs.
	App *ByAppIdQueryParam `form:"app,omitempty" json:"app,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Trigger An optional filter by trigger type.
	Trigger *ByTriggerTypeQueryParam `form:"trigger,omitempty" json:"trigger,omitempty"`

	// Metadata Optional filter by pipeline metadata
	Metadata *ByMetadata `json:"metadata,omitempty"`
}

// ListResourceDefinitionsParams defines parameters for ListResourceDefinitions.
type ListResourceDefinitionsParams struct {
	// App (Optional) Filter Resource Definitions that may match a specific Application.
	//
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Env (Optional) Filter Resource Definitions that may match a specific Environment.
	//
	Env *string `form:"env,omitempty" json:"env,omitempty"`

	// EnvType (Optional) Filter Resource Definitions that may match a specific Environment Type.
	//
	EnvType *string `form:"env_type,omitempty" json:"env_type,omitempty"`

	// Res (Optional) Filter Resource Definitions that may match a specific Resource.
	//
	Res *string `form:"res,omitempty" json:"res,omitempty"`

	// ResType (Optional) Filter Resource Definitions that may match a specific Resource Type.
	//
	ResType *string `form:"res_type,omitempty" json:"res_type,omitempty"`

	// Class (Optional) Filter Resource Definitions that may match a specific Class.
	//
	Class *string `form:"class,omitempty" json:"class,omitempty"`
}

// DeleteResourceDefinitionParams defines parameters for DeleteResourceDefinition.
type DeleteResourceDefinitionParams struct {
	// Force If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
	//
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// UpdateResourceDefinitionCriteriaJSONBody defines parameters for UpdateResourceDefinitionCriteria.
type UpdateResourceDefinitionCriteriaJSONBody = []MatchingCriteriaRuleRequest

// DeleteResourceDefinitionCriteriaParams defines parameters for DeleteResourceDefinitionCriteria.
type DeleteResourceDefinitionCriteriaParams struct {
	// Force If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
	//
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// ListWorkloadProfileChartVersionsParams defines parameters for ListWorkloadProfileChartVersions.
type ListWorkloadProfileChartVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreateWorkloadProfileChartVersionMultipartBody defines parameters for CreateWorkloadProfileChartVersion.
type CreateWorkloadProfileChartVersionMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// ListWorkloadProfilesParams defines parameters for ListWorkloadProfiles.
type ListWorkloadProfilesParams struct {
	// Deprecated Whether to include deprecated profiles
	Deprecated *DeprecatedQueryParam `form:"deprecated,omitempty" json:"deprecated,omitempty"`

	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListWorkloadProfileVersionsParams defines parameters for ListWorkloadProfileVersions.
type ListWorkloadProfileVersionsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = UserProfileExtendedRequest

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = AgentCreateBody

// PatchAgentJSONRequestBody defines body for PatchAgent for application/json ContentType.
type PatchAgentJSONRequestBody = AgentPatchBody

// CreateKeyJSONRequestBody defines body for CreateKey for application/json ContentType.
type CreateKeyJSONRequestBody = KeyCreateBody

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = ApplicationCreationRequest

// PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdDeltas for application/json ContentType.
type PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody = DeltaRequest

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdDeltasDeltaId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody = PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody

// PutDeltaJSONRequestBody defines body for PutDelta for application/json ContentType.
type PutDeltaJSONRequestBody = DeltaRequest

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody = PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody = EnvironmentID

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody = PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONBody

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentDefinitionRequest

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody = DeploymentRequest

// RebaseEnvironmentJSONRequestBody defines body for RebaseEnvironment for application/json ContentType.
type RebaseEnvironmentJSONRequestBody = RebaseEnvironmentJSONBody

// QueryResourceGraphJSONRequestBody defines body for QueryResourceGraph for application/json ContentType.
type QueryResourceGraphJSONRequestBody = QueryResourceGraphJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody = AutomationRuleRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody = AutomationRuleRequest

// UpdatePausedJSONRequestBody defines body for UpdatePaused for application/json ContentType.
type UpdatePausedJSONRequestBody = UpdatePausedJSONBody

// PatchReplicasJSONRequestBody defines body for PatchReplicas for application/json ContentType.
type PatchReplicasJSONRequestBody PatchReplicasJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody = ValueCreatePayloadRequest

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody = ValuePatchPayloadRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody = ValueEditPayloadRequest

// CreatePipelineRunByTriggerCriteriaJSONRequestBody defines body for CreatePipelineRunByTriggerCriteria for application/json ContentType.
type CreatePipelineRunByTriggerCriteriaJSONRequestBody = PipelineRunCreateByTriggerCriteriaBody

// CreatePipelineCriteriaJSONRequestBody defines body for CreatePipelineCriteria for application/json ContentType.
type CreatePipelineCriteriaJSONRequestBody = PipelineCriteriaCreateBody

// CreatePipelineRunJSONRequestBody defines body for CreatePipelineRun for application/json ContentType.
type CreatePipelineRunJSONRequestBody = PipelineRunCreateBody

// PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdSetsSetId for application/json ContentType.
type PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody = DeltaRequest

// CreateUserRoleInAppJSONRequestBody defines body for CreateUserRoleInApp for application/json ContentType.
type CreateUserRoleInAppJSONRequestBody = UserRoleRequest

// UpdateUserRoleInAppJSONRequestBody defines body for UpdateUserRoleInApp for application/json ContentType.
type UpdateUserRoleInAppJSONRequestBody = RoleRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody = ValueSetActionPayloadRequest

// PostOrgsOrgIdAppsAppIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValuesJSONRequestBody = ValueCreatePayloadRequest

// PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdValuesKey for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody = ValuePatchPayloadRequest

// PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody = ValueEditPayloadRequest

// PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdWebhooks for application/json ContentType.
type PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody = WebhookRequest

// PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdWebhooksJobId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody = WebhookRequest

// CreateArtefactVersionJSONRequestBody defines body for CreateArtefactVersion for application/json ContentType.
type CreateArtefactVersionJSONRequestBody = CreateArtefactVersion

// CreateArtefactVersionMultipartRequestBody defines body for CreateArtefactVersion for multipart/form-data ContentType.
type CreateArtefactVersionMultipartRequestBody = CreateArtefactVersion

// PatchArtefactVersionJSONRequestBody defines body for PatchArtefactVersion for application/json ContentType.
type PatchArtefactVersionJSONRequestBody = UpdateArtefactVersionPayloadRequest

// CreateEnvironmentTypeJSONRequestBody defines body for CreateEnvironmentType for application/json ContentType.
type CreateEnvironmentTypeJSONRequestBody = EnvironmentTypeRequest

// CreateUserRoleInEnvTypeJSONRequestBody defines body for CreateUserRoleInEnvType for application/json ContentType.
type CreateUserRoleInEnvTypeJSONRequestBody = UserRoleRequest

// UpdateUserRoleInEnvTypeJSONRequestBody defines body for UpdateUserRoleInEnvType for application/json ContentType.
type UpdateUserRoleInEnvTypeJSONRequestBody = RoleRequest

// CreateDeprecatedImageBuildJSONRequestBody defines body for CreateDeprecatedImageBuild for application/json ContentType.
type CreateDeprecatedImageBuildJSONRequestBody = ImageBuildRequest

// CreateInviteInOrgJSONRequestBody defines body for CreateInviteInOrg for application/json ContentType.
type CreateInviteInOrgJSONRequestBody = UserInviteRequestRequest

// CreatePublicKeyJSONRequestBody defines body for CreatePublicKey for application/json ContentType.
type CreatePublicKeyJSONRequestBody = CreatePublicKeyJSONBody

// PostOrgsOrgIdRegistriesJSONRequestBody defines body for PostOrgsOrgIdRegistries for application/json ContentType.
type PostOrgsOrgIdRegistriesJSONRequestBody = RegistryRequest

// PatchOrgsOrgIdRegistriesRegIdJSONRequestBody defines body for PatchOrgsOrgIdRegistriesRegId for application/json ContentType.
type PatchOrgsOrgIdRegistriesRegIdJSONRequestBody = RegistryRequest

// CreateResourceAccountJSONRequestBody defines body for CreateResourceAccount for application/json ContentType.
type CreateResourceAccountJSONRequestBody = CreateResourceAccountRequestRequest

// PatchResourceAccountJSONRequestBody defines body for PatchResourceAccount for application/json ContentType.
type PatchResourceAccountJSONRequestBody = UpdateResourceAccountRequestRequest

// CreateResourceDefinitionJSONRequestBody defines body for CreateResourceDefinition for application/json ContentType.
type CreateResourceDefinitionJSONRequestBody = CreateResourceDefinitionRequestRequest

// PatchResourceDefinitionJSONRequestBody defines body for PatchResourceDefinition for application/json ContentType.
type PatchResourceDefinitionJSONRequestBody = PatchResourceDefinitionRequestRequest

// UpdateResourceDefinitionJSONRequestBody defines body for UpdateResourceDefinition for application/json ContentType.
type UpdateResourceDefinitionJSONRequestBody = UpdateResourceDefinitionRequestRequest

// CreateResourceDefinitionCriteriaJSONRequestBody defines body for CreateResourceDefinitionCriteria for application/json ContentType.
type CreateResourceDefinitionCriteriaJSONRequestBody = MatchingCriteriaRuleRequest

// UpdateResourceDefinitionCriteriaJSONRequestBody defines body for UpdateResourceDefinitionCriteria for application/json ContentType.
type UpdateResourceDefinitionCriteriaJSONRequestBody = UpdateResourceDefinitionCriteriaJSONBody

// CreateResourceDriverJSONRequestBody defines body for CreateResourceDriver for application/json ContentType.
type CreateResourceDriverJSONRequestBody = CreateDriverRequestRequest

// UpdateResourceDriverJSONRequestBody defines body for UpdateResourceDriver for application/json ContentType.
type UpdateResourceDriverJSONRequestBody = UpdateDriverRequestRequest

// PostOrgsOrgIdSecretstoresJSONRequestBody defines body for PostOrgsOrgIdSecretstores for application/json ContentType.
type PostOrgsOrgIdSecretstoresJSONRequestBody = CreateSecretStorePayloadRequest

// PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody defines body for PatchOrgsOrgIdSecretstoresStoreId for application/json ContentType.
type PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody = UpdateSecretStorePayloadRequest

// CreateServiceUserInOrgJSONRequestBody defines body for CreateServiceUserInOrg for application/json ContentType.
type CreateServiceUserInOrgJSONRequestBody = NewServiceUserRequest

// UpdateUserRoleInOrgJSONRequestBody defines body for UpdateUserRoleInOrg for application/json ContentType.
type UpdateUserRoleInOrgJSONRequestBody = RoleRequest

// CreateWorkloadProfileChartVersionMultipartRequestBody defines body for CreateWorkloadProfileChartVersion for multipart/form-data ContentType.
type CreateWorkloadProfileChartVersionMultipartRequestBody CreateWorkloadProfileChartVersionMultipartBody

// CreateWorkloadProfileJSONRequestBody defines body for CreateWorkloadProfile for application/json ContentType.
type CreateWorkloadProfileJSONRequestBody = WorkloadProfileRequest

// UpdateWorkloadProfileJSONRequestBody defines body for UpdateWorkloadProfile for application/json ContentType.
type UpdateWorkloadProfileJSONRequestBody = WorkloadProfileUpdateRequest

// CreateUserTokenJSONRequestBody defines body for CreateUserToken for application/json ContentType.
type CreateUserTokenJSONRequestBody = TokenDefinitionRequest

// Getter for additional properties for ModuleResponse. Returns the specified
// element and whether it was found
func (a ModuleResponse) Get(fieldName string) (value ControllerResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleResponse
func (a *ModuleResponse) Set(fieldName string, value ControllerResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ControllerResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a *ModuleResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deploy"]; found {
		err = json.Unmarshal(raw, &a.Deploy)
		if err != nil {
			return fmt.Errorf("error reading 'deploy': %w", err)
		}
		delete(object, "deploy")
	}

	if raw, found := object["externals"]; found {
		err = json.Unmarshal(raw, &a.Externals)
		if err != nil {
			return fmt.Errorf("error reading 'externals': %w", err)
		}
		delete(object, "externals")
	}

	if raw, found := object["profile"]; found {
		err = json.Unmarshal(raw, &a.Profile)
		if err != nil {
			return fmt.Errorf("error reading 'profile': %w", err)
		}
		delete(object, "profile")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ControllerResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ControllerResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a ModuleResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Deploy != nil {
		object["deploy"], err = json.Marshal(a.Deploy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deploy': %w", err)
		}
	}

	object["externals"], err = json.Marshal(a.Externals)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externals': %w", err)
	}

	object["profile"], err = json.Marshal(a.Profile)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'profile': %w", err)
	}

	object["spec"], err = json.Marshal(a.Spec)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'spec': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsContainerArtefactVersion returns the union data inside the ArtefactVersion as a ContainerArtefactVersion
func (t ArtefactVersion) AsContainerArtefactVersion() (ContainerArtefactVersion, error) {
	var body ContainerArtefactVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromContainerArtefactVersion overwrites any union data inside the ArtefactVersion as the provided ContainerArtefactVersion
func (t *ArtefactVersion) FromContainerArtefactVersion(v ContainerArtefactVersion) error {
	t.Type = "container"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeContainerArtefactVersion performs a merge with any union data inside the ArtefactVersion, using the provided ContainerArtefactVersion
func (t *ArtefactVersion) MergeContainerArtefactVersion(v ContainerArtefactVersion) error {
	t.Type = "container"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWorkloadArtefactVersion returns the union data inside the ArtefactVersion as a WorkloadArtefactVersion
func (t ArtefactVersion) AsWorkloadArtefactVersion() (WorkloadArtefactVersion, error) {
	var body WorkloadArtefactVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWorkloadArtefactVersion overwrites any union data inside the ArtefactVersion as the provided WorkloadArtefactVersion
func (t *ArtefactVersion) FromWorkloadArtefactVersion(v WorkloadArtefactVersion) error {
	t.Type = "workload"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWorkloadArtefactVersion performs a merge with any union data inside the ArtefactVersion, using the provided WorkloadArtefactVersion
func (t *ArtefactVersion) MergeWorkloadArtefactVersion(v WorkloadArtefactVersion) error {
	t.Type = "workload"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtefactVersion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArtefactVersion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "container":
		return t.AsContainerArtefactVersion()
	case "workload":
		return t.AsWorkloadArtefactVersion()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArtefactVersion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ArtefactVersion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsCreateContainerArtefactVersion returns the union data inside the CreateArtefactVersion as a CreateContainerArtefactVersion
func (t CreateArtefactVersion) AsCreateContainerArtefactVersion() (CreateContainerArtefactVersion, error) {
	var body CreateContainerArtefactVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateContainerArtefactVersion overwrites any union data inside the CreateArtefactVersion as the provided CreateContainerArtefactVersion
func (t *CreateArtefactVersion) FromCreateContainerArtefactVersion(v CreateContainerArtefactVersion) error {
	t.Type = "container"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateContainerArtefactVersion performs a merge with any union data inside the CreateArtefactVersion, using the provided CreateContainerArtefactVersion
func (t *CreateArtefactVersion) MergeCreateContainerArtefactVersion(v CreateContainerArtefactVersion) error {
	t.Type = "container"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateWorkloadArtefactVersion returns the union data inside the CreateArtefactVersion as a CreateWorkloadArtefactVersion
func (t CreateArtefactVersion) AsCreateWorkloadArtefactVersion() (CreateWorkloadArtefactVersion, error) {
	var body CreateWorkloadArtefactVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateWorkloadArtefactVersion overwrites any union data inside the CreateArtefactVersion as the provided CreateWorkloadArtefactVersion
func (t *CreateArtefactVersion) FromCreateWorkloadArtefactVersion(v CreateWorkloadArtefactVersion) error {
	t.Type = "workload"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateWorkloadArtefactVersion performs a merge with any union data inside the CreateArtefactVersion, using the provided CreateWorkloadArtefactVersion
func (t *CreateArtefactVersion) MergeCreateWorkloadArtefactVersion(v CreateWorkloadArtefactVersion) error {
	t.Type = "workload"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateArtefactVersion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateArtefactVersion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "container":
		return t.AsCreateContainerArtefactVersion()
	case "workload":
		return t.AsCreateWorkloadArtefactVersion()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateArtefactVersion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *CreateArtefactVersion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsPipelineDeploymentRequestCriteria returns the union data inside the PipelineCriteria as a PipelineDeploymentRequestCriteria
func (t PipelineCriteria) AsPipelineDeploymentRequestCriteria() (PipelineDeploymentRequestCriteria, error) {
	var body PipelineDeploymentRequestCriteria
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPipelineDeploymentRequestCriteria overwrites any union data inside the PipelineCriteria as the provided PipelineDeploymentRequestCriteria
func (t *PipelineCriteria) FromPipelineDeploymentRequestCriteria(v PipelineDeploymentRequestCriteria) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePipelineDeploymentRequestCriteria performs a merge with any union data inside the PipelineCriteria, using the provided PipelineDeploymentRequestCriteria
func (t *PipelineCriteria) MergePipelineDeploymentRequestCriteria(v PipelineDeploymentRequestCriteria) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PipelineCriteria) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"trigger"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PipelineCriteria) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "deployment_request":
		return t.AsPipelineDeploymentRequestCriteria()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PipelineCriteria) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["id"], err = json.Marshal(t.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["pipeline_id"], err = json.Marshal(t.PipelineId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pipeline_id': %w", err)
	}

	object["pipeline_name"], err = json.Marshal(t.PipelineName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pipeline_name': %w", err)
	}

	object["trigger"], err = json.Marshal(t.Trigger)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PipelineCriteria) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["pipeline_id"]; found {
		err = json.Unmarshal(raw, &t.PipelineId)
		if err != nil {
			return fmt.Errorf("error reading 'pipeline_id': %w", err)
		}
	}

	if raw, found := object["pipeline_name"]; found {
		err = json.Unmarshal(raw, &t.PipelineName)
		if err != nil {
			return fmt.Errorf("error reading 'pipeline_name': %w", err)
		}
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &t.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
	}

	return err
}

// AsPipelineDeploymentRequestCriteriaCreateBody returns the union data inside the PipelineCriteriaCreateBody as a PipelineDeploymentRequestCriteriaCreateBody
func (t PipelineCriteriaCreateBody) AsPipelineDeploymentRequestCriteriaCreateBody() (PipelineDeploymentRequestCriteriaCreateBody, error) {
	var body PipelineDeploymentRequestCriteriaCreateBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPipelineDeploymentRequestCriteriaCreateBody overwrites any union data inside the PipelineCriteriaCreateBody as the provided PipelineDeploymentRequestCriteriaCreateBody
func (t *PipelineCriteriaCreateBody) FromPipelineDeploymentRequestCriteriaCreateBody(v PipelineDeploymentRequestCriteriaCreateBody) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePipelineDeploymentRequestCriteriaCreateBody performs a merge with any union data inside the PipelineCriteriaCreateBody, using the provided PipelineDeploymentRequestCriteriaCreateBody
func (t *PipelineCriteriaCreateBody) MergePipelineDeploymentRequestCriteriaCreateBody(v PipelineDeploymentRequestCriteriaCreateBody) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PipelineCriteriaCreateBody) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"trigger"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PipelineCriteriaCreateBody) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "deployment_request":
		return t.AsPipelineDeploymentRequestCriteriaCreateBody()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PipelineCriteriaCreateBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["trigger"], err = json.Marshal(t.Trigger)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PipelineCriteriaCreateBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &t.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
	}

	return err
}

// AsPipelineRunCreateByDeploymentRequestCriteriaBody returns the union data inside the PipelineRunCreateByTriggerCriteriaBody as a PipelineRunCreateByDeploymentRequestCriteriaBody
func (t PipelineRunCreateByTriggerCriteriaBody) AsPipelineRunCreateByDeploymentRequestCriteriaBody() (PipelineRunCreateByDeploymentRequestCriteriaBody, error) {
	var body PipelineRunCreateByDeploymentRequestCriteriaBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPipelineRunCreateByDeploymentRequestCriteriaBody overwrites any union data inside the PipelineRunCreateByTriggerCriteriaBody as the provided PipelineRunCreateByDeploymentRequestCriteriaBody
func (t *PipelineRunCreateByTriggerCriteriaBody) FromPipelineRunCreateByDeploymentRequestCriteriaBody(v PipelineRunCreateByDeploymentRequestCriteriaBody) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePipelineRunCreateByDeploymentRequestCriteriaBody performs a merge with any union data inside the PipelineRunCreateByTriggerCriteriaBody, using the provided PipelineRunCreateByDeploymentRequestCriteriaBody
func (t *PipelineRunCreateByTriggerCriteriaBody) MergePipelineRunCreateByDeploymentRequestCriteriaBody(v PipelineRunCreateByDeploymentRequestCriteriaBody) error {
	t.Trigger = "deployment_request"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PipelineRunCreateByTriggerCriteriaBody) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"trigger"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PipelineRunCreateByTriggerCriteriaBody) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "deployment_request":
		return t.AsPipelineRunCreateByDeploymentRequestCriteriaBody()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PipelineRunCreateByTriggerCriteriaBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["trigger"], err = json.Marshal(t.Trigger)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PipelineRunCreateByTriggerCriteriaBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &t.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUserWithBody request with any body
	UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgents request
	ListAgents(ctx context.Context, orgId OrgIdPathParam, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAgentWithBody request with any body
	CreateAgentWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAgent(ctx context.Context, orgId OrgIdPathParam, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgent request
	DeleteAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAgentWithBody request with any body
	PatchAgentWithBody(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body PatchAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListKeysInAgent request
	ListKeysInAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKeyWithBody request with any body
	CreateKeyWithBody(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKey(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeyInAgent request
	DeleteKeyInAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, fingerprint FingerprintPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplications request
	ListApplications(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationWithBody request with any body
	CreateApplicationWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, orgId string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineApprovalRequests request
	ListPipelineApprovalRequests(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdDeltas request
	GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdDeltasWithBody request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDelta request
	GetDelta(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDeltaWithBody request with any body
	PutDeltaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDelta(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, orgId string, appId string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeployments request
	ListDeployments(ctx context.Context, orgId string, appId string, envId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploymentWithBody request with any body
	CreateDeploymentWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeployment(ctx context.Context, orgId string, appId string, envId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployment request
	GetDeployment(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploymentErrors request
	ListDeploymentErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebaseEnvironmentWithBody request with any body
	RebaseEnvironmentWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RebaseEnvironment(ctx context.Context, orgId string, appId string, envId string, body RebaseEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListActiveResources request
	ListActiveResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryResourceGraphWithBody request with any body
	QueryResourceGraphWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryResourceGraph(ctx context.Context, orgId string, appId string, envId string, body QueryResourceGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActiveResource request
	DeleteActiveResource(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRules request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuntime request
	GetRuntime(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePausedWithBody request with any body
	UpdatePausedWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePaused(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body UpdatePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReplicasWithBody request with any body
	PatchReplicasWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReplicas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body PatchReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdJobs request
	DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineCriteriaInApp request
	ListPipelineCriteriaInApp(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineCriteriaInAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineRunByTriggerCriteriaWithBody request with any body
	CreatePipelineRunByTriggerCriteriaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineRunByTriggerCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, body CreatePipelineRunByTriggerCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelines request
	ListPipelines(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineWithBody request with any body
	CreatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline request
	DeletePipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipeline request
	GetPipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineWithBody request with any body
	UpdatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineCriteriaWithBody request with any body
	CreatePipelineCriteriaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, body CreatePipelineCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineCriteria request
	DeletePipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineCriteria request
	GetPipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineRuns request
	ListPipelineRuns(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineRunWithBody request with any body
	CreatePipelineRunWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineRun request
	DeletePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineRun request
	GetPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPipelineRun request
	CancelPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineJobs request
	ListPipelineJobs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineJob request
	GetPipelineJob(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineApprovalRequest request
	GetPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApprovePipelineApprovalRequest request
	ApprovePipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DenyPipelineApprovalRequest request
	DenyPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineStepLogs request
	ListPipelineStepLogs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartPipelineRun request
	RestartPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineDefinition request
	GetPipelineDefinition(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineVersions request
	ListPipelineVersions(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRuntime request
	ListRuntime(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSets request
	GetSets(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetId request
	GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdSetsSetIdWithBody request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserRolesInApp request
	ListUserRolesInApp(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserRoleInAppWithBody request with any body
	CreateUserRoleInAppWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserRoleInApp(ctx context.Context, orgId string, appId string, body CreateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRoleInApp request
	DeleteUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleInApp request
	GetUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserRoleInAppWithBody request with any body
	UpdateUserRoleInAppWithBody(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, body UpdateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValues request
	DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValues request
	GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValuesWithBody request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdValuesKeyWithBody request with any body
	PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdValuesKeyWithBody request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooks request
	GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdWebhooksWithBody request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobId request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobId request
	GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody request with any body
	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefactVersionsInOrg request
	ListArtefactVersionsInOrg(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArtefactVersionWithBody request with any body
	CreateArtefactVersionWithBody(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArtefactVersion(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtefactVersion request
	GetArtefactVersion(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadArtefactVersionDeploymentSet request
	GetWorkloadArtefactVersionDeploymentSet(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionDeploymentSetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadArtefactVersionSpec request
	GetWorkloadArtefactVersionSpec(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefacts request
	ListArtefacts(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtefact request
	DeleteArtefact(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtefactVersions request
	ListArtefactVersions(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtefactVersionWithBody request with any body
	PatchArtefactVersionWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtefactVersion(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuditLogEntries request
	ListAuditLogEntries(ctx context.Context, orgId OrgIdPathParam, params *ListAuditLogEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironmentTypes request
	ListEnvironmentTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentTypeWithBody request with any body
	CreateEnvironmentTypeWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentType(ctx context.Context, orgId string, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentType request
	DeleteEnvironmentType(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentType request
	GetEnvironmentType(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserRoleInEnvTypeWithBody request with any body
	CreateUserRoleInEnvTypeWithBody(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserRoleInEnvType(ctx context.Context, orgId string, envType string, body CreateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRoleInEnvType request
	DeleteUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleInEnvType request
	GetUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserRoleInEnvTypeWithBody request with any body
	UpdateUserRoleInEnvTypeWithBody(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, body UpdateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEvents request
	GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHumanitecPublicKeys request
	ListHumanitecPublicKeys(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeprecatedImages request
	ListDeprecatedImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeprecatedImage request
	GetDeprecatedImage(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeprecatedImageBuilds request
	ListDeprecatedImageBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeprecatedImageBuildWithBody request with any body
	CreateDeprecatedImageBuildWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeprecatedImageBuild(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvitesInOrg request
	ListInvitesInOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInviteInOrgWithBody request with any body
	CreateInviteInOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInviteInOrg(ctx context.Context, orgId string, body CreateInviteInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPublicKeys request
	ListPublicKeys(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePublicKeyWithBody request with any body
	CreatePublicKeyWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePublicKey(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicKey request
	DeletePublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicKey request
	GetPublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineRunsByOrg request
	ListPipelineRunsByOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestPipelineDefinitionSchema request
	GetLatestPipelineDefinitionSchema(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelinesInOrg request
	ListPipelinesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdRegistriesWithBody request with any body
	PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdRegistriesRegId request
	DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegId request
	GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdRegistriesRegIdWithBody request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegIdCreds request
	GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceAccountTypes request
	ListResourceAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceAccounts request
	ListResourceAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceAccountWithBody request with any body
	CreateResourceAccountWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceAccount(ctx context.Context, orgId string, body CreateResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceAccount request
	DeleteResourceAccount(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceAccount request
	GetResourceAccount(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchResourceAccountWithBody request with any body
	PatchResourceAccountWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchResourceAccount(ctx context.Context, orgId string, accId string, body PatchResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceDefinitions request
	ListResourceDefinitions(ctx context.Context, orgId string, params *ListResourceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceDefinitionWithBody request with any body
	CreateResourceDefinitionWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceDefinition(ctx context.Context, orgId string, body CreateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceDefinition request
	DeleteResourceDefinition(ctx context.Context, orgId string, defId string, params *DeleteResourceDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceDefinition request
	GetResourceDefinition(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchResourceDefinitionWithBody request with any body
	PatchResourceDefinitionWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchResourceDefinition(ctx context.Context, orgId string, defId string, body PatchResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceDefinitionWithBody request with any body
	UpdateResourceDefinitionWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceDefinition(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceDefinitionCriteriaWithBody request with any body
	CreateResourceDefinitionCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, body CreateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceDefinitionCriteriaWithBody request with any body
	UpdateResourceDefinitionCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceDefinitionCriteria request
	DeleteResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteResourceDefinitionCriteriaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListActiveResourceByDefinition request
	ListActiveResourceByDefinition(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceDrivers request
	ListResourceDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceDriverWithBody request with any body
	CreateResourceDriverWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceDriver(ctx context.Context, orgId string, body CreateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceDriver request
	DeleteResourceDriver(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceDriver request
	GetResourceDriver(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceDriverWithBody request with any body
	UpdateResourceDriverWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceDriver(ctx context.Context, orgId string, driverId string, body UpdateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceTypes request
	ListResourceTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecretstores request
	GetOrgsOrgIdSecretstores(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdSecretstoresWithBody request with any body
	PostOrgsOrgIdSecretstoresWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdSecretstores(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdSecretstoresStoreId request
	DeleteOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecretstoresStoreId request
	GetOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdSecretstoresStoreIdWithBody request with any body
	PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserRolesInOrg request
	ListUserRolesInOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceUserInOrgWithBody request with any body
	CreateServiceUserInOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceUserInOrg(ctx context.Context, orgId string, body CreateServiceUserInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRoleInOrg request
	DeleteUserRoleInOrg(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleInOrg request
	GetUserRoleInOrg(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserRoleInOrgWithBody request with any body
	UpdateUserRoleInOrgWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserRoleInOrg(ctx context.Context, orgId string, userId string, body UpdateUserRoleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfileChartVersions request
	ListWorkloadProfileChartVersions(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkloadProfileChartVersionWithBody request with any body
	CreateWorkloadProfileChartVersionWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfileFeatures request
	ListWorkloadProfileFeatures(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfiles request
	ListWorkloadProfiles(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkloadProfileWithBody request with any body
	CreateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkloadProfile request
	DeleteWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadProfile request
	GetWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkloadProfileWithBody request with any body
	UpdateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body UpdateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkloadProfileVersions request
	ListWorkloadProfileVersions(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestWorkloadProfileVersion request
	GetLatestWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserTokens request
	ListUserTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserTokenWithBody request with any body
	CreateUserTokenWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserToken(ctx context.Context, userId string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserToken request
	DeleteUserToken(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserToken request
	GetUserToken(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgents(ctx context.Context, orgId OrgIdPathParam, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgent(ctx context.Context, orgId OrgIdPathParam, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentRequest(c.Server, orgId, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAgentWithBody(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAgentRequestWithBody(c.Server, orgId, agentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body PatchAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAgentRequest(c.Server, orgId, agentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListKeysInAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListKeysInAgentRequest(c.Server, orgId, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyWithBody(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyRequestWithBody(c.Server, orgId, agentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKey(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyRequest(c.Server, orgId, agentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeyInAgent(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, fingerprint FingerprintPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyInAgentRequest(c.Server, orgId, agentId, fingerprint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplications(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, orgId string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineApprovalRequests(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineApprovalRequestsRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDelta(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaRequest(c.Server, orgId, appId, deltaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeltaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeltaRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDelta(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeltaRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, orgId string, appId string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeployments(ctx context.Context, orgId string, appId string, envId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentsRequest(c.Server, orgId, appId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeployment(ctx context.Context, orgId string, appId string, envId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployment(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploymentErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentErrorsRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebaseEnvironmentWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebaseEnvironmentRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebaseEnvironment(ctx context.Context, orgId string, appId string, envId string, body RebaseEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebaseEnvironmentRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListActiveResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActiveResourcesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryResourceGraphWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryResourceGraphRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryResourceGraph(ctx context.Context, orgId string, appId string, envId string, body QueryResourceGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryResourceGraphRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActiveResource(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveResourceRequest(c.Server, orgId, appId, envId, pType, resId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(c.Server, orgId, appId, envId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuntime(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuntimeRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePausedWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePausedRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaused(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body UpdatePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePausedRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReplicasWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReplicasRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReplicas(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body PatchReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReplicasRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(c.Server, orgId, appId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, envId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, envId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(c.Server, orgId, appId, envId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(c.Server, orgId, appId, envId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdJobsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineCriteriaInApp(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineCriteriaInAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineCriteriaInAppRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRunByTriggerCriteriaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunByTriggerCriteriaRequestWithBody(c.Server, orgId, appId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRunByTriggerCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, body CreatePipelineRunByTriggerCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunByTriggerCriteriaRequest(c.Server, orgId, appId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelines(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelinesRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRequestWithBody(c.Server, orgId, appId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipeline(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequestWithBody(c.Server, orgId, appId, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineCriteriaWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineCriteriaRequestWithBody(c.Server, orgId, appId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, body CreatePipelineCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineCriteriaRequest(c.Server, orgId, appId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineCriteriaRequest(c.Server, orgId, appId, pipelineId, criteriaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineCriteria(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineCriteriaRequest(c.Server, orgId, appId, pipelineId, criteriaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineRuns(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineRunsRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRunWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunRequestWithBody(c.Server, orgId, appId, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineRunRequest(c.Server, orgId, appId, pipelineId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineJobs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineJobsRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineJob(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineJobRequest(c.Server, orgId, appId, pipelineId, runId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApprovePipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApprovePipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DenyPipelineApprovalRequest(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDenyPipelineApprovalRequestRequest(c.Server, orgId, appId, pipelineId, runId, jobId, approvalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineStepLogs(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineStepLogsRequest(c.Server, orgId, appId, pipelineId, runId, jobId, stepIndex, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartPipelineRun(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartPipelineRunRequest(c.Server, orgId, appId, pipelineId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineDefinition(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineDefinitionRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineVersions(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineVersionsRequest(c.Server, orgId, appId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRuntime(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRuntimeRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSets(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSetsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(c.Server, orgId, appId, setId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(c.Server, orgId, appId, setId, sourceSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserRolesInApp(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserRolesInAppRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserRoleInAppWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRoleInAppRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserRoleInApp(ctx context.Context, orgId string, appId string, body CreateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRoleInAppRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleInAppRequest(c.Server, orgId, appId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleInAppRequest(c.Server, orgId, appId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInAppWithBody(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInAppRequestWithBody(c.Server, orgId, appId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInApp(ctx context.Context, orgId string, appId string, userId string, body UpdateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInAppRequest(c.Server, orgId, appId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(c.Server, orgId, appId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(c.Server, orgId, appId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(c.Server, orgId, appId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefactVersionsInOrg(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactVersionsInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtefactVersionWithBody(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtefactVersionRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtefactVersion(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtefactVersionRequest(c.Server, orgId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtefactVersion(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtefactVersionRequest(c.Server, orgId, artefactVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadArtefactVersionDeploymentSet(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionDeploymentSetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadArtefactVersionDeploymentSetRequest(c.Server, orgId, artefactVersionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadArtefactVersionSpec(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadArtefactVersionSpecRequest(c.Server, orgId, artefactVersionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefacts(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtefact(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtefactRequest(c.Server, orgId, artefactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtefactVersions(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtefactVersionsRequest(c.Server, orgId, artefactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtefactVersionWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtefactVersionRequestWithBody(c.Server, orgId, artefactId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtefactVersion(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtefactVersionRequest(c.Server, orgId, artefactId, versionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuditLogEntries(ctx context.Context, orgId OrgIdPathParam, params *ListAuditLogEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditLogEntriesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironmentTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentTypeWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentTypeRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentType(ctx context.Context, orgId string, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentTypeRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentType(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentTypeRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentType(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentTypeRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserRoleInEnvTypeWithBody(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRoleInEnvTypeRequestWithBody(c.Server, orgId, envType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserRoleInEnvType(ctx context.Context, orgId string, envType string, body CreateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRoleInEnvTypeRequest(c.Server, orgId, envType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleInEnvTypeRequest(c.Server, orgId, envType, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleInEnvTypeRequest(c.Server, orgId, envType, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInEnvTypeWithBody(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInEnvTypeRequestWithBody(c.Server, orgId, envType, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInEnvType(ctx context.Context, orgId string, envType string, userId string, body UpdateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInEnvTypeRequest(c.Server, orgId, envType, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEventsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHumanitecPublicKeys(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHumanitecPublicKeysRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeprecatedImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeprecatedImagesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeprecatedImage(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeprecatedImageRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeprecatedImageBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeprecatedImageBuildsRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeprecatedImageBuildWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeprecatedImageBuildRequestWithBody(c.Server, orgId, imageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeprecatedImageBuild(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeprecatedImageBuildRequest(c.Server, orgId, imageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvitesInOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvitesInOrgRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInviteInOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInviteInOrgRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInviteInOrg(ctx context.Context, orgId string, body CreateInviteInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInviteInOrgRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPublicKeys(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPublicKeysRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicKeyWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicKeyRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicKey(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicKeyRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicKeyRequest(c.Server, orgId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicKey(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicKeyRequest(c.Server, orgId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineRunsByOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineRunsByOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestPipelineDefinitionSchema(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestPipelineDefinitionSchemaRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelinesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelinesInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(c.Server, orgId, regId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdCredsRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceAccountTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceAccountsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceAccountWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceAccountRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceAccount(ctx context.Context, orgId string, body CreateResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceAccountRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceAccount(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceAccountRequest(c.Server, orgId, accId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceAccount(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceAccountRequest(c.Server, orgId, accId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceAccountWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceAccountRequestWithBody(c.Server, orgId, accId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceAccount(ctx context.Context, orgId string, accId string, body PatchResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceAccountRequest(c.Server, orgId, accId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceDefinitions(ctx context.Context, orgId string, params *ListResourceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceDefinitionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDefinitionWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDefinitionRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDefinition(ctx context.Context, orgId string, body CreateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDefinitionRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceDefinition(ctx context.Context, orgId string, defId string, params *DeleteResourceDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceDefinitionRequest(c.Server, orgId, defId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceDefinition(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceDefinitionRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceDefinitionWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceDefinitionRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceDefinition(ctx context.Context, orgId string, defId string, body PatchResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceDefinitionRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDefinitionWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDefinitionRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDefinition(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDefinitionRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDefinitionCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDefinitionCriteriaRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, body CreateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDefinitionCriteriaRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDefinitionCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDefinitionCriteriaRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDefinitionCriteriaRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceDefinitionCriteria(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteResourceDefinitionCriteriaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceDefinitionCriteriaRequest(c.Server, orgId, defId, criteriaId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListActiveResourceByDefinition(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActiveResourceByDefinitionRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceDriversRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDriverWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDriverRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceDriver(ctx context.Context, orgId string, body CreateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceDriverRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceDriver(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceDriverRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceDriver(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceDriverRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDriverWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDriverRequestWithBody(c.Server, orgId, driverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceDriver(ctx context.Context, orgId string, driverId string, body UpdateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceDriverRequest(c.Server, orgId, driverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecretstores(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretstoresRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdSecretstoresWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdSecretstoresRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdSecretstores(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdSecretstoresRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(c.Server, orgId, storeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdSecretstoresStoreId(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdSecretstoresStoreIdRequest(c.Server, orgId, storeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserRolesInOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserRolesInOrgRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserInOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserInOrgRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserInOrg(ctx context.Context, orgId string, body CreateServiceUserInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserInOrgRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleInOrg(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleInOrgRequest(c.Server, orgId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleInOrg(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleInOrgRequest(c.Server, orgId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInOrgWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInOrgRequestWithBody(c.Server, orgId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInOrg(ctx context.Context, orgId string, userId string, body UpdateUserRoleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInOrgRequest(c.Server, orgId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfileChartVersions(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfileChartVersionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileChartVersionWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileChartVersionRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfileFeatures(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfileFeaturesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfiles(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfilesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkloadProfileRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkloadProfileRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadProfileRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkloadProfileWithBody(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkloadProfileRequestWithBody(c.Server, orgId, profileQid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkloadProfile(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body UpdateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkloadProfileRequest(c.Server, orgId, profileQid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkloadProfileVersions(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkloadProfileVersionsRequest(c.Server, orgId, profileQid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestWorkloadProfileVersion(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestWorkloadProfileVersionRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserTokensRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserTokenWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserTokenRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserToken(ctx context.Context, userId string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserTokenRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserToken(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTokenRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserToken(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTokenRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserRequest calls the generic UpdateCurrentUser builder with application/json body
func NewUpdateCurrentUserRequest(server string, body UpdateCurrentUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentUserRequestWithBody generates requests for UpdateCurrentUser with any type of body
func NewUpdateCurrentUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAgentsRequest generates requests for ListAgents
func NewListAgentsRequest(server string, orgId OrgIdPathParam, params *ListAgentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fingerprint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fingerprint", runtime.ParamLocationQuery, *params.Fingerprint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAgentRequest calls the generic CreateAgent builder with application/json body
func NewCreateAgentRequest(server string, orgId OrgIdPathParam, body CreateAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAgentRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateAgentRequestWithBody generates requests for CreateAgent with any type of body
func NewCreateAgentRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAgentRequest generates requests for DeleteAgent
func NewDeleteAgentRequest(server string, orgId OrgIdPathParam, agentId AgentIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAgentRequest calls the generic PatchAgent builder with application/json body
func NewPatchAgentRequest(server string, orgId OrgIdPathParam, agentId AgentIdPathParam, body PatchAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAgentRequestWithBody(server, orgId, agentId, "application/json", bodyReader)
}

// NewPatchAgentRequestWithBody generates requests for PatchAgent with any type of body
func NewPatchAgentRequestWithBody(server string, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListKeysInAgentRequest generates requests for ListKeysInAgent
func NewListKeysInAgentRequest(server string, orgId OrgIdPathParam, agentId AgentIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s/keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateKeyRequest calls the generic CreateKey builder with application/json body
func NewCreateKeyRequest(server string, orgId OrgIdPathParam, agentId AgentIdPathParam, body CreateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeyRequestWithBody(server, orgId, agentId, "application/json", bodyReader)
}

// NewCreateKeyRequestWithBody generates requests for CreateKey with any type of body
func NewCreateKeyRequestWithBody(server string, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s/keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyInAgentRequest generates requests for DeleteKeyInAgent
func NewDeleteKeyInAgentRequest(server string, orgId OrgIdPathParam, agentId AgentIdPathParam, fingerprint FingerprintPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "fingerprint", runtime.ParamLocationPath, fingerprint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s/keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationsRequest generates requests for ListApplications
func NewListApplicationsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, orgId string, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineApprovalRequestsRequest generates requests for ListPipelineApprovalRequests
func NewListPipelineApprovalRequestsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/approvals", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pipeline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipeline", runtime.ParamLocationQuery, *params.Pipeline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Run != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "run", runtime.ParamLocationQuery, *params.Run); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdDeltasRequest generates requests for GetOrgsOrgIdAppsAppIdDeltas
func NewGetOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *GetOrgsOrgIdAppsAppIdDeltasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequest calls the generic PostOrgsOrgIdAppsAppIdDeltas builder with application/json body
func NewPostOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdDeltas with any type of body
func NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeltaRequest generates requests for GetDelta
func NewGetDeltaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest calls the generic PatchOrgsOrgIdAppsAppIdDeltasDeltaId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdDeltasDeltaId with any type of body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDeltaRequest calls the generic PutDelta builder with application/json body
func NewPutDeltaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutDeltaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDeltaRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutDeltaRequestWithBody generates requests for PutDelta with any type of body
func NewPutDeltaRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/env_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/metadata/name", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, orgId string, appId string, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentsRequest generates requests for ListDeployments
func NewListDeploymentsRequest(server string, orgId string, appId string, envId string, params *ListDeploymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PipelineRunId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineRunId", runtime.ParamLocationQuery, *params.PipelineRunId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeploymentRequest calls the generic CreateDeployment builder with application/json body
func NewCreateDeploymentRequest(server string, orgId string, appId string, envId string, body CreateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeploymentRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewCreateDeploymentRequestWithBody generates requests for CreateDeployment with any type of body
func NewCreateDeploymentRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentErrorsRequest generates requests for ListDeploymentErrors
func NewListDeploymentErrorsRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s/errors", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRebaseEnvironmentRequest calls the generic RebaseEnvironment builder with application/json body
func NewRebaseEnvironmentRequest(server string, orgId string, appId string, envId string, body RebaseEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRebaseEnvironmentRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewRebaseEnvironmentRequestWithBody generates requests for RebaseEnvironment with any type of body
func NewRebaseEnvironmentRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/from_deploy_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListActiveResourcesRequest generates requests for ListActiveResources
func NewListActiveResourcesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryResourceGraphRequest calls the generic QueryResourceGraph builder with application/json body
func NewQueryResourceGraphRequest(server string, orgId string, appId string, envId string, body QueryResourceGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryResourceGraphRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewQueryResourceGraphRequestWithBody generates requests for QueryResourceGraph with any type of body
func NewQueryResourceGraphRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources/graph", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActiveResourceRequest generates requests for DeleteActiveResource
func NewDeleteActiveResourceRequest(server string, orgId string, appId string, envId string, pType string, resId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resId", runtime.ParamLocationPath, resId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRules
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdRules builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server, orgId, appId, envId, ruleId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server string, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRuntimeRequest generates requests for GetRuntime
func NewGetRuntimeRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePausedRequest calls the generic UpdatePaused builder with application/json body
func NewUpdatePausedRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body UpdatePausedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePausedRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewUpdatePausedRequestWithBody generates requests for UpdatePaused with any type of body
func NewUpdatePausedRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/paused", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReplicasRequest calls the generic PatchReplicas builder with application/json body
func NewPatchReplicasRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body PatchReplicasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReplicasRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPatchReplicasRequestWithBody generates requests for PatchReplicas with any type of body
func NewPatchReplicasRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/replicas", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(server string, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyChanged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, envId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest calls the generic PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server, orgId, appId, envId, key, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey with any type of body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server string, orgId string, appId string, envId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server, orgId, appId, envId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server string, orgId string, appId string, envId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdJobsRequest generates requests for DeleteOrgsOrgIdAppsAppIdJobs
func NewDeleteOrgsOrgIdAppsAppIdJobsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/jobs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineCriteriaInAppRequest generates requests for ListPipelineCriteriaInApp
func NewListPipelineCriteriaInAppRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineCriteriaInAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipeline-criteria", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pipeline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipeline", runtime.ParamLocationQuery, *params.Pipeline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Match != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "match", runtime.ParamLocationQuery, *params.Match); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineRunByTriggerCriteriaRequest calls the generic CreatePipelineRunByTriggerCriteria builder with application/json body
func NewCreatePipelineRunByTriggerCriteriaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, body CreatePipelineRunByTriggerCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineRunByTriggerCriteriaRequestWithBody(server, orgId, appId, params, "application/json", bodyReader)
}

// NewCreatePipelineRunByTriggerCriteriaRequestWithBody generates requests for CreatePipelineRunByTriggerCriteria with any type of body
func NewCreatePipelineRunByTriggerCriteriaRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipeline-runs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Idempotency-Key", headerParam0)
		}

	}

	return req, nil
}

// NewListPipelinesRequest generates requests for ListPipelines
func NewListPipelinesRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trigger != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger", runtime.ParamLocationQuery, *params.Trigger); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineRequestWithBody generates requests for CreatePipeline with any type of body
func NewCreatePipelineRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineRequest generates requests for DeletePipeline
func NewDeletePipelineRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetPipelineRequest generates requests for GetPipeline
func NewGetPipelineRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineRequestWithBody generates requests for UpdatePipeline with any type of body
func NewUpdatePipelineRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewCreatePipelineCriteriaRequest calls the generic CreatePipelineCriteria builder with application/json body
func NewCreatePipelineCriteriaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, body CreatePipelineCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineCriteriaRequestWithBody(server, orgId, appId, pipelineId, "application/json", bodyReader)
}

// NewCreatePipelineCriteriaRequestWithBody generates requests for CreatePipelineCriteria with any type of body
func NewCreatePipelineCriteriaRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/criteria", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineCriteriaRequest generates requests for DeletePipelineCriteria
func NewDeletePipelineCriteriaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "criteriaId", runtime.ParamLocationPath, criteriaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/criteria/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineCriteriaRequest generates requests for GetPipelineCriteria
func NewGetPipelineCriteriaRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "criteriaId", runtime.ParamLocationPath, criteriaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/criteria/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineRunsRequest generates requests for ListPipelineRuns
func NewListPipelineRunsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Completed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineRunRequest calls the generic CreatePipelineRun builder with application/json body
func NewCreatePipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineRunRequestWithBody(server, orgId, appId, pipelineId, params, "application/json", bodyReader)
}

// NewCreatePipelineRunRequestWithBody generates requests for CreatePipelineRun with any type of body
func NewCreatePipelineRunRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Idempotency-Key", headerParam0)
		}

	}

	return req, nil
}

// NewDeletePipelineRunRequest generates requests for DeletePipelineRun
func NewDeletePipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetPipelineRunRequest generates requests for GetPipelineRun
func NewGetPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPipelineRunRequest generates requests for CancelPipelineRun
func NewCancelPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/cancel", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewListPipelineJobsRequest generates requests for ListPipelineJobs
func NewListPipelineJobsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineJobRequest generates requests for GetPipelineJob
func NewGetPipelineJobRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineApprovalRequestRequest generates requests for GetPipelineApprovalRequest
func NewGetPipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApprovePipelineApprovalRequestRequest generates requests for ApprovePipelineApprovalRequest
func NewApprovePipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s/approve", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDenyPipelineApprovalRequestRequest generates requests for DenyPipelineApprovalRequest
func NewDenyPipelineApprovalRequestRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "approvalId", runtime.ParamLocationPath, approvalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/approvals/%s/deny", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineStepLogsRequest generates requests for ListPipelineStepLogs
func NewListPipelineStepLogsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "stepIndex", runtime.ParamLocationPath, stepIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/jobs/%s/steps/%s/logs", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartPipelineRunRequest generates requests for RestartPipelineRun
func NewRestartPipelineRunRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/runs/%s/restart", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Idempotency-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetPipelineDefinitionRequest generates requests for GetPipelineDefinition
func NewGetPipelineDefinitionRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/schema", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewListPipelineVersionsRequest generates requests for ListPipelineVersions
func NewListPipelineVersionsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/pipelines/%s/versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRuntimeRequest generates requests for ListRuntime
func NewListRuntimeRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, params *ListRuntimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/runtime", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSetsRequest generates requests for GetSets
func NewGetSetsRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Diff != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "diff", runtime.ParamLocationQuery, *params.Diff); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest calls the generic PostOrgsOrgIdAppsAppIdSetsSetId builder with application/json body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server, orgId, appId, setId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdSetsSetId with any type of body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server string, orgId OrgIdPathParam, appId AppIdPathParam, setId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(server string, orgId OrgIdPathParam, appId AppIdPathParam, setId string, sourceSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sourceSetId", runtime.ParamLocationPath, sourceSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s/diff/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserRolesInAppRequest generates requests for ListUserRolesInApp
func NewListUserRolesInAppRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRoleInAppRequest calls the generic CreateUserRoleInApp builder with application/json body
func NewCreateUserRoleInAppRequest(server string, orgId string, appId string, body CreateUserRoleInAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRoleInAppRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewCreateUserRoleInAppRequestWithBody generates requests for CreateUserRoleInApp with any type of body
func NewCreateUserRoleInAppRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRoleInAppRequest generates requests for DeleteUserRoleInApp
func NewDeleteUserRoleInAppRequest(server string, orgId string, appId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleInAppRequest generates requests for GetUserRoleInApp
func NewGetUserRoleInAppRequest(server string, orgId string, appId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRoleInAppRequest calls the generic UpdateUserRoleInApp builder with application/json body
func NewUpdateUserRoleInAppRequest(server string, orgId string, appId string, userId string, body UpdateUserRoleInAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRoleInAppRequestWithBody(server, orgId, appId, userId, "application/json", bodyReader)
}

// NewUpdateUserRoleInAppRequestWithBody generates requests for UpdateUserRoleInApp with any type of body
func NewUpdateUserRoleInAppRequestWithBody(server string, orgId string, appId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyChanged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdValues
func NewDeleteOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdValues
func NewGetOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest calls the generic PatchOrgsOrgIdAppsAppIdValuesKey builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server, orgId, appId, key, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdValuesKey with any type of body
func NewPatchOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server string, orgId string, appId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server, orgId, appId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server string, orgId string, appId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooks
func NewGetOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequest calls the generic PostOrgsOrgIdAppsAppIdWebhooks builder with application/json body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdWebhooks with any type of body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdWebhooksJobId
func NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooksJobId
func NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest calls the generic PatchOrgsOrgIdAppsAppIdWebhooksJobId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server, orgId, appId, jobId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdWebhooksJobId with any type of body
func NewPatchOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server string, orgId string, appId string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListArtefactVersionsInOrgRequest generates requests for ListArtefactVersionsInOrg
func NewListArtefactVersionsInOrgRequest(server string, orgId string, params *ListArtefactVersionsInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArtefactVersionRequest calls the generic CreateArtefactVersion builder with application/json body
func NewCreateArtefactVersionRequest(server string, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArtefactVersionRequestWithBody(server, orgId, params, "application/json", bodyReader)
}

// NewCreateArtefactVersionRequestWithBody generates requests for CreateArtefactVersion with any type of body
func NewCreateArtefactVersionRequestWithBody(server string, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Vcs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcs", runtime.ParamLocationQuery, *params.Vcs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtefactVersionRequest generates requests for GetArtefactVersion
func NewGetArtefactVersionRequest(server string, orgId string, artefactVersionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactVersionId", runtime.ParamLocationPath, artefactVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadArtefactVersionDeploymentSetRequest generates requests for GetWorkloadArtefactVersionDeploymentSet
func NewGetWorkloadArtefactVersionDeploymentSetRequest(server string, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionDeploymentSetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactVersionId", runtime.ParamLocationPath, artefactVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions/%s/workload-deployment-set", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewGetWorkloadArtefactVersionSpecRequest generates requests for GetWorkloadArtefactVersionSpec
func NewGetWorkloadArtefactVersionSpecRequest(server string, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionSpecParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactVersionId", runtime.ParamLocationPath, artefactVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions/%s/workload-spec", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewListArtefactsRequest generates requests for ListArtefacts
func NewListArtefactsRequest(server string, orgId string, params *ListArtefactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtefactRequest generates requests for DeleteArtefact
func NewDeleteArtefactRequest(server string, orgId string, artefactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListArtefactVersionsRequest generates requests for ListArtefactVersions
func NewListArtefactVersionsRequest(server string, orgId string, artefactId string, params *ListArtefactVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtefactVersionRequest calls the generic PatchArtefactVersion builder with application/json body
func NewPatchArtefactVersionRequest(server string, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtefactVersionRequestWithBody(server, orgId, artefactId, versionId, "application/json", bodyReader)
}

// NewPatchArtefactVersionRequestWithBody generates requests for PatchArtefactVersion with any type of body
func NewPatchArtefactVersionRequestWithBody(server string, orgId string, artefactId string, versionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAuditLogEntriesRequest generates requests for ListAuditLogEntries
func NewListAuditLogEntriesRequest(server string, orgId OrgIdPathParam, params *ListAuditLogEntriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/audit-logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentTypesRequest generates requests for ListEnvironmentTypes
func NewListEnvironmentTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentTypeRequest calls the generic CreateEnvironmentType builder with application/json body
func NewCreateEnvironmentTypeRequest(server string, orgId string, body CreateEnvironmentTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentTypeRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateEnvironmentTypeRequestWithBody generates requests for CreateEnvironmentType with any type of body
func NewCreateEnvironmentTypeRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentTypeRequest generates requests for DeleteEnvironmentType
func NewDeleteEnvironmentTypeRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentTypeRequest generates requests for GetEnvironmentType
func NewGetEnvironmentTypeRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRoleInEnvTypeRequest calls the generic CreateUserRoleInEnvType builder with application/json body
func NewCreateUserRoleInEnvTypeRequest(server string, orgId string, envType string, body CreateUserRoleInEnvTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRoleInEnvTypeRequestWithBody(server, orgId, envType, "application/json", bodyReader)
}

// NewCreateUserRoleInEnvTypeRequestWithBody generates requests for CreateUserRoleInEnvType with any type of body
func NewCreateUserRoleInEnvTypeRequestWithBody(server string, orgId string, envType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRoleInEnvTypeRequest generates requests for DeleteUserRoleInEnvType
func NewDeleteUserRoleInEnvTypeRequest(server string, orgId string, envType string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleInEnvTypeRequest generates requests for GetUserRoleInEnvType
func NewGetUserRoleInEnvTypeRequest(server string, orgId string, envType string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRoleInEnvTypeRequest calls the generic UpdateUserRoleInEnvType builder with application/json body
func NewUpdateUserRoleInEnvTypeRequest(server string, orgId string, envType string, userId string, body UpdateUserRoleInEnvTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRoleInEnvTypeRequestWithBody(server, orgId, envType, userId, "application/json", bodyReader)
}

// NewUpdateUserRoleInEnvTypeRequestWithBody generates requests for UpdateUserRoleInEnvType with any type of body
func NewUpdateUserRoleInEnvTypeRequestWithBody(server string, orgId string, envType string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdEventsRequest generates requests for GetOrgsOrgIdEvents
func NewGetOrgsOrgIdEventsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHumanitecPublicKeysRequest generates requests for ListHumanitecPublicKeys
func NewListHumanitecPublicKeysRequest(server string, orgId string, params *ListHumanitecPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/humanitec-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeprecatedImagesRequest generates requests for ListDeprecatedImages
func NewListDeprecatedImagesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeprecatedImageRequest generates requests for GetDeprecatedImage
func NewGetDeprecatedImageRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeprecatedImageBuildsRequest generates requests for ListDeprecatedImageBuilds
func NewListDeprecatedImageBuildsRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeprecatedImageBuildRequest calls the generic CreateDeprecatedImageBuild builder with application/json body
func NewCreateDeprecatedImageBuildRequest(server string, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeprecatedImageBuildRequestWithBody(server, orgId, imageId, "application/json", bodyReader)
}

// NewCreateDeprecatedImageBuildRequestWithBody generates requests for CreateDeprecatedImageBuild with any type of body
func NewCreateDeprecatedImageBuildRequestWithBody(server string, orgId string, imageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInvitesInOrgRequest generates requests for ListInvitesInOrg
func NewListInvitesInOrgRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInviteInOrgRequest calls the generic CreateInviteInOrg builder with application/json body
func NewCreateInviteInOrgRequest(server string, orgId string, body CreateInviteInOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInviteInOrgRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateInviteInOrgRequestWithBody generates requests for CreateInviteInOrg with any type of body
func NewCreateInviteInOrgRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPublicKeysRequest generates requests for ListPublicKeys
func NewListPublicKeysRequest(server string, orgId string, params *ListPublicKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fingerprint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fingerprint", runtime.ParamLocationQuery, *params.Fingerprint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePublicKeyRequest calls the generic CreatePublicKey builder with application/json body
func NewCreatePublicKeyRequest(server string, orgId string, body CreatePublicKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePublicKeyRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreatePublicKeyRequestWithBody generates requests for CreatePublicKey with any type of body
func NewCreatePublicKeyRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePublicKeyRequest generates requests for DeletePublicKey
func NewDeletePublicKeyRequest(server string, orgId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicKeyRequest generates requests for GetPublicKey
func NewGetPublicKeyRequest(server string, orgId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineRunsByOrgRequest generates requests for ListPipelineRunsByOrg
func NewListPipelineRunsByOrgRequest(server string, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipeline-runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pipeline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipeline", runtime.ParamLocationQuery, *params.Pipeline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Completed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestPipelineDefinitionSchemaRequest generates requests for GetLatestPipelineDefinitionSchema
func NewGetLatestPipelineDefinitionSchemaRequest(server string, orgId OrgIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipeline-schemas/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelinesInOrgRequest generates requests for ListPipelinesInOrg
func NewListPipelinesInOrgRequest(server string, orgId OrgIdPathParam, params *ListPipelinesInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trigger != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger", runtime.ParamLocationQuery, *params.Trigger); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRequest generates requests for GetOrgsOrgIdRegistries
func NewGetOrgsOrgIdRegistriesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdRegistriesRequest calls the generic PostOrgsOrgIdRegistries builder with application/json body
func NewPostOrgsOrgIdRegistriesRequest(server string, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdRegistriesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdRegistriesRequestWithBody generates requests for PostOrgsOrgIdRegistries with any type of body
func NewPostOrgsOrgIdRegistriesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdRegistriesRegIdRequest generates requests for DeleteOrgsOrgIdRegistriesRegId
func NewDeleteOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdRequest generates requests for GetOrgsOrgIdRegistriesRegId
func NewGetOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdRegistriesRegIdRequest calls the generic PatchOrgsOrgIdRegistriesRegId builder with application/json body
func NewPatchOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server, orgId, regId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody generates requests for PatchOrgsOrgIdRegistriesRegId with any type of body
func NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server string, orgId string, regId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdCredsRequest generates requests for GetOrgsOrgIdRegistriesRegIdCreds
func NewGetOrgsOrgIdRegistriesRegIdCredsRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s/creds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResourceAccountTypesRequest generates requests for ListResourceAccountTypes
func NewListResourceAccountTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/account-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResourceAccountsRequest generates requests for ListResourceAccounts
func NewListResourceAccountsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceAccountRequest calls the generic CreateResourceAccount builder with application/json body
func NewCreateResourceAccountRequest(server string, orgId string, body CreateResourceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceAccountRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateResourceAccountRequestWithBody generates requests for CreateResourceAccount with any type of body
func NewCreateResourceAccountRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceAccountRequest generates requests for DeleteResourceAccount
func NewDeleteResourceAccountRequest(server string, orgId string, accId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceAccountRequest generates requests for GetResourceAccount
func NewGetResourceAccountRequest(server string, orgId string, accId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchResourceAccountRequest calls the generic PatchResourceAccount builder with application/json body
func NewPatchResourceAccountRequest(server string, orgId string, accId string, body PatchResourceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchResourceAccountRequestWithBody(server, orgId, accId, "application/json", bodyReader)
}

// NewPatchResourceAccountRequestWithBody generates requests for PatchResourceAccount with any type of body
func NewPatchResourceAccountRequestWithBody(server string, orgId string, accId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListResourceDefinitionsRequest generates requests for ListResourceDefinitions
func NewListResourceDefinitionsRequest(server string, orgId string, params *ListResourceDefinitionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Env != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env_type", runtime.ParamLocationQuery, *params.EnvType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Res != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res", runtime.ParamLocationQuery, *params.Res); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res_type", runtime.ParamLocationQuery, *params.ResType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Class != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "class", runtime.ParamLocationQuery, *params.Class); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceDefinitionRequest calls the generic CreateResourceDefinition builder with application/json body
func NewCreateResourceDefinitionRequest(server string, orgId string, body CreateResourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceDefinitionRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateResourceDefinitionRequestWithBody generates requests for CreateResourceDefinition with any type of body
func NewCreateResourceDefinitionRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceDefinitionRequest generates requests for DeleteResourceDefinition
func NewDeleteResourceDefinitionRequest(server string, orgId string, defId string, params *DeleteResourceDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceDefinitionRequest generates requests for GetResourceDefinition
func NewGetResourceDefinitionRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchResourceDefinitionRequest calls the generic PatchResourceDefinition builder with application/json body
func NewPatchResourceDefinitionRequest(server string, orgId string, defId string, body PatchResourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchResourceDefinitionRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPatchResourceDefinitionRequestWithBody generates requests for PatchResourceDefinition with any type of body
func NewPatchResourceDefinitionRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateResourceDefinitionRequest calls the generic UpdateResourceDefinition builder with application/json body
func NewUpdateResourceDefinitionRequest(server string, orgId string, defId string, body UpdateResourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceDefinitionRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewUpdateResourceDefinitionRequestWithBody generates requests for UpdateResourceDefinition with any type of body
func NewUpdateResourceDefinitionRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateResourceDefinitionCriteriaRequest calls the generic CreateResourceDefinitionCriteria builder with application/json body
func NewCreateResourceDefinitionCriteriaRequest(server string, orgId string, defId string, body CreateResourceDefinitionCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceDefinitionCriteriaRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewCreateResourceDefinitionCriteriaRequestWithBody generates requests for CreateResourceDefinitionCriteria with any type of body
func NewCreateResourceDefinitionCriteriaRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateResourceDefinitionCriteriaRequest calls the generic UpdateResourceDefinitionCriteria builder with application/json body
func NewUpdateResourceDefinitionCriteriaRequest(server string, orgId string, defId string, body UpdateResourceDefinitionCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceDefinitionCriteriaRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewUpdateResourceDefinitionCriteriaRequestWithBody generates requests for UpdateResourceDefinitionCriteria with any type of body
func NewUpdateResourceDefinitionCriteriaRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceDefinitionCriteriaRequest generates requests for DeleteResourceDefinitionCriteria
func NewDeleteResourceDefinitionCriteriaRequest(server string, orgId string, defId string, criteriaId string, params *DeleteResourceDefinitionCriteriaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "criteriaId", runtime.ParamLocationPath, criteriaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListActiveResourceByDefinitionRequest generates requests for ListActiveResourceByDefinition
func NewListActiveResourceByDefinitionRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/resources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResourceDriversRequest generates requests for ListResourceDrivers
func NewListResourceDriversRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceDriverRequest calls the generic CreateResourceDriver builder with application/json body
func NewCreateResourceDriverRequest(server string, orgId string, body CreateResourceDriverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceDriverRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateResourceDriverRequestWithBody generates requests for CreateResourceDriver with any type of body
func NewCreateResourceDriverRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceDriverRequest generates requests for DeleteResourceDriver
func NewDeleteResourceDriverRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceDriverRequest generates requests for GetResourceDriver
func NewGetResourceDriverRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceDriverRequest calls the generic UpdateResourceDriver builder with application/json body
func NewUpdateResourceDriverRequest(server string, orgId string, driverId string, body UpdateResourceDriverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceDriverRequestWithBody(server, orgId, driverId, "application/json", bodyReader)
}

// NewUpdateResourceDriverRequestWithBody generates requests for UpdateResourceDriver with any type of body
func NewUpdateResourceDriverRequestWithBody(server string, orgId string, driverId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListResourceTypesRequest generates requests for ListResourceTypes
func NewListResourceTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdSecretstoresRequest generates requests for GetOrgsOrgIdSecretstores
func NewGetOrgsOrgIdSecretstoresRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdSecretstoresRequest calls the generic PostOrgsOrgIdSecretstores builder with application/json body
func NewPostOrgsOrgIdSecretstoresRequest(server string, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdSecretstoresRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdSecretstoresRequestWithBody generates requests for PostOrgsOrgIdSecretstores with any type of body
func NewPostOrgsOrgIdSecretstoresRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdSecretstoresStoreIdRequest generates requests for DeleteOrgsOrgIdSecretstoresStoreId
func NewDeleteOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdSecretstoresStoreIdRequest generates requests for GetOrgsOrgIdSecretstoresStoreId
func NewGetOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdSecretstoresStoreIdRequest calls the generic PatchOrgsOrgIdSecretstoresStoreId builder with application/json body
func NewPatchOrgsOrgIdSecretstoresStoreIdRequest(server string, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(server, orgId, storeId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody generates requests for PatchOrgsOrgIdSecretstoresStoreId with any type of body
func NewPatchOrgsOrgIdSecretstoresStoreIdRequestWithBody(server string, orgId string, storeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secretstores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserRolesInOrgRequest generates requests for ListUserRolesInOrg
func NewListUserRolesInOrgRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceUserInOrgRequest calls the generic CreateServiceUserInOrg builder with application/json body
func NewCreateServiceUserInOrgRequest(server string, orgId string, body CreateServiceUserInOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceUserInOrgRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateServiceUserInOrgRequestWithBody generates requests for CreateServiceUserInOrg with any type of body
func NewCreateServiceUserInOrgRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRoleInOrgRequest generates requests for DeleteUserRoleInOrg
func NewDeleteUserRoleInOrgRequest(server string, orgId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleInOrgRequest generates requests for GetUserRoleInOrg
func NewGetUserRoleInOrgRequest(server string, orgId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRoleInOrgRequest calls the generic UpdateUserRoleInOrg builder with application/json body
func NewUpdateUserRoleInOrgRequest(server string, orgId string, userId string, body UpdateUserRoleInOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRoleInOrgRequestWithBody(server, orgId, userId, "application/json", bodyReader)
}

// NewUpdateUserRoleInOrgRequestWithBody generates requests for UpdateUserRoleInOrg with any type of body
func NewUpdateUserRoleInOrgRequestWithBody(server string, orgId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfileChartVersionsRequest generates requests for ListWorkloadProfileChartVersions
func NewListWorkloadProfileChartVersionsRequest(server string, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profile-chart-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkloadProfileChartVersionRequestWithBody generates requests for CreateWorkloadProfileChartVersion with any type of body
func NewCreateWorkloadProfileChartVersionRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profile-chart-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfileFeaturesRequest generates requests for ListWorkloadProfileFeatures
func NewListWorkloadProfileFeaturesRequest(server string, orgId OrgIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profile-features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkloadProfilesRequest generates requests for ListWorkloadProfiles
func NewListWorkloadProfilesRequest(server string, orgId OrgIdPathParam, params *ListWorkloadProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deprecated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deprecated", runtime.ParamLocationQuery, *params.Deprecated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkloadProfileRequest calls the generic CreateWorkloadProfile builder with application/json body
func NewCreateWorkloadProfileRequest(server string, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkloadProfileRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateWorkloadProfileRequestWithBody generates requests for CreateWorkloadProfile with any type of body
func NewCreateWorkloadProfileRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkloadProfileRequest generates requests for DeleteWorkloadProfile
func NewDeleteWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadProfileRequest generates requests for GetWorkloadProfile
func NewGetWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkloadProfileRequest calls the generic UpdateWorkloadProfile builder with application/json body
func NewUpdateWorkloadProfileRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body UpdateWorkloadProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkloadProfileRequestWithBody(server, orgId, profileQid, "application/json", bodyReader)
}

// NewUpdateWorkloadProfileRequestWithBody generates requests for UpdateWorkloadProfile with any type of body
func NewUpdateWorkloadProfileRequestWithBody(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkloadProfileVersionsRequest generates requests for ListWorkloadProfileVersions
func NewListWorkloadProfileVersionsRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestWorkloadProfileVersionRequest generates requests for GetLatestWorkloadProfileVersion
func NewGetLatestWorkloadProfileVersionRequest(server string, orgId OrgIdPathParam, profileQid ProfileQidPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions/latest", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserTokensRequest generates requests for ListUserTokens
func NewListUserTokensRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserTokenRequest calls the generic CreateUserToken builder with application/json body
func NewCreateUserTokenRequest(server string, userId string, body CreateUserTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserTokenRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCreateUserTokenRequestWithBody generates requests for CreateUserToken with any type of body
func NewCreateUserTokenRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserTokenRequest generates requests for DeleteUserToken
func NewDeleteUserTokenRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTokenRequest generates requests for GetUserToken
func NewGetUserTokenRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCurrentUserWithResponse request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// UpdateCurrentUserWithBodyWithResponse request with any body
	UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)

	UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)

	// ListOrganizationsWithResponse request
	ListOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// ListAgentsWithResponse request
	ListAgentsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error)

	// CreateAgentWithBodyWithResponse request with any body
	CreateAgentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	CreateAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	// DeleteAgentWithResponse request
	DeleteAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error)

	// PatchAgentWithBodyWithResponse request with any body
	PatchAgentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAgentResponse, error)

	PatchAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body PatchAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAgentResponse, error)

	// ListKeysInAgentWithResponse request
	ListKeysInAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*ListKeysInAgentResponse, error)

	// CreateKeyWithBodyWithResponse request with any body
	CreateKeyWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyResponse, error)

	CreateKeyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyResponse, error)

	// DeleteKeyInAgentWithResponse request
	DeleteKeyInAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, fingerprint FingerprintPathParam, reqEditors ...RequestEditorFn) (*DeleteKeyInAgentResponse, error)

	// ListApplicationsWithResponse request
	ListApplicationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error)

	// CreateApplicationWithBodyWithResponse request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, orgId string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// DeleteApplicationWithResponse request
	DeleteApplicationWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// GetApplicationWithResponse request
	GetApplicationWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// ListPipelineApprovalRequestsWithResponse request
	ListPipelineApprovalRequestsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*ListPipelineApprovalRequestsResponse, error)

	// GetOrgsOrgIdAppsAppIdDeltasWithResponse request
	GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error)

	// PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	// GetDeltaWithResponse request
	GetDeltaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, reqEditors ...RequestEditorFn) (*GetDeltaResponse, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	// PutDeltaWithBodyWithResponse request with any body
	PutDeltaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error)

	PutDeltaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error)

	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, orgId string, appId string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// ListDeploymentsWithResponse request
	ListDeploymentsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error)

	// CreateDeploymentWithBodyWithResponse request with any body
	CreateDeploymentWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	CreateDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	// GetDeploymentWithResponse request
	GetDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error)

	// ListDeploymentErrorsWithResponse request
	ListDeploymentErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*ListDeploymentErrorsResponse, error)

	// RebaseEnvironmentWithBodyWithResponse request with any body
	RebaseEnvironmentWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RebaseEnvironmentResponse, error)

	RebaseEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, body RebaseEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RebaseEnvironmentResponse, error)

	// ListActiveResourcesWithResponse request
	ListActiveResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*ListActiveResourcesResponse, error)

	// QueryResourceGraphWithBodyWithResponse request with any body
	QueryResourceGraphWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryResourceGraphResponse, error)

	QueryResourceGraphWithResponse(ctx context.Context, orgId string, appId string, envId string, body QueryResourceGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryResourceGraphResponse, error)

	// DeleteActiveResourceWithResponse request
	DeleteActiveResourceWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteActiveResourceResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetRuntimeWithResponse request
	GetRuntimeWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*GetRuntimeResponse, error)

	// UpdatePausedWithBodyWithResponse request with any body
	UpdatePausedWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePausedResponse, error)

	UpdatePausedWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body UpdatePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePausedResponse, error)

	// PatchReplicasWithBodyWithResponse request with any body
	PatchReplicasWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReplicasResponse, error)

	PatchReplicasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body PatchReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReplicasResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdJobsWithResponse request
	DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error)

	// ListPipelineCriteriaInAppWithResponse request
	ListPipelineCriteriaInAppWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineCriteriaInAppParams, reqEditors ...RequestEditorFn) (*ListPipelineCriteriaInAppResponse, error)

	// CreatePipelineRunByTriggerCriteriaWithBodyWithResponse request with any body
	CreatePipelineRunByTriggerCriteriaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunByTriggerCriteriaResponse, error)

	CreatePipelineRunByTriggerCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, body CreatePipelineRunByTriggerCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunByTriggerCriteriaResponse, error)

	// ListPipelinesWithResponse request
	ListPipelinesWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*ListPipelinesResponse, error)

	// CreatePipelineWithBodyWithResponse request with any body
	CreatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineResponse, error)

	// DeletePipelineWithResponse request
	DeletePipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error)

	// GetPipelineWithResponse request
	GetPipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error)

	// UpdatePipelineWithBodyWithResponse request with any body
	UpdatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error)

	// CreatePipelineCriteriaWithBodyWithResponse request with any body
	CreatePipelineCriteriaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineCriteriaResponse, error)

	CreatePipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, body CreatePipelineCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineCriteriaResponse, error)

	// DeletePipelineCriteriaWithResponse request
	DeletePipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*DeletePipelineCriteriaResponse, error)

	// GetPipelineCriteriaWithResponse request
	GetPipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*GetPipelineCriteriaResponse, error)

	// ListPipelineRunsWithResponse request
	ListPipelineRunsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsResponse, error)

	// CreatePipelineRunWithBodyWithResponse request with any body
	CreatePipelineRunWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error)

	CreatePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error)

	// DeletePipelineRunWithResponse request
	DeletePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*DeletePipelineRunResponse, error)

	// GetPipelineRunWithResponse request
	GetPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineRunResponse, error)

	// CancelPipelineRunWithResponse request
	CancelPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*CancelPipelineRunResponse, error)

	// ListPipelineJobsWithResponse request
	ListPipelineJobsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*ListPipelineJobsResponse, error)

	// GetPipelineJobWithResponse request
	GetPipelineJobWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineJobResponse, error)

	// GetPipelineApprovalRequestWithResponse request
	GetPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineApprovalRequestResponse, error)

	// ApprovePipelineApprovalRequestWithResponse request
	ApprovePipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*ApprovePipelineApprovalRequestResponse, error)

	// DenyPipelineApprovalRequestWithResponse request
	DenyPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*DenyPipelineApprovalRequestResponse, error)

	// ListPipelineStepLogsWithResponse request
	ListPipelineStepLogsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*ListPipelineStepLogsResponse, error)

	// RestartPipelineRunWithResponse request
	RestartPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*RestartPipelineRunResponse, error)

	// GetPipelineDefinitionWithResponse request
	GetPipelineDefinitionWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*GetPipelineDefinitionResponse, error)

	// ListPipelineVersionsWithResponse request
	ListPipelineVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*ListPipelineVersionsResponse, error)

	// ListRuntimeWithResponse request
	ListRuntimeWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListRuntimeParams, reqEditors ...RequestEditorFn) (*ListRuntimeResponse, error)

	// GetSetsWithResponse request
	GetSetsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, reqEditors ...RequestEditorFn) (*GetSetsResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse request
	GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error)

	// ListUserRolesInAppWithResponse request
	ListUserRolesInAppWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*ListUserRolesInAppResponse, error)

	// CreateUserRoleInAppWithBodyWithResponse request with any body
	CreateUserRoleInAppWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserRoleInAppResponse, error)

	CreateUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, body CreateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserRoleInAppResponse, error)

	// DeleteUserRoleInAppWithResponse request
	DeleteUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInAppResponse, error)

	// GetUserRoleInAppWithResponse request
	GetUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInAppResponse, error)

	// UpdateUserRoleInAppWithBodyWithResponse request with any body
	UpdateUserRoleInAppWithBodyWithResponse(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInAppResponse, error)

	UpdateUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, body UpdateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInAppResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse request
	GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValuesWithResponse request
	DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdValuesWithResponse request
	GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse request
	DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with any body
	PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooksWithResponse request
	GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request
	GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse request with any body
	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// ListArtefactVersionsInOrgWithResponse request
	ListArtefactVersionsInOrgWithResponse(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsInOrgResponse, error)

	// CreateArtefactVersionWithBodyWithResponse request with any body
	CreateArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error)

	CreateArtefactVersionWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error)

	// GetArtefactVersionWithResponse request
	GetArtefactVersionWithResponse(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*GetArtefactVersionResponse, error)

	// GetWorkloadArtefactVersionDeploymentSetWithResponse request
	GetWorkloadArtefactVersionDeploymentSetWithResponse(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionDeploymentSetParams, reqEditors ...RequestEditorFn) (*GetWorkloadArtefactVersionDeploymentSetResponse, error)

	// GetWorkloadArtefactVersionSpecWithResponse request
	GetWorkloadArtefactVersionSpecWithResponse(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionSpecParams, reqEditors ...RequestEditorFn) (*GetWorkloadArtefactVersionSpecResponse, error)

	// ListArtefactsWithResponse request
	ListArtefactsWithResponse(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*ListArtefactsResponse, error)

	// DeleteArtefactWithResponse request
	DeleteArtefactWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteArtefactResponse, error)

	// ListArtefactVersionsWithResponse request
	ListArtefactVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsResponse, error)

	// PatchArtefactVersionWithBodyWithResponse request with any body
	PatchArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error)

	PatchArtefactVersionWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error)

	// ListAuditLogEntriesWithResponse request
	ListAuditLogEntriesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListAuditLogEntriesParams, reqEditors ...RequestEditorFn) (*ListAuditLogEntriesResponse, error)

	// ListEnvironmentTypesWithResponse request
	ListEnvironmentTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListEnvironmentTypesResponse, error)

	// CreateEnvironmentTypeWithBodyWithResponse request with any body
	CreateEnvironmentTypeWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error)

	CreateEnvironmentTypeWithResponse(ctx context.Context, orgId string, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error)

	// DeleteEnvironmentTypeWithResponse request
	DeleteEnvironmentTypeWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentTypeResponse, error)

	// GetEnvironmentTypeWithResponse request
	GetEnvironmentTypeWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetEnvironmentTypeResponse, error)

	// CreateUserRoleInEnvTypeWithBodyWithResponse request with any body
	CreateUserRoleInEnvTypeWithBodyWithResponse(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserRoleInEnvTypeResponse, error)

	CreateUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, body CreateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserRoleInEnvTypeResponse, error)

	// DeleteUserRoleInEnvTypeWithResponse request
	DeleteUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInEnvTypeResponse, error)

	// GetUserRoleInEnvTypeWithResponse request
	GetUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInEnvTypeResponse, error)

	// UpdateUserRoleInEnvTypeWithBodyWithResponse request with any body
	UpdateUserRoleInEnvTypeWithBodyWithResponse(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInEnvTypeResponse, error)

	UpdateUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, body UpdateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInEnvTypeResponse, error)

	// GetOrgsOrgIdEventsWithResponse request
	GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error)

	// ListHumanitecPublicKeysWithResponse request
	ListHumanitecPublicKeysWithResponse(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*ListHumanitecPublicKeysResponse, error)

	// ListDeprecatedImagesWithResponse request
	ListDeprecatedImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImagesResponse, error)

	// GetDeprecatedImageWithResponse request
	GetDeprecatedImageWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetDeprecatedImageResponse, error)

	// ListDeprecatedImageBuildsWithResponse request
	ListDeprecatedImageBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImageBuildsResponse, error)

	// CreateDeprecatedImageBuildWithBodyWithResponse request with any body
	CreateDeprecatedImageBuildWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error)

	CreateDeprecatedImageBuildWithResponse(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error)

	// ListInvitesInOrgWithResponse request
	ListInvitesInOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListInvitesInOrgResponse, error)

	// CreateInviteInOrgWithBodyWithResponse request with any body
	CreateInviteInOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInviteInOrgResponse, error)

	CreateInviteInOrgWithResponse(ctx context.Context, orgId string, body CreateInviteInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInviteInOrgResponse, error)

	// ListPublicKeysWithResponse request
	ListPublicKeysWithResponse(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*ListPublicKeysResponse, error)

	// CreatePublicKeyWithBodyWithResponse request with any body
	CreatePublicKeyWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error)

	CreatePublicKeyWithResponse(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error)

	// DeletePublicKeyWithResponse request
	DeletePublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*DeletePublicKeyResponse, error)

	// GetPublicKeyWithResponse request
	GetPublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error)

	// ListPipelineRunsByOrgWithResponse request
	ListPipelineRunsByOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsByOrgResponse, error)

	// GetLatestPipelineDefinitionSchemaWithResponse request
	GetLatestPipelineDefinitionSchemaWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetLatestPipelineDefinitionSchemaResponse, error)

	// ListPipelinesInOrgWithResponse request
	ListPipelinesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*ListPipelinesInOrgResponse, error)

	// GetOrgsOrgIdRegistriesWithResponse request
	GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error)

	// PostOrgsOrgIdRegistriesWithBodyWithResponse request with any body
	PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	// DeleteOrgsOrgIdRegistriesRegIdWithResponse request
	DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegIdWithResponse request
	GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error)

	// PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegIdCredsWithResponse request
	GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error)

	// ListResourceAccountTypesWithResponse request
	ListResourceAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceAccountTypesResponse, error)

	// ListResourceAccountsWithResponse request
	ListResourceAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceAccountsResponse, error)

	// CreateResourceAccountWithBodyWithResponse request with any body
	CreateResourceAccountWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceAccountResponse, error)

	CreateResourceAccountWithResponse(ctx context.Context, orgId string, body CreateResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceAccountResponse, error)

	// DeleteResourceAccountWithResponse request
	DeleteResourceAccountWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*DeleteResourceAccountResponse, error)

	// GetResourceAccountWithResponse request
	GetResourceAccountWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetResourceAccountResponse, error)

	// PatchResourceAccountWithBodyWithResponse request with any body
	PatchResourceAccountWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceAccountResponse, error)

	PatchResourceAccountWithResponse(ctx context.Context, orgId string, accId string, body PatchResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceAccountResponse, error)

	// ListResourceDefinitionsWithResponse request
	ListResourceDefinitionsWithResponse(ctx context.Context, orgId string, params *ListResourceDefinitionsParams, reqEditors ...RequestEditorFn) (*ListResourceDefinitionsResponse, error)

	// CreateResourceDefinitionWithBodyWithResponse request with any body
	CreateResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionResponse, error)

	CreateResourceDefinitionWithResponse(ctx context.Context, orgId string, body CreateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionResponse, error)

	// DeleteResourceDefinitionWithResponse request
	DeleteResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, params *DeleteResourceDefinitionParams, reqEditors ...RequestEditorFn) (*DeleteResourceDefinitionResponse, error)

	// GetResourceDefinitionWithResponse request
	GetResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetResourceDefinitionResponse, error)

	// PatchResourceDefinitionWithBodyWithResponse request with any body
	PatchResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceDefinitionResponse, error)

	PatchResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, body PatchResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceDefinitionResponse, error)

	// UpdateResourceDefinitionWithBodyWithResponse request with any body
	UpdateResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionResponse, error)

	UpdateResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionResponse, error)

	// CreateResourceDefinitionCriteriaWithBodyWithResponse request with any body
	CreateResourceDefinitionCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionCriteriaResponse, error)

	CreateResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, body CreateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionCriteriaResponse, error)

	// UpdateResourceDefinitionCriteriaWithBodyWithResponse request with any body
	UpdateResourceDefinitionCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionCriteriaResponse, error)

	UpdateResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionCriteriaResponse, error)

	// DeleteResourceDefinitionCriteriaWithResponse request
	DeleteResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteResourceDefinitionCriteriaParams, reqEditors ...RequestEditorFn) (*DeleteResourceDefinitionCriteriaResponse, error)

	// ListActiveResourceByDefinitionWithResponse request
	ListActiveResourceByDefinitionWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*ListActiveResourceByDefinitionResponse, error)

	// ListResourceDriversWithResponse request
	ListResourceDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceDriversResponse, error)

	// CreateResourceDriverWithBodyWithResponse request with any body
	CreateResourceDriverWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDriverResponse, error)

	CreateResourceDriverWithResponse(ctx context.Context, orgId string, body CreateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDriverResponse, error)

	// DeleteResourceDriverWithResponse request
	DeleteResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteResourceDriverResponse, error)

	// GetResourceDriverWithResponse request
	GetResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetResourceDriverResponse, error)

	// UpdateResourceDriverWithBodyWithResponse request with any body
	UpdateResourceDriverWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDriverResponse, error)

	UpdateResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, body UpdateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDriverResponse, error)

	// ListResourceTypesWithResponse request
	ListResourceTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceTypesResponse, error)

	// GetOrgsOrgIdSecretstoresWithResponse request
	GetOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresResponse, error)

	// PostOrgsOrgIdSecretstoresWithBodyWithResponse request with any body
	PostOrgsOrgIdSecretstoresWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error)

	PostOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error)

	// DeleteOrgsOrgIdSecretstoresStoreIdWithResponse request
	DeleteOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error)

	// GetOrgsOrgIdSecretstoresStoreIdWithResponse request
	GetOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error)

	// PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse request with any body
	PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error)

	PatchOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error)

	// ListUserRolesInOrgWithResponse request
	ListUserRolesInOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListUserRolesInOrgResponse, error)

	// CreateServiceUserInOrgWithBodyWithResponse request with any body
	CreateServiceUserInOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserInOrgResponse, error)

	CreateServiceUserInOrgWithResponse(ctx context.Context, orgId string, body CreateServiceUserInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserInOrgResponse, error)

	// DeleteUserRoleInOrgWithResponse request
	DeleteUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInOrgResponse, error)

	// GetUserRoleInOrgWithResponse request
	GetUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInOrgResponse, error)

	// UpdateUserRoleInOrgWithBodyWithResponse request with any body
	UpdateUserRoleInOrgWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInOrgResponse, error)

	UpdateUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, body UpdateUserRoleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInOrgResponse, error)

	// ListWorkloadProfileChartVersionsWithResponse request
	ListWorkloadProfileChartVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileChartVersionsResponse, error)

	// CreateWorkloadProfileChartVersionWithBodyWithResponse request with any body
	CreateWorkloadProfileChartVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileChartVersionResponse, error)

	// ListWorkloadProfileFeaturesWithResponse request
	ListWorkloadProfileFeaturesWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*ListWorkloadProfileFeaturesResponse, error)

	// ListWorkloadProfilesWithResponse request
	ListWorkloadProfilesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfilesResponse, error)

	// CreateWorkloadProfileWithBodyWithResponse request with any body
	CreateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error)

	CreateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error)

	// DeleteWorkloadProfileWithResponse request
	DeleteWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileResponse, error)

	// GetWorkloadProfileWithResponse request
	GetWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetWorkloadProfileResponse, error)

	// UpdateWorkloadProfileWithBodyWithResponse request with any body
	UpdateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkloadProfileResponse, error)

	UpdateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body UpdateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkloadProfileResponse, error)

	// ListWorkloadProfileVersionsWithResponse request
	ListWorkloadProfileVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileVersionsResponse, error)

	// GetLatestWorkloadProfileVersionWithResponse request
	GetLatestWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetLatestWorkloadProfileVersionResponse, error)

	// ListUserTokensWithResponse request
	ListUserTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ListUserTokensResponse, error)

	// CreateUserTokenWithBodyWithResponse request with any body
	CreateUserTokenWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error)

	CreateUserTokenWithResponse(ctx context.Context, userId string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error)

	// DeleteUserTokenWithResponse request
	DeleteUserTokenWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error)

	// GetUserTokenWithResponse request
	GetUserTokenWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetUserTokenResponse, error)
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationResponse
	JSON403      *N403Forbidden
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON403      *N403Forbidden
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Agent
}

// Status returns HTTPResponse.Status
func (r ListAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r PatchAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListKeysInAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Key
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListKeysInAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKeysInAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Key
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyInAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteKeyInAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyInAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResponse
}

// Status returns HTTPResponse.Status
func (r ListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApplicationResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineApprovalRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineApprovalRequest
	JSON400      *N400BadRequest
}

// Status returns HTTPResponse.Status
func (r ListPipelineApprovalRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineApprovalRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeltaResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EnvironmentResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeploymentResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeploymentErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebaseEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r RebaseEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebaseEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListActiveResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListActiveResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActiveResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryResourceGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NodeBodyResponse
	JSON400      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueryResourceGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryResourceGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActiveResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActiveResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActiveResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuntimeResponse struct {
	Body                 []byte
	HTTPResponse         *http.Response
	JSON200              *RuntimeInfoResponseV1
	Applicationv2JSON200 *RuntimeInfoResponseV2
	JSON400              *N400BadRequest
	JSON404              *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePausedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r UpdatePausedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePausedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReplicasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r PatchReplicasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReplicasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineCriteriaInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineCriteria
	JSON400      *N400BadRequest
}

// Status returns HTTPResponse.Status
func (r ListPipelineCriteriaInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineCriteriaInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineRunByTriggerCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineRun
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableContent
}

// Status returns HTTPResponse.Status
func (r CreatePipelineRunByTriggerCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineRunByTriggerCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pipeline
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pipeline
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
}

// Status returns HTTPResponse.Status
func (r DeletePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineCriteria
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreatePipelineCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DeletePipelineCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineCriteria
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineRun
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelineRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineRun
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableContent
}

// Status returns HTTPResponse.Status
func (r CreatePipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
}

// Status returns HTTPResponse.Status
func (r DeletePipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineRun
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
}

// Status returns HTTPResponse.Status
func (r CancelPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineJobPartial
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelineJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineJob
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApprovePipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ApprovePipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApprovePipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DenyPipelineApprovalRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineApprovalRequest
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DenyPipelineApprovalRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DenyPipelineApprovalRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineStepLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineStepLog
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelineStepLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineStepLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartPipelineRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineRun
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableContent
}

// Status returns HTTPResponse.Status
func (r RestartPipelineRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartPipelineRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPipelineDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineVersion
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelineVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRuntimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentRuntimeInfoResponse
	JSON400      *N400BadRequest
}

// Status returns HTTPResponse.Status
func (r ListRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SetResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *HumanitecErrorResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlainDeltaResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserRolesInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r ListUserRolesInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserRolesInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserRoleInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserRoleInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserRoleInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRoleInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserRoleInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserRoleInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserRoleInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WebhookResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookUpdateResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactVersionsInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersion
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactVersionsInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactVersionsInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersion
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersion
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadArtefactVersionDeploymentSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadArtefactVersionDeploymentSet
	YAML200      *WorkloadArtefactVersionDeploymentSet
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkloadArtefactVersionDeploymentSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadArtefactVersionDeploymentSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadArtefactVersionSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	YAML200      *map[string]interface{}
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkloadArtefactVersionSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadArtefactVersionSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtefactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteArtefactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtefactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtefactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersion
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListArtefactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtefactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtefactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersion
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtefactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtefactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuditLogEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuditLogEntry
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListAuditLogEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditLogEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentTypeResponse
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EnvironmentTypeResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *EnvironmentTypeResponse
	JSON401      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *[]map[string]string
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentTypeResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserRoleInEnvTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserRoleInEnvTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserRoleInEnvTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleInEnvTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleInEnvTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleInEnvTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleInEnvTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRoleInEnvTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleInEnvTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserRoleInEnvTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserRoleInEnvTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserRoleInEnvTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EventResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHumanitecPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HumanitecPublicKey
}

// Status returns HTTPResponse.Status
func (r ListHumanitecPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHumanitecPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeprecatedImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageResponse
}

// Status returns HTTPResponse.Status
func (r ListDeprecatedImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeprecatedImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeprecatedImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeprecatedImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeprecatedImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeprecatedImageBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageBuildResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeprecatedImageBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeprecatedImageBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeprecatedImageBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeprecatedImageBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeprecatedImageBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvitesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserInviteResponse
}

// Status returns HTTPResponse.Status
func (r ListInvitesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvitesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInviteInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateInviteInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInviteInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublicKey
	JSON400      *N400BadRequest
}

// Status returns HTTPResponse.Status
func (r ListPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicKey
	JSON400      *N400BadRequest
	JSON403      *N403Forbidden
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreatePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DeletePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicKey
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineRunsByOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PipelineRun
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelineRunsByOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineRunsByOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestPipelineDefinitionSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *N400BadRequest
}

// Status returns HTTPResponse.Status
func (r GetLatestPipelineDefinitionSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestPipelineDefinitionSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelinesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pipeline
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListPipelinesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelinesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdCredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryCredsResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceAccountTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccountTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResourceAccountTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceAccountTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceAccountResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResourceAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResourceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResourceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResourceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchResourceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchResourceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchResourceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResourceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchResourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchResourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchResourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateResourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceDefinitionCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MatchingCriteriaResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResourceDefinitionCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceDefinitionCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceDefinitionCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MatchingCriteriaResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateResourceDefinitionCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceDefinitionCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceDefinitionCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResourceDefinitionCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceDefinitionCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListActiveResourceByDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListActiveResourceByDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActiveResourceByDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceDriversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DriverDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResourceDriversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceDriversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceDriverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResourceDriverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceDriverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceDriverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResourceDriverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceDriverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceDriverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResourceDriverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceDriverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceDriverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateResourceDriverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceDriverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretstoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SecretStoreResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretstoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretstoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdSecretstoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecretStoreResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdSecretstoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdSecretstoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdSecretstoresStoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdSecretstoresStoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdSecretstoresStoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserRolesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r ListUserRolesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserRolesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceUserInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateServiceUserInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceUserInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRoleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserRoleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserRoleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserRoleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfileChartVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileChartVersionResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfileChartVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfileChartVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkloadProfileChartVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadProfileChartVersionResponse
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateWorkloadProfileChartVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkloadProfileChartVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfileFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileFeatureResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfileFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfileFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadProfileResponse
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r UpdateWorkloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkloadProfileVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileVersionResponse
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListWorkloadProfileVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkloadProfileVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestWorkloadProfileVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileVersionResponse
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetLatestWorkloadProfileVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestWorkloadProfileVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r ListUserTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// UpdateCurrentUserWithBodyWithResponse request with arbitrary body returning *UpdateCurrentUserResponse
func (c *ClientWithResponses) UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// ListAgentsWithResponse request returning *ListAgentsResponse
func (c *ClientWithResponses) ListAgentsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error) {
	rsp, err := c.ListAgents(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentsResponse(rsp)
}

// CreateAgentWithBodyWithResponse request with arbitrary body returning *CreateAgentResponse
func (c *ClientWithResponses) CreateAgentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgentWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

func (c *ClientWithResponses) CreateAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgent(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

// DeleteAgentWithResponse request returning *DeleteAgentResponse
func (c *ClientWithResponses) DeleteAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error) {
	rsp, err := c.DeleteAgent(ctx, orgId, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentResponse(rsp)
}

// PatchAgentWithBodyWithResponse request with arbitrary body returning *PatchAgentResponse
func (c *ClientWithResponses) PatchAgentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAgentResponse, error) {
	rsp, err := c.PatchAgentWithBody(ctx, orgId, agentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAgentResponse(rsp)
}

func (c *ClientWithResponses) PatchAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body PatchAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAgentResponse, error) {
	rsp, err := c.PatchAgent(ctx, orgId, agentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAgentResponse(rsp)
}

// ListKeysInAgentWithResponse request returning *ListKeysInAgentResponse
func (c *ClientWithResponses) ListKeysInAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, reqEditors ...RequestEditorFn) (*ListKeysInAgentResponse, error) {
	rsp, err := c.ListKeysInAgent(ctx, orgId, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListKeysInAgentResponse(rsp)
}

// CreateKeyWithBodyWithResponse request with arbitrary body returning *CreateKeyResponse
func (c *ClientWithResponses) CreateKeyWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyResponse, error) {
	rsp, err := c.CreateKeyWithBody(ctx, orgId, agentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateKeyWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyResponse, error) {
	rsp, err := c.CreateKey(ctx, orgId, agentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyResponse(rsp)
}

// DeleteKeyInAgentWithResponse request returning *DeleteKeyInAgentResponse
func (c *ClientWithResponses) DeleteKeyInAgentWithResponse(ctx context.Context, orgId OrgIdPathParam, agentId AgentIdPathParam, fingerprint FingerprintPathParam, reqEditors ...RequestEditorFn) (*DeleteKeyInAgentResponse, error) {
	rsp, err := c.DeleteKeyInAgent(ctx, orgId, agentId, fingerprint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyInAgentResponse(rsp)
}

// ListApplicationsWithResponse request returning *ListApplicationsResponse
func (c *ClientWithResponses) ListApplicationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error) {
	rsp, err := c.ListApplications(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationsResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, orgId string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// ListPipelineApprovalRequestsWithResponse request returning *ListPipelineApprovalRequestsResponse
func (c *ClientWithResponses) ListPipelineApprovalRequestsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineApprovalRequestsParams, reqEditors ...RequestEditorFn) (*ListPipelineApprovalRequestsResponse, error) {
	rsp, err := c.ListPipelineApprovalRequests(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineApprovalRequestsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdDeltasWithResponse request returning *GetOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// GetDeltaWithResponse request returning *GetDeltaResponse
func (c *ClientWithResponses) GetDeltaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, reqEditors ...RequestEditorFn) (*GetDeltaResponse, error) {
	rsp, err := c.GetDelta(ctx, orgId, appId, deltaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

// PutDeltaWithBodyWithResponse request with arbitrary body returning *PutDeltaResponse
func (c *ClientWithResponses) PutDeltaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error) {
	rsp, err := c.PutDeltaWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeltaResponse(rsp)
}

func (c *ClientWithResponses) PutDeltaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeltaResponse, error) {
	rsp, err := c.PutDelta(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeltaResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchived(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataName(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, orgId string, appId string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// ListDeploymentsWithResponse request returning *ListDeploymentsResponse
func (c *ClientWithResponses) ListDeploymentsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error) {
	rsp, err := c.ListDeployments(ctx, orgId, appId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentsResponse(rsp)
}

// CreateDeploymentWithBodyWithResponse request with arbitrary body returning *CreateDeploymentResponse
func (c *ClientWithResponses) CreateDeploymentWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeploymentWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeployment(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

// GetDeploymentWithResponse request returning *GetDeploymentResponse
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error) {
	rsp, err := c.GetDeployment(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResponse(rsp)
}

// ListDeploymentErrorsWithResponse request returning *ListDeploymentErrorsResponse
func (c *ClientWithResponses) ListDeploymentErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*ListDeploymentErrorsResponse, error) {
	rsp, err := c.ListDeploymentErrors(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentErrorsResponse(rsp)
}

// RebaseEnvironmentWithBodyWithResponse request with arbitrary body returning *RebaseEnvironmentResponse
func (c *ClientWithResponses) RebaseEnvironmentWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RebaseEnvironmentResponse, error) {
	rsp, err := c.RebaseEnvironmentWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebaseEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) RebaseEnvironmentWithResponse(ctx context.Context, orgId string, appId string, envId string, body RebaseEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RebaseEnvironmentResponse, error) {
	rsp, err := c.RebaseEnvironment(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebaseEnvironmentResponse(rsp)
}

// ListActiveResourcesWithResponse request returning *ListActiveResourcesResponse
func (c *ClientWithResponses) ListActiveResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*ListActiveResourcesResponse, error) {
	rsp, err := c.ListActiveResources(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActiveResourcesResponse(rsp)
}

// QueryResourceGraphWithBodyWithResponse request with arbitrary body returning *QueryResourceGraphResponse
func (c *ClientWithResponses) QueryResourceGraphWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryResourceGraphResponse, error) {
	rsp, err := c.QueryResourceGraphWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryResourceGraphResponse(rsp)
}

func (c *ClientWithResponses) QueryResourceGraphWithResponse(ctx context.Context, orgId string, appId string, envId string, body QueryResourceGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryResourceGraphResponse, error) {
	rsp, err := c.QueryResourceGraph(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryResourceGraphResponse(rsp)
}

// DeleteActiveResourceWithResponse request returning *DeleteActiveResourceResponse
func (c *ClientWithResponses) DeleteActiveResourceWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteActiveResourceResponse, error) {
	rsp, err := c.DeleteActiveResource(ctx, orgId, appId, envId, pType, resId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveResourceResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx, orgId, appId, envId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetRuntimeWithResponse request returning *GetRuntimeResponse
func (c *ClientWithResponses) GetRuntimeWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*GetRuntimeResponse, error) {
	rsp, err := c.GetRuntime(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuntimeResponse(rsp)
}

// UpdatePausedWithBodyWithResponse request with arbitrary body returning *UpdatePausedResponse
func (c *ClientWithResponses) UpdatePausedWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePausedResponse, error) {
	rsp, err := c.UpdatePausedWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePausedResponse(rsp)
}

func (c *ClientWithResponses) UpdatePausedWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body UpdatePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePausedResponse, error) {
	rsp, err := c.UpdatePaused(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePausedResponse(rsp)
}

// PatchReplicasWithBodyWithResponse request with arbitrary body returning *PatchReplicasResponse
func (c *ClientWithResponses) PatchReplicasWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReplicasResponse, error) {
	rsp, err := c.PatchReplicasWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReplicasResponse(rsp)
}

func (c *ClientWithResponses) PatchReplicasWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, envId EnvIdPathParam, body PatchReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReplicasResponse, error) {
	rsp, err := c.PatchReplicas(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReplicasResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx, orgId, appId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, envId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, envId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, envId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx, orgId, appId, envId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx, orgId, appId, envId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdJobsWithResponse request returning *DeleteOrgsOrgIdAppsAppIdJobsResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdJobs(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp)
}

// ListPipelineCriteriaInAppWithResponse request returning *ListPipelineCriteriaInAppResponse
func (c *ClientWithResponses) ListPipelineCriteriaInAppWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelineCriteriaInAppParams, reqEditors ...RequestEditorFn) (*ListPipelineCriteriaInAppResponse, error) {
	rsp, err := c.ListPipelineCriteriaInApp(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineCriteriaInAppResponse(rsp)
}

// CreatePipelineRunByTriggerCriteriaWithBodyWithResponse request with arbitrary body returning *CreatePipelineRunByTriggerCriteriaResponse
func (c *ClientWithResponses) CreatePipelineRunByTriggerCriteriaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunByTriggerCriteriaResponse, error) {
	rsp, err := c.CreatePipelineRunByTriggerCriteriaWithBody(ctx, orgId, appId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunByTriggerCriteriaResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineRunByTriggerCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineRunByTriggerCriteriaParams, body CreatePipelineRunByTriggerCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunByTriggerCriteriaResponse, error) {
	rsp, err := c.CreatePipelineRunByTriggerCriteria(ctx, orgId, appId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunByTriggerCriteriaResponse(rsp)
}

// ListPipelinesWithResponse request returning *ListPipelinesResponse
func (c *ClientWithResponses) ListPipelinesWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListPipelinesParams, reqEditors ...RequestEditorFn) (*ListPipelinesResponse, error) {
	rsp, err := c.ListPipelines(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelinesResponse(rsp)
}

// CreatePipelineWithBodyWithResponse request with arbitrary body returning *CreatePipelineResponse
func (c *ClientWithResponses) CreatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *CreatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineResponse, error) {
	rsp, err := c.CreatePipelineWithBody(ctx, orgId, appId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineResponse(rsp)
}

// DeletePipelineWithResponse request returning *DeletePipelineResponse
func (c *ClientWithResponses) DeletePipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *DeletePipelineParams, reqEditors ...RequestEditorFn) (*DeletePipelineResponse, error) {
	rsp, err := c.DeletePipeline(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineResponse(rsp)
}

// GetPipelineWithResponse request returning *GetPipelineResponse
func (c *ClientWithResponses) GetPipelineWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineParams, reqEditors ...RequestEditorFn) (*GetPipelineResponse, error) {
	rsp, err := c.GetPipeline(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineResponse(rsp)
}

// UpdatePipelineWithBodyWithResponse request with arbitrary body returning *UpdatePipelineResponse
func (c *ClientWithResponses) UpdatePipelineWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.UpdatePipelineWithBody(ctx, orgId, appId, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResponse(rsp)
}

// CreatePipelineCriteriaWithBodyWithResponse request with arbitrary body returning *CreatePipelineCriteriaResponse
func (c *ClientWithResponses) CreatePipelineCriteriaWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineCriteriaResponse, error) {
	rsp, err := c.CreatePipelineCriteriaWithBody(ctx, orgId, appId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineCriteriaResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, body CreatePipelineCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineCriteriaResponse, error) {
	rsp, err := c.CreatePipelineCriteria(ctx, orgId, appId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineCriteriaResponse(rsp)
}

// DeletePipelineCriteriaWithResponse request returning *DeletePipelineCriteriaResponse
func (c *ClientWithResponses) DeletePipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*DeletePipelineCriteriaResponse, error) {
	rsp, err := c.DeletePipelineCriteria(ctx, orgId, appId, pipelineId, criteriaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineCriteriaResponse(rsp)
}

// GetPipelineCriteriaWithResponse request returning *GetPipelineCriteriaResponse
func (c *ClientWithResponses) GetPipelineCriteriaWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, criteriaId string, reqEditors ...RequestEditorFn) (*GetPipelineCriteriaResponse, error) {
	rsp, err := c.GetPipelineCriteria(ctx, orgId, appId, pipelineId, criteriaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineCriteriaResponse(rsp)
}

// ListPipelineRunsWithResponse request returning *ListPipelineRunsResponse
func (c *ClientWithResponses) ListPipelineRunsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineRunsParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsResponse, error) {
	rsp, err := c.ListPipelineRuns(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineRunsResponse(rsp)
}

// CreatePipelineRunWithBodyWithResponse request with arbitrary body returning *CreatePipelineRunResponse
func (c *ClientWithResponses) CreatePipelineRunWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error) {
	rsp, err := c.CreatePipelineRunWithBody(ctx, orgId, appId, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *CreatePipelineRunParams, body CreatePipelineRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineRunResponse, error) {
	rsp, err := c.CreatePipelineRun(ctx, orgId, appId, pipelineId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineRunResponse(rsp)
}

// DeletePipelineRunWithResponse request returning *DeletePipelineRunResponse
func (c *ClientWithResponses) DeletePipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *DeletePipelineRunParams, reqEditors ...RequestEditorFn) (*DeletePipelineRunResponse, error) {
	rsp, err := c.DeletePipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineRunResponse(rsp)
}

// GetPipelineRunWithResponse request returning *GetPipelineRunResponse
func (c *ClientWithResponses) GetPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineRunResponse, error) {
	rsp, err := c.GetPipelineRun(ctx, orgId, appId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineRunResponse(rsp)
}

// CancelPipelineRunWithResponse request returning *CancelPipelineRunResponse
func (c *ClientWithResponses) CancelPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *CancelPipelineRunParams, reqEditors ...RequestEditorFn) (*CancelPipelineRunResponse, error) {
	rsp, err := c.CancelPipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPipelineRunResponse(rsp)
}

// ListPipelineJobsWithResponse request returning *ListPipelineJobsResponse
func (c *ClientWithResponses) ListPipelineJobsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *ListPipelineJobsParams, reqEditors ...RequestEditorFn) (*ListPipelineJobsResponse, error) {
	rsp, err := c.ListPipelineJobs(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineJobsResponse(rsp)
}

// GetPipelineJobWithResponse request returning *GetPipelineJobResponse
func (c *ClientWithResponses) GetPipelineJobWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineJobResponse, error) {
	rsp, err := c.GetPipelineJob(ctx, orgId, appId, pipelineId, runId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineJobResponse(rsp)
}

// GetPipelineApprovalRequestWithResponse request returning *GetPipelineApprovalRequestResponse
func (c *ClientWithResponses) GetPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*GetPipelineApprovalRequestResponse, error) {
	rsp, err := c.GetPipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineApprovalRequestResponse(rsp)
}

// ApprovePipelineApprovalRequestWithResponse request returning *ApprovePipelineApprovalRequestResponse
func (c *ClientWithResponses) ApprovePipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*ApprovePipelineApprovalRequestResponse, error) {
	rsp, err := c.ApprovePipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApprovePipelineApprovalRequestResponse(rsp)
}

// DenyPipelineApprovalRequestWithResponse request returning *DenyPipelineApprovalRequestResponse
func (c *ClientWithResponses) DenyPipelineApprovalRequestWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, approvalId ApprovalIdPathParam, reqEditors ...RequestEditorFn) (*DenyPipelineApprovalRequestResponse, error) {
	rsp, err := c.DenyPipelineApprovalRequest(ctx, orgId, appId, pipelineId, runId, jobId, approvalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDenyPipelineApprovalRequestResponse(rsp)
}

// ListPipelineStepLogsWithResponse request returning *ListPipelineStepLogsResponse
func (c *ClientWithResponses) ListPipelineStepLogsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, jobId JobIdPathParam, stepIndex StepIndexPathParam, params *ListPipelineStepLogsParams, reqEditors ...RequestEditorFn) (*ListPipelineStepLogsResponse, error) {
	rsp, err := c.ListPipelineStepLogs(ctx, orgId, appId, pipelineId, runId, jobId, stepIndex, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineStepLogsResponse(rsp)
}

// RestartPipelineRunWithResponse request returning *RestartPipelineRunResponse
func (c *ClientWithResponses) RestartPipelineRunWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, runId RunIdPathParam, params *RestartPipelineRunParams, reqEditors ...RequestEditorFn) (*RestartPipelineRunResponse, error) {
	rsp, err := c.RestartPipelineRun(ctx, orgId, appId, pipelineId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartPipelineRunResponse(rsp)
}

// GetPipelineDefinitionWithResponse request returning *GetPipelineDefinitionResponse
func (c *ClientWithResponses) GetPipelineDefinitionWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *GetPipelineDefinitionParams, reqEditors ...RequestEditorFn) (*GetPipelineDefinitionResponse, error) {
	rsp, err := c.GetPipelineDefinition(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineDefinitionResponse(rsp)
}

// ListPipelineVersionsWithResponse request returning *ListPipelineVersionsResponse
func (c *ClientWithResponses) ListPipelineVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, pipelineId PipelineIdPathParam, params *ListPipelineVersionsParams, reqEditors ...RequestEditorFn) (*ListPipelineVersionsResponse, error) {
	rsp, err := c.ListPipelineVersions(ctx, orgId, appId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineVersionsResponse(rsp)
}

// ListRuntimeWithResponse request returning *ListRuntimeResponse
func (c *ClientWithResponses) ListRuntimeWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, params *ListRuntimeParams, reqEditors ...RequestEditorFn) (*ListRuntimeResponse, error) {
	rsp, err := c.ListRuntime(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRuntimeResponse(rsp)
}

// GetSetsWithResponse request returning *GetSetsResponse
func (c *ClientWithResponses) GetSetsWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, reqEditors ...RequestEditorFn) (*GetSetsResponse, error) {
	rsp, err := c.GetSets(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSetsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, params *GetOrgsOrgIdAppsAppIdSetsSetIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx, orgId, appId, setId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId OrgIdPathParam, appId AppIdPathParam, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx, orgId, appId, setId, sourceSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp)
}

// ListUserRolesInAppWithResponse request returning *ListUserRolesInAppResponse
func (c *ClientWithResponses) ListUserRolesInAppWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*ListUserRolesInAppResponse, error) {
	rsp, err := c.ListUserRolesInApp(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserRolesInAppResponse(rsp)
}

// CreateUserRoleInAppWithBodyWithResponse request with arbitrary body returning *CreateUserRoleInAppResponse
func (c *ClientWithResponses) CreateUserRoleInAppWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserRoleInAppResponse, error) {
	rsp, err := c.CreateUserRoleInAppWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserRoleInAppResponse(rsp)
}

func (c *ClientWithResponses) CreateUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, body CreateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserRoleInAppResponse, error) {
	rsp, err := c.CreateUserRoleInApp(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserRoleInAppResponse(rsp)
}

// DeleteUserRoleInAppWithResponse request returning *DeleteUserRoleInAppResponse
func (c *ClientWithResponses) DeleteUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInAppResponse, error) {
	rsp, err := c.DeleteUserRoleInApp(ctx, orgId, appId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleInAppResponse(rsp)
}

// GetUserRoleInAppWithResponse request returning *GetUserRoleInAppResponse
func (c *ClientWithResponses) GetUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInAppResponse, error) {
	rsp, err := c.GetUserRoleInApp(ctx, orgId, appId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleInAppResponse(rsp)
}

// UpdateUserRoleInAppWithBodyWithResponse request with arbitrary body returning *UpdateUserRoleInAppResponse
func (c *ClientWithResponses) UpdateUserRoleInAppWithBodyWithResponse(ctx context.Context, orgId string, appId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInAppResponse, error) {
	rsp, err := c.UpdateUserRoleInAppWithBody(ctx, orgId, appId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInAppResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserRoleInAppWithResponse(ctx context.Context, orgId string, appId string, userId string, body UpdateUserRoleInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInAppResponse, error) {
	rsp, err := c.UpdateUserRoleInApp(ctx, orgId, appId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInAppResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersions(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId openapi_types.UUID, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValuesWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx, orgId, appId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PatchOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx, orgId, appId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx, orgId, appId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PatchOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// ListArtefactVersionsInOrgWithResponse request returning *ListArtefactVersionsInOrgResponse
func (c *ClientWithResponses) ListArtefactVersionsInOrgWithResponse(ctx context.Context, orgId string, params *ListArtefactVersionsInOrgParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsInOrgResponse, error) {
	rsp, err := c.ListArtefactVersionsInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactVersionsInOrgResponse(rsp)
}

// CreateArtefactVersionWithBodyWithResponse request with arbitrary body returning *CreateArtefactVersionResponse
func (c *ClientWithResponses) CreateArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error) {
	rsp, err := c.CreateArtefactVersionWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtefactVersionResponse(rsp)
}

func (c *ClientWithResponses) CreateArtefactVersionWithResponse(ctx context.Context, orgId string, params *CreateArtefactVersionParams, body CreateArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArtefactVersionResponse, error) {
	rsp, err := c.CreateArtefactVersion(ctx, orgId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtefactVersionResponse(rsp)
}

// GetArtefactVersionWithResponse request returning *GetArtefactVersionResponse
func (c *ClientWithResponses) GetArtefactVersionWithResponse(ctx context.Context, orgId string, artefactVersionId string, reqEditors ...RequestEditorFn) (*GetArtefactVersionResponse, error) {
	rsp, err := c.GetArtefactVersion(ctx, orgId, artefactVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtefactVersionResponse(rsp)
}

// GetWorkloadArtefactVersionDeploymentSetWithResponse request returning *GetWorkloadArtefactVersionDeploymentSetResponse
func (c *ClientWithResponses) GetWorkloadArtefactVersionDeploymentSetWithResponse(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionDeploymentSetParams, reqEditors ...RequestEditorFn) (*GetWorkloadArtefactVersionDeploymentSetResponse, error) {
	rsp, err := c.GetWorkloadArtefactVersionDeploymentSet(ctx, orgId, artefactVersionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadArtefactVersionDeploymentSetResponse(rsp)
}

// GetWorkloadArtefactVersionSpecWithResponse request returning *GetWorkloadArtefactVersionSpecResponse
func (c *ClientWithResponses) GetWorkloadArtefactVersionSpecWithResponse(ctx context.Context, orgId string, artefactVersionId string, params *GetWorkloadArtefactVersionSpecParams, reqEditors ...RequestEditorFn) (*GetWorkloadArtefactVersionSpecResponse, error) {
	rsp, err := c.GetWorkloadArtefactVersionSpec(ctx, orgId, artefactVersionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadArtefactVersionSpecResponse(rsp)
}

// ListArtefactsWithResponse request returning *ListArtefactsResponse
func (c *ClientWithResponses) ListArtefactsWithResponse(ctx context.Context, orgId string, params *ListArtefactsParams, reqEditors ...RequestEditorFn) (*ListArtefactsResponse, error) {
	rsp, err := c.ListArtefacts(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactsResponse(rsp)
}

// DeleteArtefactWithResponse request returning *DeleteArtefactResponse
func (c *ClientWithResponses) DeleteArtefactWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteArtefactResponse, error) {
	rsp, err := c.DeleteArtefact(ctx, orgId, artefactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtefactResponse(rsp)
}

// ListArtefactVersionsWithResponse request returning *ListArtefactVersionsResponse
func (c *ClientWithResponses) ListArtefactVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *ListArtefactVersionsParams, reqEditors ...RequestEditorFn) (*ListArtefactVersionsResponse, error) {
	rsp, err := c.ListArtefactVersions(ctx, orgId, artefactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtefactVersionsResponse(rsp)
}

// PatchArtefactVersionWithBodyWithResponse request with arbitrary body returning *PatchArtefactVersionResponse
func (c *ClientWithResponses) PatchArtefactVersionWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error) {
	rsp, err := c.PatchArtefactVersionWithBody(ctx, orgId, artefactId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtefactVersionResponse(rsp)
}

func (c *ClientWithResponses) PatchArtefactVersionWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchArtefactVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtefactVersionResponse, error) {
	rsp, err := c.PatchArtefactVersion(ctx, orgId, artefactId, versionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtefactVersionResponse(rsp)
}

// ListAuditLogEntriesWithResponse request returning *ListAuditLogEntriesResponse
func (c *ClientWithResponses) ListAuditLogEntriesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListAuditLogEntriesParams, reqEditors ...RequestEditorFn) (*ListAuditLogEntriesResponse, error) {
	rsp, err := c.ListAuditLogEntries(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuditLogEntriesResponse(rsp)
}

// ListEnvironmentTypesWithResponse request returning *ListEnvironmentTypesResponse
func (c *ClientWithResponses) ListEnvironmentTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListEnvironmentTypesResponse, error) {
	rsp, err := c.ListEnvironmentTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentTypesResponse(rsp)
}

// CreateEnvironmentTypeWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentTypeResponse
func (c *ClientWithResponses) CreateEnvironmentTypeWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error) {
	rsp, err := c.CreateEnvironmentTypeWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentTypeWithResponse(ctx context.Context, orgId string, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error) {
	rsp, err := c.CreateEnvironmentType(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentTypeResponse(rsp)
}

// DeleteEnvironmentTypeWithResponse request returning *DeleteEnvironmentTypeResponse
func (c *ClientWithResponses) DeleteEnvironmentTypeWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentTypeResponse, error) {
	rsp, err := c.DeleteEnvironmentType(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentTypeResponse(rsp)
}

// GetEnvironmentTypeWithResponse request returning *GetEnvironmentTypeResponse
func (c *ClientWithResponses) GetEnvironmentTypeWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetEnvironmentTypeResponse, error) {
	rsp, err := c.GetEnvironmentType(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentTypeResponse(rsp)
}

// CreateUserRoleInEnvTypeWithBodyWithResponse request with arbitrary body returning *CreateUserRoleInEnvTypeResponse
func (c *ClientWithResponses) CreateUserRoleInEnvTypeWithBodyWithResponse(ctx context.Context, orgId string, envType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserRoleInEnvTypeResponse, error) {
	rsp, err := c.CreateUserRoleInEnvTypeWithBody(ctx, orgId, envType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserRoleInEnvTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, body CreateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserRoleInEnvTypeResponse, error) {
	rsp, err := c.CreateUserRoleInEnvType(ctx, orgId, envType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserRoleInEnvTypeResponse(rsp)
}

// DeleteUserRoleInEnvTypeWithResponse request returning *DeleteUserRoleInEnvTypeResponse
func (c *ClientWithResponses) DeleteUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInEnvTypeResponse, error) {
	rsp, err := c.DeleteUserRoleInEnvType(ctx, orgId, envType, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleInEnvTypeResponse(rsp)
}

// GetUserRoleInEnvTypeWithResponse request returning *GetUserRoleInEnvTypeResponse
func (c *ClientWithResponses) GetUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInEnvTypeResponse, error) {
	rsp, err := c.GetUserRoleInEnvType(ctx, orgId, envType, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleInEnvTypeResponse(rsp)
}

// UpdateUserRoleInEnvTypeWithBodyWithResponse request with arbitrary body returning *UpdateUserRoleInEnvTypeResponse
func (c *ClientWithResponses) UpdateUserRoleInEnvTypeWithBodyWithResponse(ctx context.Context, orgId string, envType string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInEnvTypeResponse, error) {
	rsp, err := c.UpdateUserRoleInEnvTypeWithBody(ctx, orgId, envType, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInEnvTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserRoleInEnvTypeWithResponse(ctx context.Context, orgId string, envType string, userId string, body UpdateUserRoleInEnvTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInEnvTypeResponse, error) {
	rsp, err := c.UpdateUserRoleInEnvType(ctx, orgId, envType, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInEnvTypeResponse(rsp)
}

// GetOrgsOrgIdEventsWithResponse request returning *GetOrgsOrgIdEventsResponse
func (c *ClientWithResponses) GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error) {
	rsp, err := c.GetOrgsOrgIdEvents(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEventsResponse(rsp)
}

// ListHumanitecPublicKeysWithResponse request returning *ListHumanitecPublicKeysResponse
func (c *ClientWithResponses) ListHumanitecPublicKeysWithResponse(ctx context.Context, orgId string, params *ListHumanitecPublicKeysParams, reqEditors ...RequestEditorFn) (*ListHumanitecPublicKeysResponse, error) {
	rsp, err := c.ListHumanitecPublicKeys(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHumanitecPublicKeysResponse(rsp)
}

// ListDeprecatedImagesWithResponse request returning *ListDeprecatedImagesResponse
func (c *ClientWithResponses) ListDeprecatedImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImagesResponse, error) {
	rsp, err := c.ListDeprecatedImages(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeprecatedImagesResponse(rsp)
}

// GetDeprecatedImageWithResponse request returning *GetDeprecatedImageResponse
func (c *ClientWithResponses) GetDeprecatedImageWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetDeprecatedImageResponse, error) {
	rsp, err := c.GetDeprecatedImage(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeprecatedImageResponse(rsp)
}

// ListDeprecatedImageBuildsWithResponse request returning *ListDeprecatedImageBuildsResponse
func (c *ClientWithResponses) ListDeprecatedImageBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*ListDeprecatedImageBuildsResponse, error) {
	rsp, err := c.ListDeprecatedImageBuilds(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeprecatedImageBuildsResponse(rsp)
}

// CreateDeprecatedImageBuildWithBodyWithResponse request with arbitrary body returning *CreateDeprecatedImageBuildResponse
func (c *ClientWithResponses) CreateDeprecatedImageBuildWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error) {
	rsp, err := c.CreateDeprecatedImageBuildWithBody(ctx, orgId, imageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeprecatedImageBuildResponse(rsp)
}

func (c *ClientWithResponses) CreateDeprecatedImageBuildWithResponse(ctx context.Context, orgId string, imageId string, body CreateDeprecatedImageBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeprecatedImageBuildResponse, error) {
	rsp, err := c.CreateDeprecatedImageBuild(ctx, orgId, imageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeprecatedImageBuildResponse(rsp)
}

// ListInvitesInOrgWithResponse request returning *ListInvitesInOrgResponse
func (c *ClientWithResponses) ListInvitesInOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListInvitesInOrgResponse, error) {
	rsp, err := c.ListInvitesInOrg(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvitesInOrgResponse(rsp)
}

// CreateInviteInOrgWithBodyWithResponse request with arbitrary body returning *CreateInviteInOrgResponse
func (c *ClientWithResponses) CreateInviteInOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInviteInOrgResponse, error) {
	rsp, err := c.CreateInviteInOrgWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInviteInOrgResponse(rsp)
}

func (c *ClientWithResponses) CreateInviteInOrgWithResponse(ctx context.Context, orgId string, body CreateInviteInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInviteInOrgResponse, error) {
	rsp, err := c.CreateInviteInOrg(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInviteInOrgResponse(rsp)
}

// ListPublicKeysWithResponse request returning *ListPublicKeysResponse
func (c *ClientWithResponses) ListPublicKeysWithResponse(ctx context.Context, orgId string, params *ListPublicKeysParams, reqEditors ...RequestEditorFn) (*ListPublicKeysResponse, error) {
	rsp, err := c.ListPublicKeys(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPublicKeysResponse(rsp)
}

// CreatePublicKeyWithBodyWithResponse request with arbitrary body returning *CreatePublicKeyResponse
func (c *ClientWithResponses) CreatePublicKeyWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error) {
	rsp, err := c.CreatePublicKeyWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicKeyResponse(rsp)
}

func (c *ClientWithResponses) CreatePublicKeyWithResponse(ctx context.Context, orgId string, body CreatePublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicKeyResponse, error) {
	rsp, err := c.CreatePublicKey(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicKeyResponse(rsp)
}

// DeletePublicKeyWithResponse request returning *DeletePublicKeyResponse
func (c *ClientWithResponses) DeletePublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*DeletePublicKeyResponse, error) {
	rsp, err := c.DeletePublicKey(ctx, orgId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicKeyResponse(rsp)
}

// GetPublicKeyWithResponse request returning *GetPublicKeyResponse
func (c *ClientWithResponses) GetPublicKeyWithResponse(ctx context.Context, orgId string, keyId string, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error) {
	rsp, err := c.GetPublicKey(ctx, orgId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicKeyResponse(rsp)
}

// ListPipelineRunsByOrgWithResponse request returning *ListPipelineRunsByOrgResponse
func (c *ClientWithResponses) ListPipelineRunsByOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelineRunsByOrgParams, reqEditors ...RequestEditorFn) (*ListPipelineRunsByOrgResponse, error) {
	rsp, err := c.ListPipelineRunsByOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineRunsByOrgResponse(rsp)
}

// GetLatestPipelineDefinitionSchemaWithResponse request returning *GetLatestPipelineDefinitionSchemaResponse
func (c *ClientWithResponses) GetLatestPipelineDefinitionSchemaWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetLatestPipelineDefinitionSchemaResponse, error) {
	rsp, err := c.GetLatestPipelineDefinitionSchema(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestPipelineDefinitionSchemaResponse(rsp)
}

// ListPipelinesInOrgWithResponse request returning *ListPipelinesInOrgResponse
func (c *ClientWithResponses) ListPipelinesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListPipelinesInOrgParams, reqEditors ...RequestEditorFn) (*ListPipelinesInOrgResponse, error) {
	rsp, err := c.ListPipelinesInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelinesInOrgResponse(rsp)
}

// GetOrgsOrgIdRegistriesWithResponse request returning *GetOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistries(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesResponse(rsp)
}

// PostOrgsOrgIdRegistriesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistriesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistries(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

// DeleteOrgsOrgIdRegistriesRegIdWithResponse request returning *DeleteOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdWithResponse request returning *GetOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegIdWithBody(ctx, orgId, regId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegId(ctx, orgId, regId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdCredsWithResponse request returning *GetOrgsOrgIdRegistriesRegIdCredsResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegIdCreds(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp)
}

// ListResourceAccountTypesWithResponse request returning *ListResourceAccountTypesResponse
func (c *ClientWithResponses) ListResourceAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceAccountTypesResponse, error) {
	rsp, err := c.ListResourceAccountTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceAccountTypesResponse(rsp)
}

// ListResourceAccountsWithResponse request returning *ListResourceAccountsResponse
func (c *ClientWithResponses) ListResourceAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceAccountsResponse, error) {
	rsp, err := c.ListResourceAccounts(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceAccountsResponse(rsp)
}

// CreateResourceAccountWithBodyWithResponse request with arbitrary body returning *CreateResourceAccountResponse
func (c *ClientWithResponses) CreateResourceAccountWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceAccountResponse, error) {
	rsp, err := c.CreateResourceAccountWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceAccountWithResponse(ctx context.Context, orgId string, body CreateResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceAccountResponse, error) {
	rsp, err := c.CreateResourceAccount(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceAccountResponse(rsp)
}

// DeleteResourceAccountWithResponse request returning *DeleteResourceAccountResponse
func (c *ClientWithResponses) DeleteResourceAccountWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*DeleteResourceAccountResponse, error) {
	rsp, err := c.DeleteResourceAccount(ctx, orgId, accId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceAccountResponse(rsp)
}

// GetResourceAccountWithResponse request returning *GetResourceAccountResponse
func (c *ClientWithResponses) GetResourceAccountWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetResourceAccountResponse, error) {
	rsp, err := c.GetResourceAccount(ctx, orgId, accId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceAccountResponse(rsp)
}

// PatchResourceAccountWithBodyWithResponse request with arbitrary body returning *PatchResourceAccountResponse
func (c *ClientWithResponses) PatchResourceAccountWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceAccountResponse, error) {
	rsp, err := c.PatchResourceAccountWithBody(ctx, orgId, accId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceAccountResponse(rsp)
}

func (c *ClientWithResponses) PatchResourceAccountWithResponse(ctx context.Context, orgId string, accId string, body PatchResourceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceAccountResponse, error) {
	rsp, err := c.PatchResourceAccount(ctx, orgId, accId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceAccountResponse(rsp)
}

// ListResourceDefinitionsWithResponse request returning *ListResourceDefinitionsResponse
func (c *ClientWithResponses) ListResourceDefinitionsWithResponse(ctx context.Context, orgId string, params *ListResourceDefinitionsParams, reqEditors ...RequestEditorFn) (*ListResourceDefinitionsResponse, error) {
	rsp, err := c.ListResourceDefinitions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceDefinitionsResponse(rsp)
}

// CreateResourceDefinitionWithBodyWithResponse request with arbitrary body returning *CreateResourceDefinitionResponse
func (c *ClientWithResponses) CreateResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionResponse, error) {
	rsp, err := c.CreateResourceDefinitionWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceDefinitionWithResponse(ctx context.Context, orgId string, body CreateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionResponse, error) {
	rsp, err := c.CreateResourceDefinition(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDefinitionResponse(rsp)
}

// DeleteResourceDefinitionWithResponse request returning *DeleteResourceDefinitionResponse
func (c *ClientWithResponses) DeleteResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, params *DeleteResourceDefinitionParams, reqEditors ...RequestEditorFn) (*DeleteResourceDefinitionResponse, error) {
	rsp, err := c.DeleteResourceDefinition(ctx, orgId, defId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceDefinitionResponse(rsp)
}

// GetResourceDefinitionWithResponse request returning *GetResourceDefinitionResponse
func (c *ClientWithResponses) GetResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetResourceDefinitionResponse, error) {
	rsp, err := c.GetResourceDefinition(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceDefinitionResponse(rsp)
}

// PatchResourceDefinitionWithBodyWithResponse request with arbitrary body returning *PatchResourceDefinitionResponse
func (c *ClientWithResponses) PatchResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceDefinitionResponse, error) {
	rsp, err := c.PatchResourceDefinitionWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) PatchResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, body PatchResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceDefinitionResponse, error) {
	rsp, err := c.PatchResourceDefinition(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceDefinitionResponse(rsp)
}

// UpdateResourceDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateResourceDefinitionResponse
func (c *ClientWithResponses) UpdateResourceDefinitionWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionResponse, error) {
	rsp, err := c.UpdateResourceDefinitionWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceDefinitionWithResponse(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionResponse, error) {
	rsp, err := c.UpdateResourceDefinition(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDefinitionResponse(rsp)
}

// CreateResourceDefinitionCriteriaWithBodyWithResponse request with arbitrary body returning *CreateResourceDefinitionCriteriaResponse
func (c *ClientWithResponses) CreateResourceDefinitionCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionCriteriaResponse, error) {
	rsp, err := c.CreateResourceDefinitionCriteriaWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDefinitionCriteriaResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, body CreateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDefinitionCriteriaResponse, error) {
	rsp, err := c.CreateResourceDefinitionCriteria(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDefinitionCriteriaResponse(rsp)
}

// UpdateResourceDefinitionCriteriaWithBodyWithResponse request with arbitrary body returning *UpdateResourceDefinitionCriteriaResponse
func (c *ClientWithResponses) UpdateResourceDefinitionCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionCriteriaResponse, error) {
	rsp, err := c.UpdateResourceDefinitionCriteriaWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDefinitionCriteriaResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, body UpdateResourceDefinitionCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDefinitionCriteriaResponse, error) {
	rsp, err := c.UpdateResourceDefinitionCriteria(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDefinitionCriteriaResponse(rsp)
}

// DeleteResourceDefinitionCriteriaWithResponse request returning *DeleteResourceDefinitionCriteriaResponse
func (c *ClientWithResponses) DeleteResourceDefinitionCriteriaWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteResourceDefinitionCriteriaParams, reqEditors ...RequestEditorFn) (*DeleteResourceDefinitionCriteriaResponse, error) {
	rsp, err := c.DeleteResourceDefinitionCriteria(ctx, orgId, defId, criteriaId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceDefinitionCriteriaResponse(rsp)
}

// ListActiveResourceByDefinitionWithResponse request returning *ListActiveResourceByDefinitionResponse
func (c *ClientWithResponses) ListActiveResourceByDefinitionWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*ListActiveResourceByDefinitionResponse, error) {
	rsp, err := c.ListActiveResourceByDefinition(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActiveResourceByDefinitionResponse(rsp)
}

// ListResourceDriversWithResponse request returning *ListResourceDriversResponse
func (c *ClientWithResponses) ListResourceDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceDriversResponse, error) {
	rsp, err := c.ListResourceDrivers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceDriversResponse(rsp)
}

// CreateResourceDriverWithBodyWithResponse request with arbitrary body returning *CreateResourceDriverResponse
func (c *ClientWithResponses) CreateResourceDriverWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceDriverResponse, error) {
	rsp, err := c.CreateResourceDriverWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDriverResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceDriverWithResponse(ctx context.Context, orgId string, body CreateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceDriverResponse, error) {
	rsp, err := c.CreateResourceDriver(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceDriverResponse(rsp)
}

// DeleteResourceDriverWithResponse request returning *DeleteResourceDriverResponse
func (c *ClientWithResponses) DeleteResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteResourceDriverResponse, error) {
	rsp, err := c.DeleteResourceDriver(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceDriverResponse(rsp)
}

// GetResourceDriverWithResponse request returning *GetResourceDriverResponse
func (c *ClientWithResponses) GetResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetResourceDriverResponse, error) {
	rsp, err := c.GetResourceDriver(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceDriverResponse(rsp)
}

// UpdateResourceDriverWithBodyWithResponse request with arbitrary body returning *UpdateResourceDriverResponse
func (c *ClientWithResponses) UpdateResourceDriverWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceDriverResponse, error) {
	rsp, err := c.UpdateResourceDriverWithBody(ctx, orgId, driverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDriverResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceDriverWithResponse(ctx context.Context, orgId string, driverId string, body UpdateResourceDriverJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceDriverResponse, error) {
	rsp, err := c.UpdateResourceDriver(ctx, orgId, driverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceDriverResponse(rsp)
}

// ListResourceTypesWithResponse request returning *ListResourceTypesResponse
func (c *ClientWithResponses) ListResourceTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListResourceTypesResponse, error) {
	rsp, err := c.ListResourceTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceTypesResponse(rsp)
}

// GetOrgsOrgIdSecretstoresWithResponse request returning *GetOrgsOrgIdSecretstoresResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecretstores(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretstoresResponse(rsp)
}

// PostOrgsOrgIdSecretstoresWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdSecretstoresResponse
func (c *ClientWithResponses) PostOrgsOrgIdSecretstoresWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.PostOrgsOrgIdSecretstoresWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdSecretstoresResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdSecretstoresWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdSecretstoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretstoresResponse, error) {
	rsp, err := c.PostOrgsOrgIdSecretstores(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdSecretstoresResponse(rsp)
}

// DeleteOrgsOrgIdSecretstoresStoreIdWithResponse request returning *DeleteOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// GetOrgsOrgIdSecretstoresStoreIdWithResponse request returning *GetOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdSecretstoresStoreIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdSecretstoresStoreIdWithBodyWithResponse(ctx context.Context, orgId string, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdSecretstoresStoreIdWithBody(ctx, orgId, storeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdSecretstoresStoreIdWithResponse(ctx context.Context, orgId string, storeId string, body PatchOrgsOrgIdSecretstoresStoreIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdSecretstoresStoreId(ctx, orgId, storeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp)
}

// ListUserRolesInOrgWithResponse request returning *ListUserRolesInOrgResponse
func (c *ClientWithResponses) ListUserRolesInOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*ListUserRolesInOrgResponse, error) {
	rsp, err := c.ListUserRolesInOrg(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserRolesInOrgResponse(rsp)
}

// CreateServiceUserInOrgWithBodyWithResponse request with arbitrary body returning *CreateServiceUserInOrgResponse
func (c *ClientWithResponses) CreateServiceUserInOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserInOrgResponse, error) {
	rsp, err := c.CreateServiceUserInOrgWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserInOrgResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceUserInOrgWithResponse(ctx context.Context, orgId string, body CreateServiceUserInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserInOrgResponse, error) {
	rsp, err := c.CreateServiceUserInOrg(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserInOrgResponse(rsp)
}

// DeleteUserRoleInOrgWithResponse request returning *DeleteUserRoleInOrgResponse
func (c *ClientWithResponses) DeleteUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserRoleInOrgResponse, error) {
	rsp, err := c.DeleteUserRoleInOrg(ctx, orgId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleInOrgResponse(rsp)
}

// GetUserRoleInOrgWithResponse request returning *GetUserRoleInOrgResponse
func (c *ClientWithResponses) GetUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, reqEditors ...RequestEditorFn) (*GetUserRoleInOrgResponse, error) {
	rsp, err := c.GetUserRoleInOrg(ctx, orgId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleInOrgResponse(rsp)
}

// UpdateUserRoleInOrgWithBodyWithResponse request with arbitrary body returning *UpdateUserRoleInOrgResponse
func (c *ClientWithResponses) UpdateUserRoleInOrgWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInOrgResponse, error) {
	rsp, err := c.UpdateUserRoleInOrgWithBody(ctx, orgId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInOrgResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserRoleInOrgWithResponse(ctx context.Context, orgId string, userId string, body UpdateUserRoleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInOrgResponse, error) {
	rsp, err := c.UpdateUserRoleInOrg(ctx, orgId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInOrgResponse(rsp)
}

// ListWorkloadProfileChartVersionsWithResponse request returning *ListWorkloadProfileChartVersionsResponse
func (c *ClientWithResponses) ListWorkloadProfileChartVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfileChartVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileChartVersionsResponse, error) {
	rsp, err := c.ListWorkloadProfileChartVersions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfileChartVersionsResponse(rsp)
}

// CreateWorkloadProfileChartVersionWithBodyWithResponse request with arbitrary body returning *CreateWorkloadProfileChartVersionResponse
func (c *ClientWithResponses) CreateWorkloadProfileChartVersionWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileChartVersionResponse, error) {
	rsp, err := c.CreateWorkloadProfileChartVersionWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileChartVersionResponse(rsp)
}

// ListWorkloadProfileFeaturesWithResponse request returning *ListWorkloadProfileFeaturesResponse
func (c *ClientWithResponses) ListWorkloadProfileFeaturesWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*ListWorkloadProfileFeaturesResponse, error) {
	rsp, err := c.ListWorkloadProfileFeatures(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfileFeaturesResponse(rsp)
}

// ListWorkloadProfilesWithResponse request returning *ListWorkloadProfilesResponse
func (c *ClientWithResponses) ListWorkloadProfilesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListWorkloadProfilesParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfilesResponse, error) {
	rsp, err := c.ListWorkloadProfiles(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfilesResponse(rsp)
}

// CreateWorkloadProfileWithBodyWithResponse request with arbitrary body returning *CreateWorkloadProfileResponse
func (c *ClientWithResponses) CreateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error) {
	rsp, err := c.CreateWorkloadProfileWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkloadProfileResponse, error) {
	rsp, err := c.CreateWorkloadProfile(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkloadProfileResponse(rsp)
}

// DeleteWorkloadProfileWithResponse request returning *DeleteWorkloadProfileResponse
func (c *ClientWithResponses) DeleteWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*DeleteWorkloadProfileResponse, error) {
	rsp, err := c.DeleteWorkloadProfile(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkloadProfileResponse(rsp)
}

// GetWorkloadProfileWithResponse request returning *GetWorkloadProfileResponse
func (c *ClientWithResponses) GetWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetWorkloadProfileResponse, error) {
	rsp, err := c.GetWorkloadProfile(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadProfileResponse(rsp)
}

// UpdateWorkloadProfileWithBodyWithResponse request with arbitrary body returning *UpdateWorkloadProfileResponse
func (c *ClientWithResponses) UpdateWorkloadProfileWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkloadProfileResponse, error) {
	rsp, err := c.UpdateWorkloadProfileWithBody(ctx, orgId, profileQid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkloadProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkloadProfileWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, body UpdateWorkloadProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkloadProfileResponse, error) {
	rsp, err := c.UpdateWorkloadProfile(ctx, orgId, profileQid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkloadProfileResponse(rsp)
}

// ListWorkloadProfileVersionsWithResponse request returning *ListWorkloadProfileVersionsResponse
func (c *ClientWithResponses) ListWorkloadProfileVersionsWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, params *ListWorkloadProfileVersionsParams, reqEditors ...RequestEditorFn) (*ListWorkloadProfileVersionsResponse, error) {
	rsp, err := c.ListWorkloadProfileVersions(ctx, orgId, profileQid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkloadProfileVersionsResponse(rsp)
}

// GetLatestWorkloadProfileVersionWithResponse request returning *GetLatestWorkloadProfileVersionResponse
func (c *ClientWithResponses) GetLatestWorkloadProfileVersionWithResponse(ctx context.Context, orgId OrgIdPathParam, profileQid ProfileQidPathParam, reqEditors ...RequestEditorFn) (*GetLatestWorkloadProfileVersionResponse, error) {
	rsp, err := c.GetLatestWorkloadProfileVersion(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestWorkloadProfileVersionResponse(rsp)
}

// ListUserTokensWithResponse request returning *ListUserTokensResponse
func (c *ClientWithResponses) ListUserTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ListUserTokensResponse, error) {
	rsp, err := c.ListUserTokens(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserTokensResponse(rsp)
}

// CreateUserTokenWithBodyWithResponse request with arbitrary body returning *CreateUserTokenResponse
func (c *ClientWithResponses) CreateUserTokenWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error) {
	rsp, err := c.CreateUserTokenWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateUserTokenWithResponse(ctx context.Context, userId string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error) {
	rsp, err := c.CreateUserToken(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserTokenResponse(rsp)
}

// DeleteUserTokenWithResponse request returning *DeleteUserTokenResponse
func (c *ClientWithResponses) DeleteUserTokenWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error) {
	rsp, err := c.DeleteUserToken(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTokenResponse(rsp)
}

// GetUserTokenWithResponse request returning *GetUserTokenResponse
func (c *ClientWithResponses) GetUserTokenWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetUserTokenResponse, error) {
	rsp, err := c.GetUserToken(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTokenResponse(rsp)
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCurrentUserResponse parses an HTTP response from a UpdateCurrentUserWithResponse call
func ParseUpdateCurrentUserResponse(rsp *http.Response) (*UpdateCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListAgentsResponse parses an HTTP response from a ListAgentsWithResponse call
func ParseListAgentsResponse(rsp *http.Response) (*ListAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAgentResponse parses an HTTP response from a CreateAgentWithResponse call
func ParseCreateAgentResponse(rsp *http.Response) (*CreateAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteAgentResponse parses an HTTP response from a DeleteAgentWithResponse call
func ParseDeleteAgentResponse(rsp *http.Response) (*DeleteAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchAgentResponse parses an HTTP response from a PatchAgentWithResponse call
func ParsePatchAgentResponse(rsp *http.Response) (*PatchAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListKeysInAgentResponse parses an HTTP response from a ListKeysInAgentWithResponse call
func ParseListKeysInAgentResponse(rsp *http.Response) (*ListKeysInAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListKeysInAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateKeyResponse parses an HTTP response from a CreateKeyWithResponse call
func ParseCreateKeyResponse(rsp *http.Response) (*CreateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteKeyInAgentResponse parses an HTTP response from a DeleteKeyInAgentWithResponse call
func ParseDeleteKeyInAgentResponse(rsp *http.Response) (*DeleteKeyInAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyInAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListApplicationsResponse parses an HTTP response from a ListApplicationsWithResponse call
func ParseListApplicationsResponse(rsp *http.Response) (*ListApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineApprovalRequestsResponse parses an HTTP response from a ListPipelineApprovalRequestsWithResponse call
func ParseListPipelineApprovalRequestsResponse(rsp *http.Response) (*ListPipelineApprovalRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineApprovalRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetDeltaResponse parses an HTTP response from a GetDeltaWithResponse call
func ParseGetDeltaResponse(rsp *http.Response) (*GetDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutDeltaResponse parses an HTTP response from a PutDeltaWithResponse call
func ParsePutDeltaResponse(rsp *http.Response) (*PutDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataArchivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdMetadataNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeploymentsResponse parses an HTTP response from a ListDeploymentsWithResponse call
func ParseListDeploymentsResponse(rsp *http.Response) (*ListDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDeploymentResponse parses an HTTP response from a CreateDeploymentWithResponse call
func ParseCreateDeploymentResponse(rsp *http.Response) (*CreateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetDeploymentResponse parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResponse(rsp *http.Response) (*GetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeploymentErrorsResponse parses an HTTP response from a ListDeploymentErrorsWithResponse call
func ParseListDeploymentErrorsResponse(rsp *http.Response) (*ListDeploymentErrorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRebaseEnvironmentResponse parses an HTTP response from a RebaseEnvironmentWithResponse call
func ParseRebaseEnvironmentResponse(rsp *http.Response) (*RebaseEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RebaseEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListActiveResourcesResponse parses an HTTP response from a ListActiveResourcesWithResponse call
func ParseListActiveResourcesResponse(rsp *http.Response) (*ListActiveResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActiveResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseQueryResourceGraphResponse parses an HTTP response from a QueryResourceGraphWithResponse call
func ParseQueryResourceGraphResponse(rsp *http.Response) (*QueryResourceGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryResourceGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NodeBodyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteActiveResourceResponse parses an HTTP response from a DeleteActiveResourceWithResponse call
func ParseDeleteActiveResourceResponse(rsp *http.Response) (*DeleteActiveResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActiveResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRuntimeResponse parses an HTTP response from a GetRuntimeWithResponse call
func ParseGetRuntimeResponse(rsp *http.Response) (*GetRuntimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest RuntimeInfoResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/v2+json" && rsp.StatusCode == 200:
		var dest RuntimeInfoResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.Applicationv2JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePausedResponse parses an HTTP response from a UpdatePausedWithResponse call
func ParseUpdatePausedResponse(rsp *http.Response) (*UpdatePausedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePausedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchReplicasResponse parses an HTTP response from a PatchReplicasWithResponse call
func ParsePatchReplicasResponse(rsp *http.Response) (*PatchReplicasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReplicasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdJobsResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdJobsWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPipelineCriteriaInAppResponse parses an HTTP response from a ListPipelineCriteriaInAppWithResponse call
func ParseListPipelineCriteriaInAppResponse(rsp *http.Response) (*ListPipelineCriteriaInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineCriteriaInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineCriteria
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreatePipelineRunByTriggerCriteriaResponse parses an HTTP response from a CreatePipelineRunByTriggerCriteriaWithResponse call
func ParseCreatePipelineRunByTriggerCriteriaResponse(rsp *http.Response) (*CreatePipelineRunByTriggerCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineRunByTriggerCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListPipelinesResponse parses an HTTP response from a ListPipelinesWithResponse call
func ParseListPipelinesResponse(rsp *http.Response) (*ListPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePipelineResponse parses an HTTP response from a CreatePipelineWithResponse call
func ParseCreatePipelineResponse(rsp *http.Response) (*CreatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineResponse parses an HTTP response from a DeletePipelineWithResponse call
func ParseDeletePipelineResponse(rsp *http.Response) (*DeletePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseGetPipelineResponse parses an HTTP response from a GetPipelineWithResponse call
func ParseGetPipelineResponse(rsp *http.Response) (*GetPipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePipelineResponse parses an HTTP response from a UpdatePipelineWithResponse call
func ParseUpdatePipelineResponse(rsp *http.Response) (*UpdatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseCreatePipelineCriteriaResponse parses an HTTP response from a CreatePipelineCriteriaWithResponse call
func ParseCreatePipelineCriteriaResponse(rsp *http.Response) (*CreatePipelineCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineCriteria
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineCriteriaResponse parses an HTTP response from a DeletePipelineCriteriaWithResponse call
func ParseDeletePipelineCriteriaResponse(rsp *http.Response) (*DeletePipelineCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineCriteriaResponse parses an HTTP response from a GetPipelineCriteriaWithResponse call
func ParseGetPipelineCriteriaResponse(rsp *http.Response) (*GetPipelineCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineCriteria
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineRunsResponse parses an HTTP response from a ListPipelineRunsWithResponse call
func ParseListPipelineRunsResponse(rsp *http.Response) (*ListPipelineRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePipelineRunResponse parses an HTTP response from a CreatePipelineRunWithResponse call
func ParseCreatePipelineRunResponse(rsp *http.Response) (*CreatePipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeletePipelineRunResponse parses an HTTP response from a DeletePipelineRunWithResponse call
func ParseDeletePipelineRunResponse(rsp *http.Response) (*DeletePipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseGetPipelineRunResponse parses an HTTP response from a GetPipelineRunWithResponse call
func ParseGetPipelineRunResponse(rsp *http.Response) (*GetPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPipelineRunResponse parses an HTTP response from a CancelPipelineRunWithResponse call
func ParseCancelPipelineRunResponse(rsp *http.Response) (*CancelPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseListPipelineJobsResponse parses an HTTP response from a ListPipelineJobsWithResponse call
func ParseListPipelineJobsResponse(rsp *http.Response) (*ListPipelineJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineJobPartial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineJobResponse parses an HTTP response from a GetPipelineJobWithResponse call
func ParseGetPipelineJobResponse(rsp *http.Response) (*GetPipelineJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineApprovalRequestResponse parses an HTTP response from a GetPipelineApprovalRequestWithResponse call
func ParseGetPipelineApprovalRequestResponse(rsp *http.Response) (*GetPipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseApprovePipelineApprovalRequestResponse parses an HTTP response from a ApprovePipelineApprovalRequestWithResponse call
func ParseApprovePipelineApprovalRequestResponse(rsp *http.Response) (*ApprovePipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApprovePipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDenyPipelineApprovalRequestResponse parses an HTTP response from a DenyPipelineApprovalRequestWithResponse call
func ParseDenyPipelineApprovalRequestResponse(rsp *http.Response) (*DenyPipelineApprovalRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DenyPipelineApprovalRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineApprovalRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineStepLogsResponse parses an HTTP response from a ListPipelineStepLogsWithResponse call
func ParseListPipelineStepLogsResponse(rsp *http.Response) (*ListPipelineStepLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineStepLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineStepLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRestartPipelineRunResponse parses an HTTP response from a RestartPipelineRunWithResponse call
func ParseRestartPipelineRunResponse(rsp *http.Response) (*RestartPipelineRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartPipelineRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPipelineDefinitionResponse parses an HTTP response from a GetPipelineDefinitionWithResponse call
func ParseGetPipelineDefinitionResponse(rsp *http.Response) (*GetPipelineDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x.humanitec-pipelines-v1.0+yaml) unsupported

	}

	return response, nil
}

// ParseListPipelineVersionsResponse parses an HTTP response from a ListPipelineVersionsWithResponse call
func ParseListPipelineVersionsResponse(rsp *http.Response) (*ListPipelineVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListRuntimeResponse parses an HTTP response from a ListRuntimeWithResponse call
func ParseListRuntimeResponse(rsp *http.Response) (*ListRuntimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentRuntimeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSetsResponse parses an HTTP response from a GetSetsWithResponse call
func ParseGetSetsResponse(rsp *http.Response) (*GetSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlainDeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListUserRolesInAppResponse parses an HTTP response from a ListUserRolesInAppWithResponse call
func ParseListUserRolesInAppResponse(rsp *http.Response) (*ListUserRolesInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserRolesInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserRoleInAppResponse parses an HTTP response from a CreateUserRoleInAppWithResponse call
func ParseCreateUserRoleInAppResponse(rsp *http.Response) (*CreateUserRoleInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserRoleInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUserRoleInAppResponse parses an HTTP response from a DeleteUserRoleInAppWithResponse call
func ParseDeleteUserRoleInAppResponse(rsp *http.Response) (*DeleteUserRoleInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserRoleInAppResponse parses an HTTP response from a GetUserRoleInAppWithResponse call
func ParseGetUserRoleInAppResponse(rsp *http.Response) (*GetUserRoleInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateUserRoleInAppResponse parses an HTTP response from a UpdateUserRoleInAppWithResponse call
func ParseUpdateUserRoleInAppResponse(rsp *http.Response) (*UpdateUserRoleInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserRoleInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListArtefactVersionsInOrgResponse parses an HTTP response from a ListArtefactVersionsInOrgWithResponse call
func ParseListArtefactVersionsInOrgResponse(rsp *http.Response) (*ListArtefactVersionsInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactVersionsInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateArtefactVersionResponse parses an HTTP response from a CreateArtefactVersionWithResponse call
func ParseCreateArtefactVersionResponse(rsp *http.Response) (*CreateArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetArtefactVersionResponse parses an HTTP response from a GetArtefactVersionWithResponse call
func ParseGetArtefactVersionResponse(rsp *http.Response) (*GetArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkloadArtefactVersionDeploymentSetResponse parses an HTTP response from a GetWorkloadArtefactVersionDeploymentSetWithResponse call
func ParseGetWorkloadArtefactVersionDeploymentSetResponse(rsp *http.Response) (*GetWorkloadArtefactVersionDeploymentSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadArtefactVersionDeploymentSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadArtefactVersionDeploymentSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest WorkloadArtefactVersionDeploymentSet
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetWorkloadArtefactVersionSpecResponse parses an HTTP response from a GetWorkloadArtefactVersionSpecWithResponse call
func ParseGetWorkloadArtefactVersionSpecResponse(rsp *http.Response) (*GetWorkloadArtefactVersionSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadArtefactVersionSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseListArtefactsResponse parses an HTTP response from a ListArtefactsWithResponse call
func ParseListArtefactsResponse(rsp *http.Response) (*ListArtefactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteArtefactResponse parses an HTTP response from a DeleteArtefactWithResponse call
func ParseDeleteArtefactResponse(rsp *http.Response) (*DeleteArtefactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtefactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListArtefactVersionsResponse parses an HTTP response from a ListArtefactVersionsWithResponse call
func ParseListArtefactVersionsResponse(rsp *http.Response) (*ListArtefactVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtefactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchArtefactVersionResponse parses an HTTP response from a PatchArtefactVersionWithResponse call
func ParsePatchArtefactVersionResponse(rsp *http.Response) (*PatchArtefactVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtefactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListAuditLogEntriesResponse parses an HTTP response from a ListAuditLogEntriesWithResponse call
func ParseListAuditLogEntriesResponse(rsp *http.Response) (*ListAuditLogEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuditLogEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuditLogEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEnvironmentTypesResponse parses an HTTP response from a ListEnvironmentTypesWithResponse call
func ParseListEnvironmentTypesResponse(rsp *http.Response) (*ListEnvironmentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentTypeResponse parses an HTTP response from a CreateEnvironmentTypeWithResponse call
func ParseCreateEnvironmentTypeResponse(rsp *http.Response) (*CreateEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentTypeResponse parses an HTTP response from a DeleteEnvironmentTypeWithResponse call
func ParseDeleteEnvironmentTypeResponse(rsp *http.Response) (*DeleteEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentTypeResponse parses an HTTP response from a GetEnvironmentTypeWithResponse call
func ParseGetEnvironmentTypeResponse(rsp *http.Response) (*GetEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateUserRoleInEnvTypeResponse parses an HTTP response from a CreateUserRoleInEnvTypeWithResponse call
func ParseCreateUserRoleInEnvTypeResponse(rsp *http.Response) (*CreateUserRoleInEnvTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserRoleInEnvTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUserRoleInEnvTypeResponse parses an HTTP response from a DeleteUserRoleInEnvTypeWithResponse call
func ParseDeleteUserRoleInEnvTypeResponse(rsp *http.Response) (*DeleteUserRoleInEnvTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleInEnvTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserRoleInEnvTypeResponse parses an HTTP response from a GetUserRoleInEnvTypeWithResponse call
func ParseGetUserRoleInEnvTypeResponse(rsp *http.Response) (*GetUserRoleInEnvTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleInEnvTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateUserRoleInEnvTypeResponse parses an HTTP response from a UpdateUserRoleInEnvTypeWithResponse call
func ParseUpdateUserRoleInEnvTypeResponse(rsp *http.Response) (*UpdateUserRoleInEnvTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserRoleInEnvTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEventsResponse parses an HTTP response from a GetOrgsOrgIdEventsWithResponse call
func ParseGetOrgsOrgIdEventsResponse(rsp *http.Response) (*GetOrgsOrgIdEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListHumanitecPublicKeysResponse parses an HTTP response from a ListHumanitecPublicKeysWithResponse call
func ParseListHumanitecPublicKeysResponse(rsp *http.Response) (*ListHumanitecPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHumanitecPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HumanitecPublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDeprecatedImagesResponse parses an HTTP response from a ListDeprecatedImagesWithResponse call
func ParseListDeprecatedImagesResponse(rsp *http.Response) (*ListDeprecatedImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeprecatedImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeprecatedImageResponse parses an HTTP response from a GetDeprecatedImageWithResponse call
func ParseGetDeprecatedImageResponse(rsp *http.Response) (*GetDeprecatedImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeprecatedImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListDeprecatedImageBuildsResponse parses an HTTP response from a ListDeprecatedImageBuildsWithResponse call
func ParseListDeprecatedImageBuildsResponse(rsp *http.Response) (*ListDeprecatedImageBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeprecatedImageBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageBuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDeprecatedImageBuildResponse parses an HTTP response from a CreateDeprecatedImageBuildWithResponse call
func ParseCreateDeprecatedImageBuildResponse(rsp *http.Response) (*CreateDeprecatedImageBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeprecatedImageBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListInvitesInOrgResponse parses an HTTP response from a ListInvitesInOrgWithResponse call
func ParseListInvitesInOrgResponse(rsp *http.Response) (*ListInvitesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvitesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserInviteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInviteInOrgResponse parses an HTTP response from a CreateInviteInOrgWithResponse call
func ParseCreateInviteInOrgResponse(rsp *http.Response) (*CreateInviteInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInviteInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListPublicKeysResponse parses an HTTP response from a ListPublicKeysWithResponse call
func ParseListPublicKeysResponse(rsp *http.Response) (*ListPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreatePublicKeyResponse parses an HTTP response from a CreatePublicKeyWithResponse call
func ParseCreatePublicKeyResponse(rsp *http.Response) (*CreatePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePublicKeyResponse parses an HTTP response from a DeletePublicKeyWithResponse call
func ParseDeletePublicKeyResponse(rsp *http.Response) (*DeletePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPublicKeyResponse parses an HTTP response from a GetPublicKeyWithResponse call
func ParseGetPublicKeyResponse(rsp *http.Response) (*GetPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPipelineRunsByOrgResponse parses an HTTP response from a ListPipelineRunsByOrgWithResponse call
func ParseListPipelineRunsByOrgResponse(rsp *http.Response) (*ListPipelineRunsByOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineRunsByOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PipelineRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLatestPipelineDefinitionSchemaResponse parses an HTTP response from a GetLatestPipelineDefinitionSchemaWithResponse call
func ParseGetLatestPipelineDefinitionSchemaResponse(rsp *http.Response) (*GetLatestPipelineDefinitionSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestPipelineDefinitionSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListPipelinesInOrgResponse parses an HTTP response from a ListPipelinesInOrgWithResponse call
func ParseListPipelinesInOrgResponse(rsp *http.Response) (*ListPipelinesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelinesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesResponse parses an HTTP response from a GetOrgsOrgIdRegistriesWithResponse call
func ParseGetOrgsOrgIdRegistriesResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdRegistriesResponse parses an HTTP response from a PostOrgsOrgIdRegistriesWithResponse call
func ParsePostOrgsOrgIdRegistriesResponse(rsp *http.Response) (*PostOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a DeleteOrgsOrgIdRegistriesRegIdWithResponse call
func ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a PatchOrgsOrgIdRegistriesRegIdWithResponse call
func ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdCredsResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdCredsWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdCredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryCredsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListResourceAccountTypesResponse parses an HTTP response from a ListResourceAccountTypesWithResponse call
func ParseListResourceAccountTypesResponse(rsp *http.Response) (*ListResourceAccountTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceAccountTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListResourceAccountsResponse parses an HTTP response from a ListResourceAccountsWithResponse call
func ParseListResourceAccountsResponse(rsp *http.Response) (*ListResourceAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateResourceAccountResponse parses an HTTP response from a CreateResourceAccountWithResponse call
func ParseCreateResourceAccountResponse(rsp *http.Response) (*CreateResourceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteResourceAccountResponse parses an HTTP response from a DeleteResourceAccountWithResponse call
func ParseDeleteResourceAccountResponse(rsp *http.Response) (*DeleteResourceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetResourceAccountResponse parses an HTTP response from a GetResourceAccountWithResponse call
func ParseGetResourceAccountResponse(rsp *http.Response) (*GetResourceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchResourceAccountResponse parses an HTTP response from a PatchResourceAccountWithResponse call
func ParsePatchResourceAccountResponse(rsp *http.Response) (*PatchResourceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchResourceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListResourceDefinitionsResponse parses an HTTP response from a ListResourceDefinitionsWithResponse call
func ParseListResourceDefinitionsResponse(rsp *http.Response) (*ListResourceDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateResourceDefinitionResponse parses an HTTP response from a CreateResourceDefinitionWithResponse call
func ParseCreateResourceDefinitionResponse(rsp *http.Response) (*CreateResourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteResourceDefinitionResponse parses an HTTP response from a DeleteResourceDefinitionWithResponse call
func ParseDeleteResourceDefinitionResponse(rsp *http.Response) (*DeleteResourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetResourceDefinitionResponse parses an HTTP response from a GetResourceDefinitionWithResponse call
func ParseGetResourceDefinitionResponse(rsp *http.Response) (*GetResourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchResourceDefinitionResponse parses an HTTP response from a PatchResourceDefinitionWithResponse call
func ParsePatchResourceDefinitionResponse(rsp *http.Response) (*PatchResourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchResourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateResourceDefinitionResponse parses an HTTP response from a UpdateResourceDefinitionWithResponse call
func ParseUpdateResourceDefinitionResponse(rsp *http.Response) (*UpdateResourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateResourceDefinitionCriteriaResponse parses an HTTP response from a CreateResourceDefinitionCriteriaWithResponse call
func ParseCreateResourceDefinitionCriteriaResponse(rsp *http.Response) (*CreateResourceDefinitionCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceDefinitionCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MatchingCriteriaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateResourceDefinitionCriteriaResponse parses an HTTP response from a UpdateResourceDefinitionCriteriaWithResponse call
func ParseUpdateResourceDefinitionCriteriaResponse(rsp *http.Response) (*UpdateResourceDefinitionCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceDefinitionCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MatchingCriteriaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteResourceDefinitionCriteriaResponse parses an HTTP response from a DeleteResourceDefinitionCriteriaWithResponse call
func ParseDeleteResourceDefinitionCriteriaResponse(rsp *http.Response) (*DeleteResourceDefinitionCriteriaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceDefinitionCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListActiveResourceByDefinitionResponse parses an HTTP response from a ListActiveResourceByDefinitionWithResponse call
func ParseListActiveResourceByDefinitionResponse(rsp *http.Response) (*ListActiveResourceByDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActiveResourceByDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListResourceDriversResponse parses an HTTP response from a ListResourceDriversWithResponse call
func ParseListResourceDriversResponse(rsp *http.Response) (*ListResourceDriversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceDriversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateResourceDriverResponse parses an HTTP response from a CreateResourceDriverWithResponse call
func ParseCreateResourceDriverResponse(rsp *http.Response) (*CreateResourceDriverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceDriverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteResourceDriverResponse parses an HTTP response from a DeleteResourceDriverWithResponse call
func ParseDeleteResourceDriverResponse(rsp *http.Response) (*DeleteResourceDriverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceDriverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetResourceDriverResponse parses an HTTP response from a GetResourceDriverWithResponse call
func ParseGetResourceDriverResponse(rsp *http.Response) (*GetResourceDriverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceDriverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateResourceDriverResponse parses an HTTP response from a UpdateResourceDriverWithResponse call
func ParseUpdateResourceDriverResponse(rsp *http.Response) (*UpdateResourceDriverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceDriverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListResourceTypesResponse parses an HTTP response from a ListResourceTypesWithResponse call
func ParseListResourceTypesResponse(rsp *http.Response) (*ListResourceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretstoresResponse parses an HTTP response from a GetOrgsOrgIdSecretstoresWithResponse call
func ParseGetOrgsOrgIdSecretstoresResponse(rsp *http.Response) (*GetOrgsOrgIdSecretstoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretstoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdSecretstoresResponse parses an HTTP response from a PostOrgsOrgIdSecretstoresWithResponse call
func ParsePostOrgsOrgIdSecretstoresResponse(rsp *http.Response) (*PostOrgsOrgIdSecretstoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdSecretstoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a DeleteOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParseDeleteOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a GetOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParseGetOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*GetOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdSecretstoresStoreIdResponse parses an HTTP response from a PatchOrgsOrgIdSecretstoresStoreIdWithResponse call
func ParsePatchOrgsOrgIdSecretstoresStoreIdResponse(rsp *http.Response) (*PatchOrgsOrgIdSecretstoresStoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdSecretstoresStoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListUserRolesInOrgResponse parses an HTTP response from a ListUserRolesInOrgWithResponse call
func ParseListUserRolesInOrgResponse(rsp *http.Response) (*ListUserRolesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserRolesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateServiceUserInOrgResponse parses an HTTP response from a CreateServiceUserInOrgWithResponse call
func ParseCreateServiceUserInOrgResponse(rsp *http.Response) (*CreateServiceUserInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceUserInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUserRoleInOrgResponse parses an HTTP response from a DeleteUserRoleInOrgWithResponse call
func ParseDeleteUserRoleInOrgResponse(rsp *http.Response) (*DeleteUserRoleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserRoleInOrgResponse parses an HTTP response from a GetUserRoleInOrgWithResponse call
func ParseGetUserRoleInOrgResponse(rsp *http.Response) (*GetUserRoleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateUserRoleInOrgResponse parses an HTTP response from a UpdateUserRoleInOrgWithResponse call
func ParseUpdateUserRoleInOrgResponse(rsp *http.Response) (*UpdateUserRoleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserRoleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfileChartVersionsResponse parses an HTTP response from a ListWorkloadProfileChartVersionsWithResponse call
func ParseListWorkloadProfileChartVersionsResponse(rsp *http.Response) (*ListWorkloadProfileChartVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfileChartVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileChartVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkloadProfileChartVersionResponse parses an HTTP response from a CreateWorkloadProfileChartVersionWithResponse call
func ParseCreateWorkloadProfileChartVersionResponse(rsp *http.Response) (*CreateWorkloadProfileChartVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkloadProfileChartVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadProfileChartVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfileFeaturesResponse parses an HTTP response from a ListWorkloadProfileFeaturesWithResponse call
func ParseListWorkloadProfileFeaturesResponse(rsp *http.Response) (*ListWorkloadProfileFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfileFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileFeatureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfilesResponse parses an HTTP response from a ListWorkloadProfilesWithResponse call
func ParseListWorkloadProfilesResponse(rsp *http.Response) (*ListWorkloadProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkloadProfileResponse parses an HTTP response from a CreateWorkloadProfileWithResponse call
func ParseCreateWorkloadProfileResponse(rsp *http.Response) (*CreateWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteWorkloadProfileResponse parses an HTTP response from a DeleteWorkloadProfileWithResponse call
func ParseDeleteWorkloadProfileResponse(rsp *http.Response) (*DeleteWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkloadProfileResponse parses an HTTP response from a GetWorkloadProfileWithResponse call
func ParseGetWorkloadProfileResponse(rsp *http.Response) (*GetWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkloadProfileResponse parses an HTTP response from a UpdateWorkloadProfileWithResponse call
func ParseUpdateWorkloadProfileResponse(rsp *http.Response) (*UpdateWorkloadProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListWorkloadProfileVersionsResponse parses an HTTP response from a ListWorkloadProfileVersionsWithResponse call
func ParseListWorkloadProfileVersionsResponse(rsp *http.Response) (*ListWorkloadProfileVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkloadProfileVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLatestWorkloadProfileVersionResponse parses an HTTP response from a GetLatestWorkloadProfileVersionWithResponse call
func ParseGetLatestWorkloadProfileVersionResponse(rsp *http.Response) (*GetLatestWorkloadProfileVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestWorkloadProfileVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListUserTokensResponse parses an HTTP response from a ListUserTokensWithResponse call
func ParseListUserTokensResponse(rsp *http.Response) (*ListUserTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserTokenResponse parses an HTTP response from a CreateUserTokenWithResponse call
func ParseCreateUserTokenResponse(rsp *http.Response) (*CreateUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteUserTokenResponse parses an HTTP response from a DeleteUserTokenWithResponse call
func ParseDeleteUserTokenResponse(rsp *http.Response) (*DeleteUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserTokenResponse parses an HTTP response from a GetUserTokenWithResponse call
func ParseGetUserTokenResponse(rsp *http.Response) (*GetUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
